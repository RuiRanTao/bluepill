
project_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080065c8  080065c8  000165c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e8  080067e8  00020308  2**0
                  CONTENTS
  4 .ARM          00000000  080067e8  080067e8  00020308  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067e8  080067e8  00020308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e8  080067e8  000167e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  080067f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000308  08006af8  00020308  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  08006af8  00020704  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc4d  00000000  00000000  00020331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b0  00000000  00000000  0002ff7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00033030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  000340e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8f1  00000000  00000000  00034ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152fa  00000000  00000000  0004f8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dc6a  00000000  00000000  00064be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f284d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a80  00000000  00000000  000f28a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000006c  00000000  00000000  000f7320  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000000e3  00000000  00000000  000f738c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000308 	.word	0x20000308
 8000128:	00000000 	.word	0x00000000
 800012c:	080065b0 	.word	0x080065b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000030c 	.word	0x2000030c
 8000148:	080065b0 	.word	0x080065b0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <AT24C02_iic_test>:
  * @brief  AT24C02与主控制器的IIC通讯测试代码
  * @param  None
  * @retval None
  */
void AT24C02_iic_test(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
    iic_stop();     /**< 必须先复位IIC总线上的设备到待机模式 */
 8000164:	f000 fc0e 	bl	8000984 <iic_stop>
    HAL_Delay(10);
 8000168:	200a      	movs	r0, #10
 800016a:	f001 fba7 	bl	80018bc <HAL_Delay>

    /** 检测总线上是否挂接了IIC设备（此处为AT24C02） */
    if (iic_check_device_status(AT24C02_DEVICE_ADDR) == 0)
 800016e:	20a0      	movs	r0, #160	; 0xa0
 8000170:	f000 fd14 	bl	8000b9c <iic_check_device_status>
 8000174:	4603      	mov	r3, r0
 8000176:	2b00      	cmp	r3, #0
 8000178:	d103      	bne.n	8000182 <AT24C02_iic_test+0x22>
    {
        printf("iic device exists\n");
 800017a:	480a      	ldr	r0, [pc, #40]	; (80001a4 <AT24C02_iic_test+0x44>)
 800017c:	f005 fa74 	bl	8005668 <puts>
 8000180:	e002      	b.n	8000188 <AT24C02_iic_test+0x28>
    }
    else
    {
        printf("no iic device exists\n");
 8000182:	4809      	ldr	r0, [pc, #36]	; (80001a8 <AT24C02_iic_test+0x48>)
 8000184:	f005 fa70 	bl	8005668 <puts>
    }

    AT24C02_write_test();
 8000188:	f000 f902 	bl	8000390 <AT24C02_write_test>
    HAL_Delay(5);
 800018c:	2005      	movs	r0, #5
 800018e:	f001 fb95 	bl	80018bc <HAL_Delay>
    AT24C02_read_test();
 8000192:	f000 f8d3 	bl	800033c <AT24C02_read_test>
    HAL_Delay(5);
 8000196:	2005      	movs	r0, #5
 8000198:	f001 fb90 	bl	80018bc <HAL_Delay>
    AT24C02_erase_test();
 800019c:	f000 f930 	bl	8000400 <AT24C02_erase_test>
}
 80001a0:	bf00      	nop
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	080065c8 	.word	0x080065c8
 80001a8:	080065dc 	.word	0x080065dc

080001ac <AT24C02_read_data>:
  * @param  start_addr： 读取数据的起始地址
  * @param  data_length： 数据的长度
  * @retval None
  */
void AT24C02_read_data(uint8_t *read_data, uint16_t start_addr, uint16_t data_length)
{
 80001ac:	b590      	push	{r4, r7, lr}
 80001ae:	b085      	sub	sp, #20
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
 80001b4:	460b      	mov	r3, r1
 80001b6:	807b      	strh	r3, [r7, #2]
 80001b8:	4613      	mov	r3, r2
 80001ba:	803b      	strh	r3, [r7, #0]
    uint16_t i;

    iic_start();
 80001bc:	f000 fbc2 	bl	8000944 <iic_start>
    iic_sendbyte(AT24C02_DEVICE_ADDR | IIC_WRITE);
 80001c0:	20a0      	movs	r0, #160	; 0xa0
 80001c2:	f000 fc01 	bl	80009c8 <iic_sendbyte>
//    AT24C02_ack();
    if (iic_wait_ack() != 0)
 80001c6:	f000 fc7d 	bl	8000ac4 <iic_wait_ack>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d004      	beq.n	80001da <AT24C02_read_data+0x2e>
    {
        AT24C02_error_handle();
 80001d0:	f000 f94e 	bl	8000470 <AT24C02_error_handle>
        printf("first read error\r\n");
 80001d4:	4820      	ldr	r0, [pc, #128]	; (8000258 <AT24C02_read_data+0xac>)
 80001d6:	f005 fa47 	bl	8005668 <puts>
    }

    if (AT24C02_ADDR_BYTE == 1)
    {
        iic_sendbyte((uint8_t)start_addr & 0xff);
 80001da:	887b      	ldrh	r3, [r7, #2]
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 fbf2 	bl	80009c8 <iic_sendbyte>
//        AT24C02_ack();
        if (iic_wait_ack() != 0)
 80001e4:	f000 fc6e 	bl	8000ac4 <iic_wait_ack>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d004      	beq.n	80001f8 <AT24C02_read_data+0x4c>
        {
            AT24C02_error_handle();
 80001ee:	f000 f93f 	bl	8000470 <AT24C02_error_handle>
            printf("addr byte error\r\n");
 80001f2:	481a      	ldr	r0, [pc, #104]	; (800025c <AT24C02_read_data+0xb0>)
 80001f4:	f005 fa38 	bl	8005668 <puts>
        }
    }

    iic_start();
 80001f8:	f000 fba4 	bl	8000944 <iic_start>
    iic_sendbyte(AT24C02_DEVICE_ADDR | IIC_READ);
 80001fc:	20a1      	movs	r0, #161	; 0xa1
 80001fe:	f000 fbe3 	bl	80009c8 <iic_sendbyte>
//    AT24C02_ack();
    if (iic_wait_ack() != 0)
 8000202:	f000 fc5f 	bl	8000ac4 <iic_wait_ack>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d004      	beq.n	8000216 <AT24C02_read_data+0x6a>
    {
        AT24C02_error_handle();
 800020c:	f000 f930 	bl	8000470 <AT24C02_error_handle>
        printf("read data error\r\n");
 8000210:	4813      	ldr	r0, [pc, #76]	; (8000260 <AT24C02_read_data+0xb4>)
 8000212:	f005 fa29 	bl	8005668 <puts>
    }

    for (i = 0; i < data_length; i++)
 8000216:	2300      	movs	r3, #0
 8000218:	81fb      	strh	r3, [r7, #14]
 800021a:	e013      	b.n	8000244 <AT24C02_read_data+0x98>
    {
        read_data[i] = iic_readbyte();
 800021c:	89fb      	ldrh	r3, [r7, #14]
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	18d4      	adds	r4, r2, r3
 8000222:	f000 fc11 	bl	8000a48 <iic_readbyte>
 8000226:	4603      	mov	r3, r0
 8000228:	7023      	strb	r3, [r4, #0]

        if (i != data_length - 1)
 800022a:	89fa      	ldrh	r2, [r7, #14]
 800022c:	883b      	ldrh	r3, [r7, #0]
 800022e:	3b01      	subs	r3, #1
 8000230:	429a      	cmp	r2, r3
 8000232:	d002      	beq.n	800023a <AT24C02_read_data+0x8e>
        {
            iic_ack();      /**< 读完非最后一个字节后， 产生应答信号 */
 8000234:	f000 fc76 	bl	8000b24 <iic_ack>
 8000238:	e001      	b.n	800023e <AT24C02_read_data+0x92>
        }
        else
        {
            iic_nack();     /**< 最后一个字节读完后 产生非应答信号 */
 800023a:	f000 fc93 	bl	8000b64 <iic_nack>
    for (i = 0; i < data_length; i++)
 800023e:	89fb      	ldrh	r3, [r7, #14]
 8000240:	3301      	adds	r3, #1
 8000242:	81fb      	strh	r3, [r7, #14]
 8000244:	89fa      	ldrh	r2, [r7, #14]
 8000246:	883b      	ldrh	r3, [r7, #0]
 8000248:	429a      	cmp	r2, r3
 800024a:	d3e7      	bcc.n	800021c <AT24C02_read_data+0x70>
        }
//        printf("read data is %d\n", read_data[i]);  /**< 调试代码 */
    }

    iic_stop();
 800024c:	f000 fb9a 	bl	8000984 <iic_stop>
}
 8000250:	bf00      	nop
 8000252:	3714      	adds	r7, #20
 8000254:	46bd      	mov	sp, r7
 8000256:	bd90      	pop	{r4, r7, pc}
 8000258:	080065f4 	.word	0x080065f4
 800025c:	08006608 	.word	0x08006608
 8000260:	0800661c 	.word	0x0800661c

08000264 <AT24C02_write_data>:
  * @param  start_addr：  要写入AT24C02的起始地址
  * @param  data_length： 要写入AT24C02的数据长度
  * @retval None
  */
void AT24C02_write_data(uint8_t *write_data, uint16_t start_addr, uint16_t data_length)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	460b      	mov	r3, r1
 800026e:	807b      	strh	r3, [r7, #2]
 8000270:	4613      	mov	r3, r2
 8000272:	803b      	strh	r3, [r7, #0]
    uint16_t i, j;
    uint16_t start_addr_dup;

    start_addr_dup = start_addr;
 8000274:	887b      	ldrh	r3, [r7, #2]
 8000276:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < data_length; i++)
 8000278:	2300      	movs	r3, #0
 800027a:	81fb      	strh	r3, [r7, #14]
 800027c:	e04e      	b.n	800031c <AT24C02_write_data+0xb8>
    {

        if ((i == 0) || (start_addr_dup & (AT24C02_PAGE_SIZE - 1)) == 0)
 800027e:	89fb      	ldrh	r3, [r7, #14]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d004      	beq.n	800028e <AT24C02_write_data+0x2a>
 8000284:	897b      	ldrh	r3, [r7, #10]
 8000286:	f003 0307 	and.w	r3, r3, #7
 800028a:	2b00      	cmp	r3, #0
 800028c:	d12f      	bne.n	80002ee <AT24C02_write_data+0x8a>
        {
            iic_stop();
 800028e:	f000 fb79 	bl	8000984 <iic_stop>

            for (j = 0; j < 2000; j++)
 8000292:	2300      	movs	r3, #0
 8000294:	81bb      	strh	r3, [r7, #12]
 8000296:	e00c      	b.n	80002b2 <AT24C02_write_data+0x4e>
            {
                iic_start();
 8000298:	f000 fb54 	bl	8000944 <iic_start>
                iic_sendbyte(AT24C02_DEVICE_ADDR | IIC_WRITE);
 800029c:	20a0      	movs	r0, #160	; 0xa0
 800029e:	f000 fb93 	bl	80009c8 <iic_sendbyte>

                if (iic_wait_ack() == 0)
 80002a2:	f000 fc0f 	bl	8000ac4 <iic_wait_ack>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d007      	beq.n	80002bc <AT24C02_write_data+0x58>
            for (j = 0; j < 2000; j++)
 80002ac:	89bb      	ldrh	r3, [r7, #12]
 80002ae:	3301      	adds	r3, #1
 80002b0:	81bb      	strh	r3, [r7, #12]
 80002b2:	89bb      	ldrh	r3, [r7, #12]
 80002b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80002b8:	d3ee      	bcc.n	8000298 <AT24C02_write_data+0x34>
 80002ba:	e000      	b.n	80002be <AT24C02_write_data+0x5a>
                {
                    break;
 80002bc:	bf00      	nop
                }
            }
            if (j >= 2000)
 80002be:	89bb      	ldrh	r3, [r7, #12]
 80002c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80002c4:	d304      	bcc.n	80002d0 <AT24C02_write_data+0x6c>
            {
                printf("j = 1000\r\n");
 80002c6:	481a      	ldr	r0, [pc, #104]	; (8000330 <AT24C02_write_data+0xcc>)
 80002c8:	f005 f9ce 	bl	8005668 <puts>
                AT24C02_error_handle();
 80002cc:	f000 f8d0 	bl	8000470 <AT24C02_error_handle>
            }

            if (AT24C02_ADDR_BYTE == 1)
            {
                iic_sendbyte((uint8_t)start_addr_dup & 0xff);
 80002d0:	897b      	ldrh	r3, [r7, #10]
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 fb77 	bl	80009c8 <iic_sendbyte>
//                AT24C02_ack();
                if (iic_wait_ack() != 0)
 80002da:	f000 fbf3 	bl	8000ac4 <iic_wait_ack>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d004      	beq.n	80002ee <AT24C02_write_data+0x8a>
                {
                    AT24C02_error_handle();
 80002e4:	f000 f8c4 	bl	8000470 <AT24C02_error_handle>
                    printf("addr_byte wrong\r\n");
 80002e8:	4812      	ldr	r0, [pc, #72]	; (8000334 <AT24C02_write_data+0xd0>)
 80002ea:	f005 f9bd 	bl	8005668 <puts>
                }
            }
        }

        iic_sendbyte(write_data[i]);
 80002ee:	89fb      	ldrh	r3, [r7, #14]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	4413      	add	r3, r2
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fb66 	bl	80009c8 <iic_sendbyte>
//        AT24C02_ack();
        if (iic_wait_ack() != 0)
 80002fc:	f000 fbe2 	bl	8000ac4 <iic_wait_ack>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d004      	beq.n	8000310 <AT24C02_write_data+0xac>
        {
            AT24C02_error_handle();
 8000306:	f000 f8b3 	bl	8000470 <AT24C02_error_handle>
            printf("write failed\r\n");
 800030a:	480b      	ldr	r0, [pc, #44]	; (8000338 <AT24C02_write_data+0xd4>)
 800030c:	f005 f9ac 	bl	8005668 <puts>
        }

//        printf("write_data is %d \n", write_data[i]);    /**< 调试代码 */
        start_addr_dup++;
 8000310:	897b      	ldrh	r3, [r7, #10]
 8000312:	3301      	adds	r3, #1
 8000314:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < data_length; i++)
 8000316:	89fb      	ldrh	r3, [r7, #14]
 8000318:	3301      	adds	r3, #1
 800031a:	81fb      	strh	r3, [r7, #14]
 800031c:	89fa      	ldrh	r2, [r7, #14]
 800031e:	883b      	ldrh	r3, [r7, #0]
 8000320:	429a      	cmp	r2, r3
 8000322:	d3ac      	bcc.n	800027e <AT24C02_write_data+0x1a>
    }

    iic_stop();
 8000324:	f000 fb2e 	bl	8000984 <iic_stop>
}
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	08006630 	.word	0x08006630
 8000334:	0800663c 	.word	0x0800663c
 8000338:	08006650 	.word	0x08006650

0800033c <AT24C02_read_test>:
  * @brief  AT24C02读取数据测试
  * @param  None
  * @retval None
  */
static void AT24C02_read_test(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
    uint16_t i;

    AT24C02_read_data(test_buffer, 0, (AT24C02_MEM_SIZE % 10));
 8000342:	2206      	movs	r2, #6
 8000344:	2100      	movs	r1, #0
 8000346:	480e      	ldr	r0, [pc, #56]	; (8000380 <AT24C02_read_test+0x44>)
 8000348:	f7ff ff30 	bl	80001ac <AT24C02_read_data>

    printf("read data is:\n");
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <AT24C02_read_test+0x48>)
 800034e:	f005 f98b 	bl	8005668 <puts>
    for (i = 0; i < (AT24C02_MEM_SIZE % 10); i++)
 8000352:	2300      	movs	r3, #0
 8000354:	80fb      	strh	r3, [r7, #6]
 8000356:	e009      	b.n	800036c <AT24C02_read_test+0x30>
    {
        printf("%d ", test_buffer[i]);
 8000358:	88fb      	ldrh	r3, [r7, #6]
 800035a:	4a09      	ldr	r2, [pc, #36]	; (8000380 <AT24C02_read_test+0x44>)
 800035c:	5cd3      	ldrb	r3, [r2, r3]
 800035e:	4619      	mov	r1, r3
 8000360:	4809      	ldr	r0, [pc, #36]	; (8000388 <AT24C02_read_test+0x4c>)
 8000362:	f005 f8fb 	bl	800555c <iprintf>
    for (i = 0; i < (AT24C02_MEM_SIZE % 10); i++)
 8000366:	88fb      	ldrh	r3, [r7, #6]
 8000368:	3301      	adds	r3, #1
 800036a:	80fb      	strh	r3, [r7, #6]
 800036c:	88fb      	ldrh	r3, [r7, #6]
 800036e:	2b05      	cmp	r3, #5
 8000370:	d9f2      	bls.n	8000358 <AT24C02_read_test+0x1c>
    }

    printf("\r\nread test ok\r\n");
 8000372:	4806      	ldr	r0, [pc, #24]	; (800038c <AT24C02_read_test+0x50>)
 8000374:	f005 f978 	bl	8005668 <puts>
}
 8000378:	bf00      	nop
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20000324 	.word	0x20000324
 8000384:	08006660 	.word	0x08006660
 8000388:	08006670 	.word	0x08006670
 800038c:	08006674 	.word	0x08006674

08000390 <AT24C02_write_test>:
  * @brief  AT24C02写数据测试
  * @param  None
  * @retval None
  */
static void AT24C02_write_test(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
    uint16_t i;

    for (i = 0; i < (AT24C02_MEM_SIZE % 10); i++)
 8000396:	2300      	movs	r3, #0
 8000398:	80fb      	strh	r3, [r7, #6]
 800039a:	e007      	b.n	80003ac <AT24C02_write_test+0x1c>
    {
        test_buffer[i] = i;
 800039c:	88fb      	ldrh	r3, [r7, #6]
 800039e:	88fa      	ldrh	r2, [r7, #6]
 80003a0:	b2d1      	uxtb	r1, r2
 80003a2:	4a13      	ldr	r2, [pc, #76]	; (80003f0 <AT24C02_write_test+0x60>)
 80003a4:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < (AT24C02_MEM_SIZE % 10); i++)
 80003a6:	88fb      	ldrh	r3, [r7, #6]
 80003a8:	3301      	adds	r3, #1
 80003aa:	80fb      	strh	r3, [r7, #6]
 80003ac:	88fb      	ldrh	r3, [r7, #6]
 80003ae:	2b05      	cmp	r3, #5
 80003b0:	d9f4      	bls.n	800039c <AT24C02_write_test+0xc>
    }

    AT24C02_write_data(test_buffer, 0, (AT24C02_MEM_SIZE % 10));
 80003b2:	2206      	movs	r2, #6
 80003b4:	2100      	movs	r1, #0
 80003b6:	480e      	ldr	r0, [pc, #56]	; (80003f0 <AT24C02_write_test+0x60>)
 80003b8:	f7ff ff54 	bl	8000264 <AT24C02_write_data>

    printf("write data is:\n");
 80003bc:	480d      	ldr	r0, [pc, #52]	; (80003f4 <AT24C02_write_test+0x64>)
 80003be:	f005 f953 	bl	8005668 <puts>
    for (i = 0; i < (AT24C02_MEM_SIZE % 10); i++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	80fb      	strh	r3, [r7, #6]
 80003c6:	e009      	b.n	80003dc <AT24C02_write_test+0x4c>
    {
        printf("%d ", test_buffer[i]);
 80003c8:	88fb      	ldrh	r3, [r7, #6]
 80003ca:	4a09      	ldr	r2, [pc, #36]	; (80003f0 <AT24C02_write_test+0x60>)
 80003cc:	5cd3      	ldrb	r3, [r2, r3]
 80003ce:	4619      	mov	r1, r3
 80003d0:	4809      	ldr	r0, [pc, #36]	; (80003f8 <AT24C02_write_test+0x68>)
 80003d2:	f005 f8c3 	bl	800555c <iprintf>
    for (i = 0; i < (AT24C02_MEM_SIZE % 10); i++)
 80003d6:	88fb      	ldrh	r3, [r7, #6]
 80003d8:	3301      	adds	r3, #1
 80003da:	80fb      	strh	r3, [r7, #6]
 80003dc:	88fb      	ldrh	r3, [r7, #6]
 80003de:	2b05      	cmp	r3, #5
 80003e0:	d9f2      	bls.n	80003c8 <AT24C02_write_test+0x38>
    }

    printf("\r\nwrite test ok\r\n");
 80003e2:	4806      	ldr	r0, [pc, #24]	; (80003fc <AT24C02_write_test+0x6c>)
 80003e4:	f005 f940 	bl	8005668 <puts>
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000324 	.word	0x20000324
 80003f4:	08006684 	.word	0x08006684
 80003f8:	08006670 	.word	0x08006670
 80003fc:	08006694 	.word	0x08006694

08000400 <AT24C02_erase_test>:
  * @brief  AT24C02擦除数据测试
  * @param  None
  * @retval None
  */
static void AT24C02_erase_test(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
    uint16_t i;

    for (i = 0; i < (AT24C02_MEM_SIZE % 10); i++)
 8000406:	2300      	movs	r3, #0
 8000408:	80fb      	strh	r3, [r7, #6]
 800040a:	e006      	b.n	800041a <AT24C02_erase_test+0x1a>
    {
        test_buffer[i] = 0xff;
 800040c:	88fb      	ldrh	r3, [r7, #6]
 800040e:	4a14      	ldr	r2, [pc, #80]	; (8000460 <AT24C02_erase_test+0x60>)
 8000410:	21ff      	movs	r1, #255	; 0xff
 8000412:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < (AT24C02_MEM_SIZE % 10); i++)
 8000414:	88fb      	ldrh	r3, [r7, #6]
 8000416:	3301      	adds	r3, #1
 8000418:	80fb      	strh	r3, [r7, #6]
 800041a:	88fb      	ldrh	r3, [r7, #6]
 800041c:	2b05      	cmp	r3, #5
 800041e:	d9f5      	bls.n	800040c <AT24C02_erase_test+0xc>
    }

    AT24C02_write_data(test_buffer, 0, (AT24C02_MEM_SIZE % 10));
 8000420:	2206      	movs	r2, #6
 8000422:	2100      	movs	r1, #0
 8000424:	480e      	ldr	r0, [pc, #56]	; (8000460 <AT24C02_erase_test+0x60>)
 8000426:	f7ff ff1d 	bl	8000264 <AT24C02_write_data>

    printf("erase value is: \n");
 800042a:	480e      	ldr	r0, [pc, #56]	; (8000464 <AT24C02_erase_test+0x64>)
 800042c:	f005 f91c 	bl	8005668 <puts>
    for (i = 0; i < (AT24C02_MEM_SIZE % 10); i++)
 8000430:	2300      	movs	r3, #0
 8000432:	80fb      	strh	r3, [r7, #6]
 8000434:	e009      	b.n	800044a <AT24C02_erase_test+0x4a>
    {
        printf("%d ", test_buffer[i]);
 8000436:	88fb      	ldrh	r3, [r7, #6]
 8000438:	4a09      	ldr	r2, [pc, #36]	; (8000460 <AT24C02_erase_test+0x60>)
 800043a:	5cd3      	ldrb	r3, [r2, r3]
 800043c:	4619      	mov	r1, r3
 800043e:	480a      	ldr	r0, [pc, #40]	; (8000468 <AT24C02_erase_test+0x68>)
 8000440:	f005 f88c 	bl	800555c <iprintf>
    for (i = 0; i < (AT24C02_MEM_SIZE % 10); i++)
 8000444:	88fb      	ldrh	r3, [r7, #6]
 8000446:	3301      	adds	r3, #1
 8000448:	80fb      	strh	r3, [r7, #6]
 800044a:	88fb      	ldrh	r3, [r7, #6]
 800044c:	2b05      	cmp	r3, #5
 800044e:	d9f2      	bls.n	8000436 <AT24C02_erase_test+0x36>
    }

    printf("\r\nerase test ok\r\n");
 8000450:	4806      	ldr	r0, [pc, #24]	; (800046c <AT24C02_erase_test+0x6c>)
 8000452:	f005 f909 	bl	8005668 <puts>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000324 	.word	0x20000324
 8000464:	080066a8 	.word	0x080066a8
 8000468:	08006670 	.word	0x08006670
 800046c:	080066bc 	.word	0x080066bc

08000470 <AT24C02_error_handle>:
  * @brief  AT24C02应答错误处理程序
  * @param  None
  * @retval None
  */
static void AT24C02_error_handle(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
    iic_stop();
 8000474:	f000 fa86 	bl	8000984 <iic_stop>
//    printf("At24C02 read failed\r\n");   /**< 调试用 */
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}

0800047c <ReadID>:
uint8_t write_addr   = 0x02;					// 写数据命令
uint8_t read_addr    = 0x03;					// 读数据命令

/* 读ID */
void ReadID(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
	uint8_t temp_ID[5] = {0,0,0,0,0};						// 接收缓存
 8000482:	4a15      	ldr	r2, [pc, #84]	; (80004d8 <ReadID+0x5c>)
 8000484:	463b      	mov	r3, r7
 8000486:	e892 0003 	ldmia.w	r2, {r0, r1}
 800048a:	6018      	str	r0, [r3, #0]
 800048c:	3304      	adds	r3, #4
 800048e:	7019      	strb	r1, [r3, #0]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	// 使能CS
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000496:	4811      	ldr	r0, [pc, #68]	; (80004dc <ReadID+0x60>)
 8000498:	f001 ff7b 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &w25x_read_id, 1, 100);		// 读ID发送指令
 800049c:	2364      	movs	r3, #100	; 0x64
 800049e:	2201      	movs	r2, #1
 80004a0:	490f      	ldr	r1, [pc, #60]	; (80004e0 <ReadID+0x64>)
 80004a2:	4810      	ldr	r0, [pc, #64]	; (80004e4 <ReadID+0x68>)
 80004a4:	f002 fc44 	bl	8002d30 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, temp_ID, 5, 100);				// 读取ID
 80004a8:	4639      	mov	r1, r7
 80004aa:	2364      	movs	r3, #100	; 0x64
 80004ac:	2205      	movs	r2, #5
 80004ae:	480d      	ldr	r0, [pc, #52]	; (80004e4 <ReadID+0x68>)
 80004b0:	f002 fd7a 	bl	8002fa8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	// 失能CS
 80004b4:	2201      	movs	r2, #1
 80004b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ba:	4808      	ldr	r0, [pc, #32]	; (80004dc <ReadID+0x60>)
 80004bc:	f001 ff69 	bl	8002392 <HAL_GPIO_WritePin>

	/* 测试打印 */
	printf("readID is %x%x\n",temp_ID[3],temp_ID[4]);
 80004c0:	78fb      	ldrb	r3, [r7, #3]
 80004c2:	4619      	mov	r1, r3
 80004c4:	793b      	ldrb	r3, [r7, #4]
 80004c6:	461a      	mov	r2, r3
 80004c8:	4807      	ldr	r0, [pc, #28]	; (80004e8 <ReadID+0x6c>)
 80004ca:	f005 f847 	bl	800555c <iprintf>
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	080066e0 	.word	0x080066e0
 80004dc:	40011000 	.word	0x40011000
 80004e0:	20000000 	.word	0x20000000
 80004e4:	2000052c 	.word	0x2000052c
 80004e8:	080066d0 	.word	0x080066d0

080004ec <CheckBusy>:

/* 检查是否繁忙 */
void CheckBusy(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
	uint8_t status=1;
 80004f2:	2301      	movs	r3, #1
 80004f4:	70fb      	strb	r3, [r7, #3]
	uint32_t timeCount=0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
	do
	{
		timeCount++;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3301      	adds	r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
		if(timeCount > 0xEFFFFFFF) //等待超时
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 8000506:	d21d      	bcs.n	8000544 <CheckBusy+0x58>
		{
			return ;
		}

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	// 使能CS
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050e:	480f      	ldr	r0, [pc, #60]	; (800054c <CheckBusy+0x60>)
 8000510:	f001 ff3f 	bl	8002392 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &check_addr, 1, 100);			// 发送指令
 8000514:	2364      	movs	r3, #100	; 0x64
 8000516:	2201      	movs	r2, #1
 8000518:	490d      	ldr	r1, [pc, #52]	; (8000550 <CheckBusy+0x64>)
 800051a:	480e      	ldr	r0, [pc, #56]	; (8000554 <CheckBusy+0x68>)
 800051c:	f002 fc08 	bl	8002d30 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &status, 1, 100);				// 读取
 8000520:	1cf9      	adds	r1, r7, #3
 8000522:	2364      	movs	r3, #100	; 0x64
 8000524:	2201      	movs	r2, #1
 8000526:	480b      	ldr	r0, [pc, #44]	; (8000554 <CheckBusy+0x68>)
 8000528:	f002 fd3e 	bl	8002fa8 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	// 失能CS
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <CheckBusy+0x60>)
 8000534:	f001 ff2d 	bl	8002392 <HAL_GPIO_WritePin>

	}while((status&0x01)==0x01);
 8000538:	78fb      	ldrb	r3, [r7, #3]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	2b00      	cmp	r3, #0
 8000540:	d1db      	bne.n	80004fa <CheckBusy+0xe>
 8000542:	e000      	b.n	8000546 <CheckBusy+0x5a>
			return ;
 8000544:	bf00      	nop
}
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40011000 	.word	0x40011000
 8000550:	20000001 	.word	0x20000001
 8000554:	2000052c 	.word	0x2000052c

08000558 <WriteData>:


/* 写入数据 */
void WriteData(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
	uint8_t temp_wdata[5] = {0x99,0x88,0x77,0x66,0x55};		// 需要写入的数据
 800055e:	4a34      	ldr	r2, [pc, #208]	; (8000630 <WriteData+0xd8>)
 8000560:	463b      	mov	r3, r7
 8000562:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000566:	6018      	str	r0, [r3, #0]
 8000568:	3304      	adds	r3, #4
 800056a:	7019      	strb	r1, [r3, #0]

	/* 检查是否繁忙 */
	CheckBusy();
 800056c:	f7ff ffbe 	bl	80004ec <CheckBusy>

	/* 写使能 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	// 使能CS
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	482f      	ldr	r0, [pc, #188]	; (8000634 <WriteData+0xdc>)
 8000578:	f001 ff0b 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &enable_write, 1, 100);		// 发送指令
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	2201      	movs	r2, #1
 8000580:	492d      	ldr	r1, [pc, #180]	; (8000638 <WriteData+0xe0>)
 8000582:	482e      	ldr	r0, [pc, #184]	; (800063c <WriteData+0xe4>)
 8000584:	f002 fbd4 	bl	8002d30 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	// 失能CS
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058e:	4829      	ldr	r0, [pc, #164]	; (8000634 <WriteData+0xdc>)
 8000590:	f001 feff 	bl	8002392 <HAL_GPIO_WritePin>

	/* 擦除 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	// 使能CS
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059a:	4826      	ldr	r0, [pc, #152]	; (8000634 <WriteData+0xdc>)
 800059c:	f001 fef9 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &erase_addr, 1, 100);			// 发送指令
 80005a0:	2364      	movs	r3, #100	; 0x64
 80005a2:	2201      	movs	r2, #1
 80005a4:	4926      	ldr	r1, [pc, #152]	; (8000640 <WriteData+0xe8>)
 80005a6:	4825      	ldr	r0, [pc, #148]	; (800063c <WriteData+0xe4>)
 80005a8:	f002 fbc2 	bl	8002d30 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, m_addr, 3, 100);				// 发送地址
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	2203      	movs	r2, #3
 80005b0:	4924      	ldr	r1, [pc, #144]	; (8000644 <WriteData+0xec>)
 80005b2:	4822      	ldr	r0, [pc, #136]	; (800063c <WriteData+0xe4>)
 80005b4:	f002 fbbc 	bl	8002d30 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	// 失能CS
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005be:	481d      	ldr	r0, [pc, #116]	; (8000634 <WriteData+0xdc>)
 80005c0:	f001 fee7 	bl	8002392 <HAL_GPIO_WritePin>

	/* 再次检查是否繁忙 */
	CheckBusy();
 80005c4:	f7ff ff92 	bl	80004ec <CheckBusy>

	/* 写使能 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	// 使能CS
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ce:	4819      	ldr	r0, [pc, #100]	; (8000634 <WriteData+0xdc>)
 80005d0:	f001 fedf 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &enable_write, 1, 100);		// 发送指令
 80005d4:	2364      	movs	r3, #100	; 0x64
 80005d6:	2201      	movs	r2, #1
 80005d8:	4917      	ldr	r1, [pc, #92]	; (8000638 <WriteData+0xe0>)
 80005da:	4818      	ldr	r0, [pc, #96]	; (800063c <WriteData+0xe4>)
 80005dc:	f002 fba8 	bl	8002d30 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	// 失能CS
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e6:	4813      	ldr	r0, [pc, #76]	; (8000634 <WriteData+0xdc>)
 80005e8:	f001 fed3 	bl	8002392 <HAL_GPIO_WritePin>

	/* 写数据 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	// 使能CS
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f2:	4810      	ldr	r0, [pc, #64]	; (8000634 <WriteData+0xdc>)
 80005f4:	f001 fecd 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &write_addr, 1, 100);			// 发送指令
 80005f8:	2364      	movs	r3, #100	; 0x64
 80005fa:	2201      	movs	r2, #1
 80005fc:	4912      	ldr	r1, [pc, #72]	; (8000648 <WriteData+0xf0>)
 80005fe:	480f      	ldr	r0, [pc, #60]	; (800063c <WriteData+0xe4>)
 8000600:	f002 fb96 	bl	8002d30 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, m_addr, 3, 100);				// 地址
 8000604:	2364      	movs	r3, #100	; 0x64
 8000606:	2203      	movs	r2, #3
 8000608:	490e      	ldr	r1, [pc, #56]	; (8000644 <WriteData+0xec>)
 800060a:	480c      	ldr	r0, [pc, #48]	; (800063c <WriteData+0xe4>)
 800060c:	f002 fb90 	bl	8002d30 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, temp_wdata, 5, 100);			// 写入数据
 8000610:	4639      	mov	r1, r7
 8000612:	2364      	movs	r3, #100	; 0x64
 8000614:	2205      	movs	r2, #5
 8000616:	4809      	ldr	r0, [pc, #36]	; (800063c <WriteData+0xe4>)
 8000618:	f002 fb8a 	bl	8002d30 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	// 失能CS
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000622:	4804      	ldr	r0, [pc, #16]	; (8000634 <WriteData+0xdc>)
 8000624:	f001 feb5 	bl	8002392 <HAL_GPIO_WritePin>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	080066e8 	.word	0x080066e8
 8000634:	40011000 	.word	0x40011000
 8000638:	20000002 	.word	0x20000002
 800063c:	2000052c 	.word	0x2000052c
 8000640:	20000003 	.word	0x20000003
 8000644:	20000424 	.word	0x20000424
 8000648:	20000004 	.word	0x20000004

0800064c <ReadData>:

/* 读取数据 */
void ReadData(void)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b085      	sub	sp, #20
 8000650:	af02      	add	r7, sp, #8
	uint8_t temp_rdata[5] = {0,0,0,0,0};					// 读出数据保存的buff
 8000652:	4a1d      	ldr	r2, [pc, #116]	; (80006c8 <ReadData+0x7c>)
 8000654:	463b      	mov	r3, r7
 8000656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065a:	6018      	str	r0, [r3, #0]
 800065c:	3304      	adds	r3, #4
 800065e:	7019      	strb	r1, [r3, #0]


	/* 检查是否繁忙 */
	CheckBusy();
 8000660:	f7ff ff44 	bl	80004ec <CheckBusy>

	/* 开始读数据 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	// 使能CS
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066a:	4818      	ldr	r0, [pc, #96]	; (80006cc <ReadData+0x80>)
 800066c:	f001 fe91 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &read_addr, 1, 100);			// 读发送指令
 8000670:	2364      	movs	r3, #100	; 0x64
 8000672:	2201      	movs	r2, #1
 8000674:	4916      	ldr	r1, [pc, #88]	; (80006d0 <ReadData+0x84>)
 8000676:	4817      	ldr	r0, [pc, #92]	; (80006d4 <ReadData+0x88>)
 8000678:	f002 fb5a 	bl	8002d30 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, m_addr, 3, 100);				// 地址
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	2203      	movs	r2, #3
 8000680:	4915      	ldr	r1, [pc, #84]	; (80006d8 <ReadData+0x8c>)
 8000682:	4814      	ldr	r0, [pc, #80]	; (80006d4 <ReadData+0x88>)
 8000684:	f002 fb54 	bl	8002d30 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, temp_rdata, 5, 100);			// 拿到数据
 8000688:	4639      	mov	r1, r7
 800068a:	2364      	movs	r3, #100	; 0x64
 800068c:	2205      	movs	r2, #5
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <ReadData+0x88>)
 8000690:	f002 fc8a 	bl	8002fa8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	// 失能CS
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069a:	480c      	ldr	r0, [pc, #48]	; (80006cc <ReadData+0x80>)
 800069c:	f001 fe79 	bl	8002392 <HAL_GPIO_WritePin>

	/* 测试打印 */
	printf("Read flash data is:%x %x %x %x %x\n",temp_rdata[0],temp_rdata[1],temp_rdata[2],temp_rdata[3],temp_rdata[4]);
 80006a0:	783b      	ldrb	r3, [r7, #0]
 80006a2:	4619      	mov	r1, r3
 80006a4:	787b      	ldrb	r3, [r7, #1]
 80006a6:	4618      	mov	r0, r3
 80006a8:	78bb      	ldrb	r3, [r7, #2]
 80006aa:	461c      	mov	r4, r3
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	793a      	ldrb	r2, [r7, #4]
 80006b0:	9201      	str	r2, [sp, #4]
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	4623      	mov	r3, r4
 80006b6:	4602      	mov	r2, r0
 80006b8:	4808      	ldr	r0, [pc, #32]	; (80006dc <ReadData+0x90>)
 80006ba:	f004 ff4f 	bl	800555c <iprintf>
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd90      	pop	{r4, r7, pc}
 80006c6:	bf00      	nop
 80006c8:	080066e0 	.word	0x080066e0
 80006cc:	40011000 	.word	0x40011000
 80006d0:	20000005 	.word	0x20000005
 80006d4:	2000052c 	.word	0x2000052c
 80006d8:	20000424 	.word	0x20000424
 80006dc:	080066f0 	.word	0x080066f0

080006e0 <Sound>:
	  }
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
}

void Sound(int cycle)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	  TIM3->ARR = (uint16_t)((cycle-1)/1);    //与上方相�??
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <Sound+0x2c>)
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM3->CCR2 =  (uint16_t)((cycle-1)/2);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	0fda      	lsrs	r2, r3, #31
 80006f8:	4413      	add	r3, r2
 80006fa:	105b      	asrs	r3, r3, #1
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b03      	ldr	r3, [pc, #12]	; (800070c <Sound+0x2c>)
 8000700:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	40000400 	.word	0x40000400

08000710 <play_music>:

void play_music(int Song_Num)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
   int i=0;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
   HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800071c:	2104      	movs	r1, #4
 800071e:	4831      	ldr	r0, [pc, #196]	; (80007e4 <play_music+0xd4>)
 8000720:	f003 f8e8 	bl	80038f4 <HAL_TIM_PWM_Start>
		switch (Song_Num)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d003      	beq.n	8000732 <play_music+0x22>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d028      	beq.n	8000782 <play_music+0x72>
 8000730:	e04f      	b.n	80007d2 <play_music+0xc2>
			{
			case 0:
				{
					length =sizeof(music_0)/sizeof(music_0[0]);
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <play_music+0xd8>)
 8000734:	2224      	movs	r2, #36	; 0x24
 8000736:	601a      	str	r2, [r3, #0]
					for(i=0; i<(length/2); i++)//取数组数据
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	e017      	b.n	800076e <play_music+0x5e>
					{
						Sound(music_0[2*i]);//PWM波周期
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	4a2a      	ldr	r2, [pc, #168]	; (80007ec <play_music+0xdc>)
 8000744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ffc9 	bl	80006e0 <Sound>
						HAL_Delay(10*music_0[2*i+1]);//音长的时间都乘以5即一拍为500微秒，此值"5"可调整，只是播放的整个快慢而已，有点类似于视频快进和后退
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	3301      	adds	r3, #1
 8000754:	4a25      	ldr	r2, [pc, #148]	; (80007ec <play_music+0xdc>)
 8000756:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800075a:	4613      	mov	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4413      	add	r3, r2
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	4618      	mov	r0, r3
 8000764:	f001 f8aa 	bl	80018bc <HAL_Delay>
					for(i=0; i<(length/2); i++)//取数组数据
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <play_music+0xd8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	0fda      	lsrs	r2, r3, #31
 8000774:	4413      	add	r3, r2
 8000776:	105b      	asrs	r3, r3, #1
 8000778:	461a      	mov	r2, r3
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4293      	cmp	r3, r2
 800077e:	dbde      	blt.n	800073e <play_music+0x2e>

//						HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
//						HAL_Delay(1);
//						HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
					}
				}break;
 8000780:	e027      	b.n	80007d2 <play_music+0xc2>
			case 1:
				{
					length = sizeof(music_1)/sizeof(music_1[0]);
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <play_music+0xd8>)
 8000784:	223e      	movs	r2, #62	; 0x3e
 8000786:	601a      	str	r2, [r3, #0]
					for(i=0; i<(length/2); i++)//取数组数据
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	e017      	b.n	80007be <play_music+0xae>
					{
						Sound(music_1[2*i]);//PWM波周期
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <play_music+0xe0>)
 8000794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ffa1 	bl	80006e0 <Sound>
						HAL_Delay(10*music_1[2*i+1]);//音长的时间都乘以5即一拍为500微秒，此值"5"可调整，只是播放的整个快慢而已，有点类似于视频快进和后退
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	3301      	adds	r3, #1
 80007a4:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <play_music+0xe0>)
 80007a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007aa:	4613      	mov	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 f882 	bl	80018bc <HAL_Delay>
					for(i=0; i<(length/2); i++)//取数组数据
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	3301      	adds	r3, #1
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <play_music+0xd8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	0fda      	lsrs	r2, r3, #31
 80007c4:	4413      	add	r3, r2
 80007c6:	105b      	asrs	r3, r3, #1
 80007c8:	461a      	mov	r2, r3
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	4293      	cmp	r3, r2
 80007ce:	dbde      	blt.n	800078e <play_music+0x7e>

//						HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
//						HAL_Delay(1);
//						HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
					}
				}break;
 80007d0:	bf00      	nop
			default :
				;
			}
   HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 80007d2:	2104      	movs	r1, #4
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <play_music+0xd4>)
 80007d6:	f003 f92f 	bl	8003a38 <HAL_TIM_PWM_Stop>
}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200005d0 	.word	0x200005d0
 80007e8:	20000428 	.word	0x20000428
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000098 	.word	0x20000098

080007f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_DMA_Init+0x48>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a0f      	ldr	r2, [pc, #60]	; (800083c <MX_DMA_Init+0x48>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <MX_DMA_Init+0x48>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2101      	movs	r1, #1
 8000816:	200e      	movs	r0, #14
 8000818:	f001 f94b 	bl	8001ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800081c:	200e      	movs	r0, #14
 800081e:	f001 f964 	bl	8001aea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2101      	movs	r1, #1
 8000826:	200f      	movs	r0, #15
 8000828:	f001 f943 	bl	8001ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800082c:	200f      	movs	r0, #15
 800082e:	f001 f95c 	bl	8001aea <HAL_NVIC_EnableIRQ>

}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000

08000840 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000854:	4b37      	ldr	r3, [pc, #220]	; (8000934 <MX_GPIO_Init+0xf4>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a36      	ldr	r2, [pc, #216]	; (8000934 <MX_GPIO_Init+0xf4>)
 800085a:	f043 0310 	orr.w	r3, r3, #16
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b34      	ldr	r3, [pc, #208]	; (8000934 <MX_GPIO_Init+0xf4>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0310 	and.w	r3, r3, #16
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086c:	4b31      	ldr	r3, [pc, #196]	; (8000934 <MX_GPIO_Init+0xf4>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a30      	ldr	r2, [pc, #192]	; (8000934 <MX_GPIO_Init+0xf4>)
 8000872:	f043 0320 	orr.w	r3, r3, #32
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <MX_GPIO_Init+0xf4>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0320 	and.w	r3, r3, #32
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <MX_GPIO_Init+0xf4>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a2a      	ldr	r2, [pc, #168]	; (8000934 <MX_GPIO_Init+0xf4>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b28      	ldr	r3, [pc, #160]	; (8000934 <MX_GPIO_Init+0xf4>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089c:	4b25      	ldr	r3, [pc, #148]	; (8000934 <MX_GPIO_Init+0xf4>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a24      	ldr	r2, [pc, #144]	; (8000934 <MX_GPIO_Init+0xf4>)
 80008a2:	f043 0308 	orr.w	r3, r3, #8
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b22      	ldr	r3, [pc, #136]	; (8000934 <MX_GPIO_Init+0xf4>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0308 	and.w	r3, r3, #8
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ba:	481f      	ldr	r0, [pc, #124]	; (8000938 <MX_GPIO_Init+0xf8>)
 80008bc:	f001 fd69 	bl	8002392 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2102      	movs	r1, #2
 80008c4:	481d      	ldr	r0, [pc, #116]	; (800093c <MX_GPIO_Init+0xfc>)
 80008c6:	f001 fd64 	bl	8002392 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2150      	movs	r1, #80	; 0x50
 80008ce:	481c      	ldr	r0, [pc, #112]	; (8000940 <MX_GPIO_Init+0x100>)
 80008d0:	f001 fd5f 	bl	8002392 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4619      	mov	r1, r3
 80008ec:	4812      	ldr	r0, [pc, #72]	; (8000938 <MX_GPIO_Init+0xf8>)
 80008ee:	f001 fbb5 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008f2:	2302      	movs	r3, #2
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2302      	movs	r3, #2
 8000900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4619      	mov	r1, r3
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_GPIO_Init+0xfc>)
 800090a:	f001 fba7 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800090e:	2350      	movs	r3, #80	; 0x50
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000912:	2311      	movs	r3, #17
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	4806      	ldr	r0, [pc, #24]	; (8000940 <MX_GPIO_Init+0x100>)
 8000926:	f001 fb99 	bl	800205c <HAL_GPIO_Init>

}
 800092a:	bf00      	nop
 800092c:	3720      	adds	r7, #32
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000
 8000938:	40011000 	.word	0x40011000
 800093c:	40010800 	.word	0x40010800
 8000940:	40010c00 	.word	0x40010c00

08000944 <iic_start>:
  * @retval None
  * @note   当SCL处于高电平状态时，SDA出现一个下降沿
            即产生IIC启动信号
  */
void iic_start(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
    IIC1_SCL(GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2110      	movs	r1, #16
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <iic_start+0x3c>)
 800094e:	f001 fd20 	bl	8002392 <HAL_GPIO_WritePin>
    /** SDA产生一个下降沿 */
    IIC1_SDA(GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	2140      	movs	r1, #64	; 0x40
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <iic_start+0x3c>)
 8000958:	f001 fd1b 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 800095c:	f000 f946 	bl	8000bec <iic_delay>

    IIC1_SDA(GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2140      	movs	r1, #64	; 0x40
 8000964:	4806      	ldr	r0, [pc, #24]	; (8000980 <iic_start+0x3c>)
 8000966:	f001 fd14 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 800096a:	f000 f93f 	bl	8000bec <iic_delay>
    IIC1_SCL(GPIO_PIN_RESET);   /**< 拉低准备发送数据 */
 800096e:	2200      	movs	r2, #0
 8000970:	2110      	movs	r1, #16
 8000972:	4803      	ldr	r0, [pc, #12]	; (8000980 <iic_start+0x3c>)
 8000974:	f001 fd0d 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 8000978:	f000 f938 	bl	8000bec <iic_delay>
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40010c00 	.word	0x40010c00

08000984 <iic_stop>:
  * @retval None
  * @note   当SCL处于高电平状态时，SDA出现一个上升沿
            即产生IIC停止信号
  */
void iic_stop(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
    IIC1_SCL(GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2110      	movs	r1, #16
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <iic_stop+0x40>)
 800098e:	f001 fd00 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 8000992:	f000 f92b 	bl	8000bec <iic_delay>
    /** SDA产生一个上升沿 */
    IIC1_SDA(GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2140      	movs	r1, #64	; 0x40
 800099a:	480a      	ldr	r0, [pc, #40]	; (80009c4 <iic_stop+0x40>)
 800099c:	f001 fcf9 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 80009a0:	f000 f924 	bl	8000bec <iic_delay>

    IIC1_SCL(GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2110      	movs	r1, #16
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <iic_stop+0x40>)
 80009aa:	f001 fcf2 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 80009ae:	f000 f91d 	bl	8000bec <iic_delay>
    IIC1_SDA(GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	4803      	ldr	r0, [pc, #12]	; (80009c4 <iic_stop+0x40>)
 80009b8:	f001 fceb 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 80009bc:	f000 f916 	bl	8000bec <iic_delay>
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40010c00 	.word	0x40010c00

080009c8 <iic_sendbyte>:
  * @param  None
  * @retval None
  * @note
  */
void iic_sendbyte(uint8_t byte)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    /** 发送一个字节的高7位 */
    for (i = 0; i < 8; i++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	73fb      	strb	r3, [r7, #15]
 80009d6:	e02c      	b.n	8000a32 <iic_sendbyte+0x6a>
    {
        if (byte & 0x80)
 80009d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	da05      	bge.n	80009ec <iic_sendbyte+0x24>
        {
            IIC1_SDA(GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2140      	movs	r1, #64	; 0x40
 80009e4:	4817      	ldr	r0, [pc, #92]	; (8000a44 <iic_sendbyte+0x7c>)
 80009e6:	f001 fcd4 	bl	8002392 <HAL_GPIO_WritePin>
 80009ea:	e004      	b.n	80009f6 <iic_sendbyte+0x2e>
        }
        else
        {
            IIC1_SDA(GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2140      	movs	r1, #64	; 0x40
 80009f0:	4814      	ldr	r0, [pc, #80]	; (8000a44 <iic_sendbyte+0x7c>)
 80009f2:	f001 fcce 	bl	8002392 <HAL_GPIO_WritePin>
        }

        iic_delay();
 80009f6:	f000 f8f9 	bl	8000bec <iic_delay>
        IIC1_SCL(GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2110      	movs	r1, #16
 80009fe:	4811      	ldr	r0, [pc, #68]	; (8000a44 <iic_sendbyte+0x7c>)
 8000a00:	f001 fcc7 	bl	8002392 <HAL_GPIO_WritePin>
        iic_delay();
 8000a04:	f000 f8f2 	bl	8000bec <iic_delay>
        IIC1_SCL(GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <iic_sendbyte+0x7c>)
 8000a0e:	f001 fcc0 	bl	8002392 <HAL_GPIO_WritePin>

        if (i == 7)
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	2b07      	cmp	r3, #7
 8000a16:	d104      	bne.n	8000a22 <iic_sendbyte+0x5a>
        {
            IIC1_SDA(GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2140      	movs	r1, #64	; 0x40
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <iic_sendbyte+0x7c>)
 8000a1e:	f001 fcb8 	bl	8002392 <HAL_GPIO_WritePin>
        }

        byte <<= 1;
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	71fb      	strb	r3, [r7, #7]
        iic_delay();
 8000a28:	f000 f8e0 	bl	8000bec <iic_delay>
    for (i = 0; i < 8; i++)
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	73fb      	strb	r3, [r7, #15]
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	2b07      	cmp	r3, #7
 8000a36:	d9cf      	bls.n	80009d8 <iic_sendbyte+0x10>
    }
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40010c00 	.word	0x40010c00

08000a48 <iic_readbyte>:
  * @param  None
  * @retval None
  * @note
  */
uint8_t iic_readbyte(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t recv_value = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	71bb      	strb	r3, [r7, #6]

    IIC1_SDA(GPIO_PIN_SET);
 8000a52:	2201      	movs	r2, #1
 8000a54:	2140      	movs	r1, #64	; 0x40
 8000a56:	481a      	ldr	r0, [pc, #104]	; (8000ac0 <iic_readbyte+0x78>)
 8000a58:	f001 fc9b 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 8000a5c:	f000 f8c6 	bl	8000bec <iic_delay>

    for (i = 0; i < 8; i++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	71fb      	strb	r3, [r7, #7]
 8000a64:	e023      	b.n	8000aae <iic_readbyte+0x66>
    {
        IIC1_SCL(GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2110      	movs	r1, #16
 8000a6a:	4815      	ldr	r0, [pc, #84]	; (8000ac0 <iic_readbyte+0x78>)
 8000a6c:	f001 fc91 	bl	8002392 <HAL_GPIO_WritePin>
        iic_delay();
 8000a70:	f000 f8bc 	bl	8000bec <iic_delay>
        recv_value <<= 1;
 8000a74:	79bb      	ldrb	r3, [r7, #6]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	71bb      	strb	r3, [r7, #6]
        if (IIC1_SDA_IS_HIGH())
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	4810      	ldr	r0, [pc, #64]	; (8000ac0 <iic_readbyte+0x78>)
 8000a7e:	f001 fc71 	bl	8002364 <HAL_GPIO_ReadPin>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d004      	beq.n	8000a92 <iic_readbyte+0x4a>
        {
            recv_value |= 0x01;
 8000a88:	79bb      	ldrb	r3, [r7, #6]
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	71bb      	strb	r3, [r7, #6]
 8000a90:	e003      	b.n	8000a9a <iic_readbyte+0x52>
        }
        else
        {
            recv_value &= ~0x01;
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	f023 0301 	bic.w	r3, r3, #1
 8000a98:	71bb      	strb	r3, [r7, #6]
        }

        iic_delay();
 8000a9a:	f000 f8a7 	bl	8000bec <iic_delay>
        IIC1_SCL(GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <iic_readbyte+0x78>)
 8000aa4:	f001 fc75 	bl	8002392 <HAL_GPIO_WritePin>
    for (i = 0; i < 8; i++)
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	71fb      	strb	r3, [r7, #7]
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2b07      	cmp	r3, #7
 8000ab2:	d9d8      	bls.n	8000a66 <iic_readbyte+0x1e>
    }

    return recv_value;
 8000ab4:	79bb      	ldrb	r3, [r7, #6]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40010c00 	.word	0x40010c00

08000ac4 <iic_wait_ack>:
  * @brief  IIC等待应答信号
  * @param  None
  * @retval ack_status： 应答状态，0表示应答，1表示设备无响应
  */
uint8_t iic_wait_ack(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
    uint8_t ack_status = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	71fb      	strb	r3, [r7, #7]

    /** 在等待应答信号之前，要释放总线，即将SDA置位 */
    IIC1_SDA(GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2140      	movs	r1, #64	; 0x40
 8000ad2:	4813      	ldr	r0, [pc, #76]	; (8000b20 <iic_wait_ack+0x5c>)
 8000ad4:	f001 fc5d 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 8000ad8:	f000 f888 	bl	8000bec <iic_delay>
    IIC1_SCL(GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	2110      	movs	r1, #16
 8000ae0:	480f      	ldr	r0, [pc, #60]	; (8000b20 <iic_wait_ack+0x5c>)
 8000ae2:	f001 fc56 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 8000ae6:	f000 f881 	bl	8000bec <iic_delay>

    if (IIC1_SDA_IS_HIGH())
 8000aea:	2140      	movs	r1, #64	; 0x40
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <iic_wait_ack+0x5c>)
 8000aee:	f001 fc39 	bl	8002364 <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d004      	beq.n	8000b02 <iic_wait_ack+0x3e>
    {
        ack_status = 1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	71fb      	strb	r3, [r7, #7]
        iic_stop();
 8000afc:	f7ff ff42 	bl	8000984 <iic_stop>
 8000b00:	e001      	b.n	8000b06 <iic_wait_ack+0x42>
    }
    else
    {
        ack_status = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	71fb      	strb	r3, [r7, #7]
    }

    IIC1_SCL(GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2110      	movs	r1, #16
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <iic_wait_ack+0x5c>)
 8000b0c:	f001 fc41 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 8000b10:	f000 f86c 	bl	8000bec <iic_delay>

    return ack_status;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40010c00 	.word	0x40010c00

08000b24 <iic_ack>:
  * @brief  主机（主控制器）产生应答信号
  * @param  None
  * @retval None
  */
void iic_ack(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    IIC1_SDA(GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2140      	movs	r1, #64	; 0x40
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <iic_ack+0x3c>)
 8000b2e:	f001 fc30 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 8000b32:	f000 f85b 	bl	8000bec <iic_delay>

    IIC1_SCL(GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2110      	movs	r1, #16
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <iic_ack+0x3c>)
 8000b3c:	f001 fc29 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 8000b40:	f000 f854 	bl	8000bec <iic_delay>
    IIC1_SCL(GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2110      	movs	r1, #16
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <iic_ack+0x3c>)
 8000b4a:	f001 fc22 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 8000b4e:	f000 f84d 	bl	8000bec <iic_delay>

    IIC1_SDA(GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	4802      	ldr	r0, [pc, #8]	; (8000b60 <iic_ack+0x3c>)
 8000b58:	f001 fc1b 	bl	8002392 <HAL_GPIO_WritePin>
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40010c00 	.word	0x40010c00

08000b64 <iic_nack>:
  * @brief  主机（主控制器）产生不应答信号
  * @param  None
  * @retval None
  */
void iic_nack(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    IIC1_SDA(GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2140      	movs	r1, #64	; 0x40
 8000b6c:	480a      	ldr	r0, [pc, #40]	; (8000b98 <iic_nack+0x34>)
 8000b6e:	f001 fc10 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 8000b72:	f000 f83b 	bl	8000bec <iic_delay>

    IIC1_SCL(GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2110      	movs	r1, #16
 8000b7a:	4807      	ldr	r0, [pc, #28]	; (8000b98 <iic_nack+0x34>)
 8000b7c:	f001 fc09 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 8000b80:	f000 f834 	bl	8000bec <iic_delay>
    IIC1_SCL(GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2110      	movs	r1, #16
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <iic_nack+0x34>)
 8000b8a:	f001 fc02 	bl	8002392 <HAL_GPIO_WritePin>
    iic_delay();
 8000b8e:	f000 f82d 	bl	8000bec <iic_delay>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40010c00 	.word	0x40010c00

08000b9c <iic_check_device_status>:
  * @note   主机发送设备地址等待从机应答，若有从机正确的应答信号
            则表明IIC总线上挂接了设备，否则表示IIC总线上未检测到
            设备
  */
uint8_t iic_check_device_status(uint8_t device_addr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
    uint8_t ack_status;

    if (IIC1_SCL_IS_HIGH() && IIC1_SDA_IS_HIGH())
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	480f      	ldr	r0, [pc, #60]	; (8000be8 <iic_check_device_status+0x4c>)
 8000baa:	f001 fbdb 	bl	8002364 <HAL_GPIO_ReadPin>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d014      	beq.n	8000bde <iic_check_device_status+0x42>
 8000bb4:	2140      	movs	r1, #64	; 0x40
 8000bb6:	480c      	ldr	r0, [pc, #48]	; (8000be8 <iic_check_device_status+0x4c>)
 8000bb8:	f001 fbd4 	bl	8002364 <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00d      	beq.n	8000bde <iic_check_device_status+0x42>
    {
        iic_start();
 8000bc2:	f7ff febf 	bl	8000944 <iic_start>

        iic_sendbyte(device_addr | IIC_WRITE);
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fefd 	bl	80009c8 <iic_sendbyte>
        ack_status = iic_wait_ack();
 8000bce:	f7ff ff79 	bl	8000ac4 <iic_wait_ack>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	73fb      	strb	r3, [r7, #15]

        iic_stop();
 8000bd6:	f7ff fed5 	bl	8000984 <iic_stop>

        return ack_status;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	e000      	b.n	8000be0 <iic_check_device_status+0x44>
    }

    return 1;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40010c00 	.word	0x40010c00

08000bec <iic_delay>:
  * @brief  用于模拟IIC时的简单延时
  * @param  None
  * @retval None
  */
static void iic_delay(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	71fb      	strb	r3, [r7, #7]
    uint8_t delay = 5;
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	71bb      	strb	r3, [r7, #6]

    while (delay--)
 8000bfa:	e007      	b.n	8000c0c <iic_delay+0x20>
    {
        i = 10;
 8000bfc:	230a      	movs	r3, #10
 8000bfe:	71fb      	strb	r3, [r7, #7]
        while (i--);
 8000c00:	bf00      	nop
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	1e5a      	subs	r2, r3, #1
 8000c06:	71fa      	strb	r2, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1fa      	bne.n	8000c02 <iic_delay+0x16>
    while (delay--)
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	1e5a      	subs	r2, r3, #1
 8000c10:	71ba      	strb	r2, [r7, #6]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f2      	bne.n	8000bfc <iic_delay+0x10>
    }
}
 8000c16:	bf00      	nop
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
	...

08000c24 <HAL_UART_TxCpltCallback>:
extern DMA_HandleTypeDef hdma_usart1_rx;
uint8_t Str1[BUFFERSIZE]={48,53};
uint16_t pulse = 500;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)//判断是否是串�???????????????????????????1中断
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <HAL_UART_TxCpltCallback+0x20>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d103      	bne.n	8000c3c <HAL_UART_TxCpltCallback+0x18>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c34:	2102      	movs	r1, #2
 8000c36:	4804      	ldr	r0, [pc, #16]	; (8000c48 <HAL_UART_TxCpltCallback+0x24>)
 8000c38:	f001 fbc3 	bl	80023c2 <HAL_GPIO_TogglePin>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000624 	.word	0x20000624
 8000c48:	40010800 	.word	0x40010800

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c50:	f000 fdd2 	bl	80017f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c54:	f000 f83a 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c58:	f7ff fdf2 	bl	8000840 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c5c:	f7ff fdca 	bl	80007f4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000c60:	f000 fcce 	bl	8001600 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000c64:	f000 fae6 	bl	8001234 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000c68:	f000 f90e 	bl	8000e88 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000c6c:	f000 fb2e 	bl	80012cc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c70:	4811      	ldr	r0, [pc, #68]	; (8000cb8 <main+0x6c>)
 8000c72:	f002 fd95 	bl	80037a0 <HAL_TIM_Base_Start_IT>

//  HAL_UART_Receive_IT(&huart1, (uint8_t*)recv_buf, 13);//发出提示信息
//  HAL_UART_Transmit_IT(&huart1, (uint8_t*)hello, sizeof(hello));

//	注意：上方的MX_DMA_Init();和MX_USART1_UART_Init();这两个函数在自动生成代码要要手动调换顺序
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);//使能串口1 IDLE中断
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <main+0x70>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	68da      	ldr	r2, [r3, #12]
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <main+0x70>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f042 0210 	orr.w	r2, r2, #16
 8000c84:	60da      	str	r2, [r3, #12]
	/*第二个参数目前为数组 如果为变量需要加取地*/
	HAL_UART_Receive_DMA(&huart1,ReceiveBuff,BUFFERSIZE);//使能接收
 8000c86:	22ff      	movs	r2, #255	; 0xff
 8000c88:	490d      	ldr	r1, [pc, #52]	; (8000cc0 <main+0x74>)
 8000c8a:	480c      	ldr	r0, [pc, #48]	; (8000cbc <main+0x70>)
 8000c8c:	f003 fe46 	bl	800491c <HAL_UART_Receive_DMA>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000c90:	2104      	movs	r1, #4
 8000c92:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <main+0x78>)
 8000c94:	f002 fe2e 	bl	80038f4 <HAL_TIM_PWM_Start>
//	  HAL_Delay_us_init(72);
//	  HAL_RCC_GetHCLKFreq()/1000000;		// 1us中断一次，即HAL_Delay函数延时基准为1us
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);  // 配置并启动系统滴答定时器
 8000c98:	f001 ff76 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <main+0x7c>)
 8000ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca4:	099b      	lsrs	r3, r3, #6
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 ff2d 	bl	8001b06 <HAL_SYSTICK_Config>
    /* USER CODE BEGIN 3 */
//	    HAL_Delay(1000);
//	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);

//		HAL_UART_Transmit_DMA(&huart1,Str1,4);
		main10ms();
 8000cac:	f000 f858 	bl	8000d60 <main10ms>
		main1ms();
 8000cb0:	f000 f882 	bl	8000db8 <main1ms>
		main10ms();
 8000cb4:	e7fa      	b.n	8000cac <main+0x60>
 8000cb6:	bf00      	nop
 8000cb8:	20000588 	.word	0x20000588
 8000cbc:	20000624 	.word	0x20000624
 8000cc0:	2000042c 	.word	0x2000042c
 8000cc4:	200005d0 	.word	0x200005d0
 8000cc8:	10624dd3 	.word	0x10624dd3

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b090      	sub	sp, #64	; 0x40
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 0318 	add.w	r3, r7, #24
 8000cd6:	2228      	movs	r2, #40	; 0x28
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f004 fc36 	bl	800554c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d00:	2302      	movs	r3, #2
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d0a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d10:	f107 0318 	add.w	r3, r7, #24
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 fb6d 	bl	80023f4 <HAL_RCC_OscConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d20:	f000 f819 	bl	8000d56 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d24:	230f      	movs	r3, #15
 8000d26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fdda 	bl	80028f8 <HAL_RCC_ClockConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d4a:	f000 f804 	bl	8000d56 <Error_Handler>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3740      	adds	r7, #64	; 0x40
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5a:	b672      	cpsid	i
}
 8000d5c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <Error_Handler+0x8>

08000d60 <main10ms>:
#include "w25q16.h"
#include "buzzer.h"


void main10ms()
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	if(flag_10ms == 1)
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <main10ms+0x50>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d11f      	bne.n	8000dac <main10ms+0x4c>
	{
//		printf("dfsdgf");
		flag_10ms = 0;
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <main10ms+0x50>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
		if(rx_flag == 0)
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <main10ms+0x54>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d108      	bne.n	8000d8c <main10ms+0x2c>
		{
			AT24C02_iic_test();
 8000d7a:	f7ff f9f1 	bl	8000160 <AT24C02_iic_test>
			rx_flag = 100;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <main10ms+0x54>)
 8000d80:	2264      	movs	r2, #100	; 0x64
 8000d82:	701a      	strb	r2, [r3, #0]
//			buzzer_breathe();
		    play_music(1);
 8000d84:	2001      	movs	r0, #1
 8000d86:	f7ff fcc3 	bl	8000710 <play_music>


		}
//        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	}
}
 8000d8a:	e00f      	b.n	8000dac <main10ms+0x4c>
		else if(rx_flag == 1)
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <main10ms+0x54>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d10b      	bne.n	8000dac <main10ms+0x4c>
			ReadID();
 8000d94:	f7ff fb72 	bl	800047c <ReadID>
			WriteData();
 8000d98:	f7ff fbde 	bl	8000558 <WriteData>
			ReadData();
 8000d9c:	f7ff fc56 	bl	800064c <ReadData>
			rx_flag = 100;
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <main10ms+0x54>)
 8000da2:	2264      	movs	r2, #100	; 0x64
 8000da4:	701a      	strb	r2, [r3, #0]
		    play_music(0);
 8000da6:	2000      	movs	r0, #0
 8000da8:	f7ff fcb2 	bl	8000710 <play_music>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000620 	.word	0x20000620
 8000db4:	2000028f 	.word	0x2000028f

08000db8 <main1ms>:
#include "timepiece.h"
#include "stdio.h"
#include "rx_analysis.h"

void main1ms()
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	if(flag_1ms == 1)
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <main1ms+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d106      	bne.n	8000dd2 <main1ms+0x1a>
	{
		flag_1ms = 0;
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <main1ms+0x20>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000dca:	2102      	movs	r1, #2
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <main1ms+0x24>)
 8000dce:	f001 faf8 	bl	80023c2 <HAL_GPIO_TogglePin>
	}
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000061e 	.word	0x2000061e
 8000ddc:	40010800 	.word	0x40010800

08000de0 <rx_analysis>:
char str0[]="trr";
char str1[]="pxr";


void rx_analysis(uint8_t len, uint8_t rxbuff[] )
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=len;i<BUFFERSIZE;i++)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	e007      	b.n	8000e02 <rx_analysis+0x22>
	{
		rxbuff[i]=0;
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=len;i<BUFFERSIZE;i++)
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	73fb      	strb	r3, [r7, #15]
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	2bff      	cmp	r3, #255	; 0xff
 8000e06:	d1f4      	bne.n	8000df2 <rx_analysis+0x12>
	}
	if((strcmp((char *)rxbuff,str0)==0)&&(sizeof(str0) == (len+1)))
 8000e08:	4918      	ldr	r1, [pc, #96]	; (8000e6c <rx_analysis+0x8c>)
 8000e0a:	6838      	ldr	r0, [r7, #0]
 8000e0c:	f7ff f99e 	bl	800014c <strcmp>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d106      	bne.n	8000e24 <rx_analysis+0x44>
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d103      	bne.n	8000e24 <rx_analysis+0x44>
	{
		rx_flag=0;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <rx_analysis+0x90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
 8000e22:	e010      	b.n	8000e46 <rx_analysis+0x66>
	}
	else if((strcmp((char *)rxbuff,str1)==0)&&(sizeof(str1) == (len+1)))
 8000e24:	4913      	ldr	r1, [pc, #76]	; (8000e74 <rx_analysis+0x94>)
 8000e26:	6838      	ldr	r0, [r7, #0]
 8000e28:	f7ff f990 	bl	800014c <strcmp>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d106      	bne.n	8000e40 <rx_analysis+0x60>
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d103      	bne.n	8000e40 <rx_analysis+0x60>
	{
		rx_flag=1;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <rx_analysis+0x90>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	e002      	b.n	8000e46 <rx_analysis+0x66>
	}
	else
	{
		rx_flag = 100;
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <rx_analysis+0x90>)
 8000e42:	2264      	movs	r2, #100	; 0x64
 8000e44:	701a      	strb	r2, [r3, #0]
	}

	printf("rx_flag = %d", rx_flag);
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <rx_analysis+0x90>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480a      	ldr	r0, [pc, #40]	; (8000e78 <rx_analysis+0x98>)
 8000e4e:	f004 fb85 	bl	800555c <iprintf>
	printf("\r\n");
 8000e52:	480a      	ldr	r0, [pc, #40]	; (8000e7c <rx_analysis+0x9c>)
 8000e54:	f004 fc08 	bl	8005668 <puts>
	HAL_UART_Transmit_DMA(&huart1,StrTemp,2);
 8000e58:	2202      	movs	r2, #2
 8000e5a:	4909      	ldr	r1, [pc, #36]	; (8000e80 <rx_analysis+0xa0>)
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <rx_analysis+0xa4>)
 8000e5e:	f003 fcf1 	bl	8004844 <HAL_UART_Transmit_DMA>


}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000290 	.word	0x20000290
 8000e70:	2000028f 	.word	0x2000028f
 8000e74:	20000294 	.word	0x20000294
 8000e78:	08006714 	.word	0x08006714
 8000e7c:	08006724 	.word	0x08006724
 8000e80:	20000190 	.word	0x20000190
 8000e84:	20000624 	.word	0x20000624

08000e88 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_SPI1_Init+0x64>)
 8000e8e:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <MX_SPI1_Init+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_SPI1_Init+0x64>)
 8000e94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_SPI1_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_SPI1_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_SPI1_Init+0x64>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_SPI1_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_SPI1_Init+0x64>)
 8000eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_SPI1_Init+0x64>)
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <MX_SPI1_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_SPI1_Init+0x64>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <MX_SPI1_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_SPI1_Init+0x64>)
 8000ed4:	220a      	movs	r2, #10
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_SPI1_Init+0x64>)
 8000eda:	f001 fea5 	bl	8002c28 <HAL_SPI_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ee4:	f7ff ff37 	bl	8000d56 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000052c 	.word	0x2000052c
 8000ef0:	40013000 	.word	0x40013000

08000ef4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a1b      	ldr	r2, [pc, #108]	; (8000f7c <HAL_SPI_MspInit+0x88>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d12f      	bne.n	8000f74 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_SPI_MspInit+0x8c>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <HAL_SPI_MspInit+0x8c>)
 8000f1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_SPI_MspInit+0x8c>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_SPI_MspInit+0x8c>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <HAL_SPI_MspInit+0x8c>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_SPI_MspInit+0x8c>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f44:	23a0      	movs	r3, #160	; 0xa0
 8000f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	4619      	mov	r1, r3
 8000f56:	480b      	ldr	r0, [pc, #44]	; (8000f84 <HAL_SPI_MspInit+0x90>)
 8000f58:	f001 f880 	bl	800205c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f5c:	2340      	movs	r3, #64	; 0x40
 8000f5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <HAL_SPI_MspInit+0x90>)
 8000f70:	f001 f874 	bl	800205c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f74:	bf00      	nop
 8000f76:	3720      	adds	r7, #32
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40013000 	.word	0x40013000
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40010800 	.word	0x40010800

08000f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6193      	str	r3, [r2, #24]
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	61d3      	str	r3, [r2, #28]
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_MspInit+0x60>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_MspInit+0x60>)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010000 	.word	0x40010000

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <MemManage_Handler+0x4>

08000ffe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <UsageFault_Handler+0x4>

0800100a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr

08001016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001032:	f000 fc27 	bl	8001884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <DMA1_Channel4_IRQHandler+0x10>)
 8001042:	f000 fed7 	bl	8001df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200006ac 	.word	0x200006ac

08001050 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <DMA1_Channel5_IRQHandler+0x10>)
 8001056:	f000 fecd 	bl	8001df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000668 	.word	0x20000668

08001064 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <TIM2_IRQHandler+0x10>)
 800106a:	f002 fd49 	bl	8003b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000588 	.word	0x20000588

08001078 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <TIM3_IRQHandler+0x10>)
 800107e:	f002 fd3f 	bl	8003b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200005d0 	.word	0x200005d0

0800108c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001092:	481f      	ldr	r0, [pc, #124]	; (8001110 <USART1_IRQHandler+0x84>)
 8001094:	f003 fcce 	bl	8004a34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	uint32_t temp;
	if(USART1 == huart1.Instance)//判断是否为串�????1中断
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <USART1_IRQHandler+0x84>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <USART1_IRQHandler+0x88>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d131      	bne.n	8001106 <USART1_IRQHandler+0x7a>
	{
		if(RESET != __HAL_UART_GET_FLAG(&huart1,UART_FLAG_IDLE))//如果为串�????1空闲
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <USART1_IRQHandler+0x84>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0310 	and.w	r3, r3, #16
 80010ac:	2b10      	cmp	r3, #16
 80010ae:	d12a      	bne.n	8001106 <USART1_IRQHandler+0x7a>
		{
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);//清除中断标志
 80010b0:	2300      	movs	r3, #0
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <USART1_IRQHandler+0x84>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <USART1_IRQHandler+0x84>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
			HAL_UART_DMAStop(&huart1);//停止DMA接收
 80010c6:	4812      	ldr	r0, [pc, #72]	; (8001110 <USART1_IRQHandler+0x84>)
 80010c8:	f003 fc58 	bl	800497c <HAL_UART_DMAStop>
			temp  = __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);//获取DMA当前还有多少未填�????
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <USART1_IRQHandler+0x8c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	607b      	str	r3, [r7, #4]
			Rx_len =  BUFFERSIZE - temp; //计算串口接收到的数据个数
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <USART1_IRQHandler+0x90>)
 80010de:	701a      	strb	r2, [r3, #0]
//			HAL_UART_Transmit_DMA(&huart1,ReceiveBuff,Rx_len);//发�?�数�????
//			HAL_UART_Transmit_DMA(&huart1,ReceiveTemp,Rx_len);//发�?�数�????

			rx_analysis(Rx_len, ReceiveBuff);
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <USART1_IRQHandler+0x90>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	490e      	ldr	r1, [pc, #56]	; (8001120 <USART1_IRQHandler+0x94>)
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fe7a 	bl	8000de0 <rx_analysis>

			Rx_len=0;//接收数据长度清零
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <USART1_IRQHandler+0x90>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1,ReceiveBuff,BUFFERSIZE);//�????启下�????次接�????
 80010f2:	22ff      	movs	r2, #255	; 0xff
 80010f4:	490a      	ldr	r1, [pc, #40]	; (8001120 <USART1_IRQHandler+0x94>)
 80010f6:	4806      	ldr	r0, [pc, #24]	; (8001110 <USART1_IRQHandler+0x84>)
 80010f8:	f003 fc10 	bl	800491c <HAL_UART_Receive_DMA>
			HAL_UART_Receive_DMA(&huart1,ReceiveBuff,BUFFERSIZE);//�????启下�????次接�????
 80010fc:	22ff      	movs	r2, #255	; 0xff
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <USART1_IRQHandler+0x94>)
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <USART1_IRQHandler+0x84>)
 8001102:	f003 fc0b 	bl	800491c <HAL_UART_Receive_DMA>
		}

	}
  /* USER CODE END USART1_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000624 	.word	0x20000624
 8001114:	40013800 	.word	0x40013800
 8001118:	20000668 	.word	0x20000668
 800111c:	2000052b 	.word	0x2000052b
 8001120:	2000042c 	.word	0x2000042c

08001124 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	e00a      	b.n	800114c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001136:	f3af 8000 	nop.w
 800113a:	4601      	mov	r1, r0
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	60ba      	str	r2, [r7, #8]
 8001142:	b2ca      	uxtb	r2, r1
 8001144:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3301      	adds	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	429a      	cmp	r2, r3
 8001152:	dbf0      	blt.n	8001136 <_read+0x12>
	}

return len;
 8001154:	687b      	ldr	r3, [r7, #4]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	e009      	b.n	8001184 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	60ba      	str	r2, [r7, #8]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fa2f 	bl	80015dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	429a      	cmp	r2, r3
 800118a:	dbf1      	blt.n	8001170 <_write+0x12>
	}
	return len;
 800118c:	687b      	ldr	r3, [r7, #4]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a0:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <_sbrk+0x5c>)
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <_sbrk+0x60>)
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <_sbrk+0x64>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <_sbrk+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d207      	bcs.n	80011d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c8:	f004 f996 	bl	80054f8 <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	220c      	movs	r2, #12
 80011d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011d6:	e009      	b.n	80011ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <_sbrk+0x64>)
 80011e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20005000 	.word	0x20005000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	20000584 	.word	0x20000584
 8001200:	20000708 	.word	0x20000708

08001204 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 0 */
#include "timepiece.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* tim_baseHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
    if(tim_baseHandle->Instance == htim2.Instance)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d101      	bne.n	8001228 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
//        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
        timepiece();
 8001224:	f000 f94e 	bl	80014c4 <timepiece>
    }
//	if(tim_baseHandle->Instance == htim3.Instance)
//	{
//	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,pulse);
//	}
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000588 	.word	0x20000588

08001234 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	463b      	mov	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001256:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_TIM2_Init+0x94>)
 800125a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800125e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001268:	2209      	movs	r2, #9
 800126a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_TIM2_Init+0x94>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001278:	4813      	ldr	r0, [pc, #76]	; (80012c8 <MX_TIM2_Init+0x94>)
 800127a:	f002 fa41 	bl	8003700 <HAL_TIM_Base_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001284:	f7ff fd67 	bl	8000d56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	4619      	mov	r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001296:	f002 fdf9 	bl	8003e8c <HAL_TIM_ConfigClockSource>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012a0:	f7ff fd59 	bl	8000d56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_TIM2_Init+0x94>)
 80012b2:	f003 f977 	bl	80045a4 <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012bc:	f7ff fd4b 	bl	8000d56 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000588 	.word	0x20000588

080012cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	; 0x38
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	f107 0320 	add.w	r3, r7, #32
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	615a      	str	r2, [r3, #20]
 80012fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012fc:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <MX_TIM3_Init+0xe4>)
 80012fe:	4a2d      	ldr	r2, [pc, #180]	; (80013b4 <MX_TIM3_Init+0xe8>)
 8001300:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001302:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <MX_TIM3_Init+0xe4>)
 8001304:	2247      	movs	r2, #71	; 0x47
 8001306:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <MX_TIM3_Init+0xe4>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800130e:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <MX_TIM3_Init+0xe4>)
 8001310:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001314:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001316:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <MX_TIM3_Init+0xe4>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <MX_TIM3_Init+0xe4>)
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001322:	4823      	ldr	r0, [pc, #140]	; (80013b0 <MX_TIM3_Init+0xe4>)
 8001324:	f002 f9ec 	bl	8003700 <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800132e:	f7ff fd12 	bl	8000d56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133c:	4619      	mov	r1, r3
 800133e:	481c      	ldr	r0, [pc, #112]	; (80013b0 <MX_TIM3_Init+0xe4>)
 8001340:	f002 fda4 	bl	8003e8c <HAL_TIM_ConfigClockSource>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800134a:	f7ff fd04 	bl	8000d56 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800134e:	4818      	ldr	r0, [pc, #96]	; (80013b0 <MX_TIM3_Init+0xe4>)
 8001350:	f002 fa78 	bl	8003844 <HAL_TIM_PWM_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800135a:	f7ff fcfc 	bl	8000d56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	4619      	mov	r1, r3
 800136c:	4810      	ldr	r0, [pc, #64]	; (80013b0 <MX_TIM3_Init+0xe4>)
 800136e:	f003 f919 	bl	80045a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001378:	f7ff fced 	bl	8000d56 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137c:	2360      	movs	r3, #96	; 0x60
 800137e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001384:	2302      	movs	r3, #2
 8001386:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2204      	movs	r2, #4
 8001390:	4619      	mov	r1, r3
 8001392:	4807      	ldr	r0, [pc, #28]	; (80013b0 <MX_TIM3_Init+0xe4>)
 8001394:	f002 fcbc 	bl	8003d10 <HAL_TIM_PWM_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800139e:	f7ff fcda 	bl	8000d56 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013a2:	4803      	ldr	r0, [pc, #12]	; (80013b0 <MX_TIM3_Init+0xe4>)
 80013a4:	f000 f848 	bl	8001438 <HAL_TIM_MspPostInit>

}
 80013a8:	bf00      	nop
 80013aa:	3738      	adds	r7, #56	; 0x38
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200005d0 	.word	0x200005d0
 80013b4:	40000400 	.word	0x40000400

080013b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c8:	d114      	bne.n	80013f4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_TIM_Base_MspInit+0x78>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a18      	ldr	r2, [pc, #96]	; (8001430 <HAL_TIM_Base_MspInit+0x78>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <HAL_TIM_Base_MspInit+0x78>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	201c      	movs	r0, #28
 80013e8:	f000 fb63 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013ec:	201c      	movs	r0, #28
 80013ee:	f000 fb7c 	bl	8001aea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80013f2:	e018      	b.n	8001426 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_TIM_Base_MspInit+0x7c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d113      	bne.n	8001426 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_TIM_Base_MspInit+0x78>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <HAL_TIM_Base_MspInit+0x78>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_TIM_Base_MspInit+0x78>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	201d      	movs	r0, #29
 800141c:	f000 fb49 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001420:	201d      	movs	r0, #29
 8001422:	f000 fb62 	bl	8001aea <HAL_NVIC_EnableIRQ>
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	40000400 	.word	0x40000400

08001438 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a18      	ldr	r2, [pc, #96]	; (80014b4 <HAL_TIM_MspPostInit+0x7c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d129      	bne.n	80014ac <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <HAL_TIM_MspPostInit+0x80>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <HAL_TIM_MspPostInit+0x80>)
 800145e:	f043 0308 	orr.w	r3, r3, #8
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <HAL_TIM_MspPostInit+0x80>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001470:	2320      	movs	r3, #32
 8001472:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	480e      	ldr	r0, [pc, #56]	; (80014bc <HAL_TIM_MspPostInit+0x84>)
 8001484:	f000 fdea 	bl	800205c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <HAL_TIM_MspPostInit+0x88>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_TIM_MspPostInit+0x88>)
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40000400 	.word	0x40000400
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010c00 	.word	0x40010c00
 80014c0:	40010000 	.word	0x40010000

080014c4 <timepiece>:
 uint8_t flag_100ms = 0;
 uint8_t flag_sec = 0;


void timepiece()
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

	time_1ms++;
 80014c8:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <timepiece+0xe4>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <timepiece+0xe4>)
 80014d2:	701a      	strb	r2, [r3, #0]
	if(time_1ms%1 == 0)
	{
		flag_1ms = 1;
 80014d4:	4b35      	ldr	r3, [pc, #212]	; (80015ac <timepiece+0xe8>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
		time_1ms = 0;
 80014da:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <timepiece+0xe4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
	}

	time_2ms++;
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <timepiece+0xec>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <timepiece+0xec>)
 80014ea:	701a      	strb	r2, [r3, #0]
	if(time_2ms%2 == 0)
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <timepiece+0xec>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d105      	bne.n	8001506 <timepiece+0x42>
	{
		flag_2ms = 1;
 80014fa:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <timepiece+0xf0>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]
		time_2ms = 0;
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <timepiece+0xec>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
	}

	time_10ms++;
 8001506:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <timepiece+0xf4>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <timepiece+0xf4>)
 8001510:	701a      	strb	r2, [r3, #0]
	if(time_10ms%10 == 0)
 8001512:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <timepiece+0xf4>)
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	4b29      	ldr	r3, [pc, #164]	; (80015bc <timepiece+0xf8>)
 8001518:	fba3 1302 	umull	r1, r3, r3, r2
 800151c:	08d9      	lsrs	r1, r3, #3
 800151e:	460b      	mov	r3, r1
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d105      	bne.n	800153a <timepiece+0x76>
	{
		flag_10ms = 1;
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <timepiece+0xfc>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
		time_10ms = 0;
 8001534:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <timepiece+0xf4>)
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
	}

	time_100ms++;
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <timepiece+0x100>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <timepiece+0x100>)
 8001544:	701a      	strb	r2, [r3, #0]
	if(time_100ms%100 == 0)
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <timepiece+0x100>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <timepiece+0x104>)
 800154c:	fba2 1203 	umull	r1, r2, r2, r3
 8001550:	0952      	lsrs	r2, r2, #5
 8001552:	2164      	movs	r1, #100	; 0x64
 8001554:	fb01 f202 	mul.w	r2, r1, r2
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d105      	bne.n	800156c <timepiece+0xa8>
	{
		flag_100ms = 1;
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <timepiece+0x108>)
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]
		time_100ms = 0;
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <timepiece+0x100>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
	}

	time_sec++;
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <timepiece+0x10c>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	b29a      	uxth	r2, r3
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <timepiece+0x10c>)
 8001576:	801a      	strh	r2, [r3, #0]
	if(time_sec%1000 == 0)
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <timepiece+0x10c>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <timepiece+0x110>)
 800157e:	fba2 1203 	umull	r1, r2, r2, r3
 8001582:	0992      	lsrs	r2, r2, #6
 8001584:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001588:	fb01 f202 	mul.w	r2, r1, r2
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	b29b      	uxth	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d105      	bne.n	80015a0 <timepiece+0xdc>
	{

		flag_sec = 1;
 8001594:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <timepiece+0x114>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
		time_sec = 0;
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <timepiece+0x10c>)
 800159c:	2200      	movs	r2, #0
 800159e:	801a      	strh	r2, [r3, #0]
	}

}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	20000618 	.word	0x20000618
 80015ac:	2000061e 	.word	0x2000061e
 80015b0:	20000619 	.word	0x20000619
 80015b4:	2000061f 	.word	0x2000061f
 80015b8:	2000061a 	.word	0x2000061a
 80015bc:	cccccccd 	.word	0xcccccccd
 80015c0:	20000620 	.word	0x20000620
 80015c4:	2000061b 	.word	0x2000061b
 80015c8:	51eb851f 	.word	0x51eb851f
 80015cc:	20000621 	.word	0x20000621
 80015d0:	2000061c 	.word	0x2000061c
 80015d4:	10624dd3 	.word	0x10624dd3
 80015d8:	20000622 	.word	0x20000622

080015dc <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    //注意下面第一个参数是&husart1，因为cubemx配置了串�???1自动生成�???
    //注意下面第一个参数是&husart1，因为cubemx配置了串�???1自动生成�???
    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80015e4:	1d39      	adds	r1, r7, #4
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ea:	2201      	movs	r2, #1
 80015ec:	4803      	ldr	r0, [pc, #12]	; (80015fc <__io_putchar+0x20>)
 80015ee:	f003 f896 	bl	800471e <HAL_UART_Transmit>
    return ch;
 80015f2:	687b      	ldr	r3, [r7, #4]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000624 	.word	0x20000624

08001600 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <MX_USART1_UART_Init+0x50>)
 8001608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <MX_USART1_UART_Init+0x4c>)
 800160c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_USART1_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_USART1_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_USART1_UART_Init+0x4c>)
 8001638:	f003 f824 	bl	8004684 <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001642:	f7ff fb88 	bl	8000d56 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000624 	.word	0x20000624
 8001650:	40013800 	.word	0x40013800

08001654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a48      	ldr	r2, [pc, #288]	; (8001790 <HAL_UART_MspInit+0x13c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	f040 8088 	bne.w	8001786 <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001676:	4b47      	ldr	r3, [pc, #284]	; (8001794 <HAL_UART_MspInit+0x140>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	4a46      	ldr	r2, [pc, #280]	; (8001794 <HAL_UART_MspInit+0x140>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6193      	str	r3, [r2, #24]
 8001682:	4b44      	ldr	r3, [pc, #272]	; (8001794 <HAL_UART_MspInit+0x140>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b41      	ldr	r3, [pc, #260]	; (8001794 <HAL_UART_MspInit+0x140>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	4a40      	ldr	r2, [pc, #256]	; (8001794 <HAL_UART_MspInit+0x140>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6193      	str	r3, [r2, #24]
 800169a:	4b3e      	ldr	r3, [pc, #248]	; (8001794 <HAL_UART_MspInit+0x140>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	f107 0310 	add.w	r3, r7, #16
 80016b8:	4619      	mov	r1, r3
 80016ba:	4837      	ldr	r0, [pc, #220]	; (8001798 <HAL_UART_MspInit+0x144>)
 80016bc:	f000 fcce 	bl	800205c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	4619      	mov	r1, r3
 80016d4:	4830      	ldr	r0, [pc, #192]	; (8001798 <HAL_UART_MspInit+0x144>)
 80016d6:	f000 fcc1 	bl	800205c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80016da:	4b30      	ldr	r3, [pc, #192]	; (800179c <HAL_UART_MspInit+0x148>)
 80016dc:	4a30      	ldr	r2, [pc, #192]	; (80017a0 <HAL_UART_MspInit+0x14c>)
 80016de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e0:	4b2e      	ldr	r3, [pc, #184]	; (800179c <HAL_UART_MspInit+0x148>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e6:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_UART_MspInit+0x148>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_UART_MspInit+0x148>)
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f2:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_UART_MspInit+0x148>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016f8:	4b28      	ldr	r3, [pc, #160]	; (800179c <HAL_UART_MspInit+0x148>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80016fe:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_UART_MspInit+0x148>)
 8001700:	2220      	movs	r2, #32
 8001702:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <HAL_UART_MspInit+0x148>)
 8001706:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800170a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800170c:	4823      	ldr	r0, [pc, #140]	; (800179c <HAL_UART_MspInit+0x148>)
 800170e:	f000 fa07 	bl	8001b20 <HAL_DMA_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8001718:	f7ff fb1d 	bl	8000d56 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a1f      	ldr	r2, [pc, #124]	; (800179c <HAL_UART_MspInit+0x148>)
 8001720:	639a      	str	r2, [r3, #56]	; 0x38
 8001722:	4a1e      	ldr	r2, [pc, #120]	; (800179c <HAL_UART_MspInit+0x148>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <HAL_UART_MspInit+0x150>)
 800172a:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <HAL_UART_MspInit+0x154>)
 800172c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_UART_MspInit+0x150>)
 8001730:	2210      	movs	r2, #16
 8001732:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_UART_MspInit+0x150>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_UART_MspInit+0x150>)
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_UART_MspInit+0x150>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_UART_MspInit+0x150>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_UART_MspInit+0x150>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <HAL_UART_MspInit+0x150>)
 8001754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001758:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800175a:	4812      	ldr	r0, [pc, #72]	; (80017a4 <HAL_UART_MspInit+0x150>)
 800175c:	f000 f9e0 	bl	8001b20 <HAL_DMA_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8001766:	f7ff faf6 	bl	8000d56 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <HAL_UART_MspInit+0x150>)
 800176e:	635a      	str	r2, [r3, #52]	; 0x34
 8001770:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <HAL_UART_MspInit+0x150>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2101      	movs	r1, #1
 800177a:	2025      	movs	r0, #37	; 0x25
 800177c:	f000 f999 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001780:	2025      	movs	r0, #37	; 0x25
 8001782:	f000 f9b2 	bl	8001aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001786:	bf00      	nop
 8001788:	3720      	adds	r7, #32
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40013800 	.word	0x40013800
 8001794:	40021000 	.word	0x40021000
 8001798:	40010800 	.word	0x40010800
 800179c:	20000668 	.word	0x20000668
 80017a0:	40020058 	.word	0x40020058
 80017a4:	200006ac 	.word	0x200006ac
 80017a8:	40020044 	.word	0x40020044

080017ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ae:	490d      	ldr	r1, [pc, #52]	; (80017e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c4:	4c0a      	ldr	r4, [pc, #40]	; (80017f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017d2:	f7ff fd17 	bl	8001204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f003 fe95 	bl	8005504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017da:	f7ff fa37 	bl	8000c4c <main>
  bx lr
 80017de:	4770      	bx	lr
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 80017e8:	080067f0 	.word	0x080067f0
  ldr r2, =_sbss
 80017ec:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 80017f0:	20000704 	.word	0x20000704

080017f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC1_2_IRQHandler>
	...

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_Init+0x28>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_Init+0x28>)
 8001802:	f043 0310 	orr.w	r3, r3, #16
 8001806:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f000 f947 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180e:	200f      	movs	r0, #15
 8001810:	f000 f808 	bl	8001824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001814:	f7ff fbb8 	bl	8000f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40022000 	.word	0x40022000

08001824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_InitTick+0x54>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_InitTick+0x58>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	fbb3 f3f1 	udiv	r3, r3, r1
 800183e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f95f 	bl	8001b06 <HAL_SYSTICK_Config>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e00e      	b.n	8001870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d80a      	bhi.n	800186e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001860:	f000 f927 	bl	8001ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001864:	4a06      	ldr	r2, [pc, #24]	; (8001880 <HAL_InitTick+0x5c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000298 	.word	0x20000298
 800187c:	200002a0 	.word	0x200002a0
 8001880:	2000029c 	.word	0x2000029c

08001884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_IncTick+0x1c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_IncTick+0x20>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <HAL_IncTick+0x20>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	200002a0 	.word	0x200002a0
 80018a4:	200006f0 	.word	0x200006f0

080018a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return uwTick;
 80018ac:	4b02      	ldr	r3, [pc, #8]	; (80018b8 <HAL_GetTick+0x10>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	200006f0 	.word	0x200006f0

080018bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff fff0 	bl	80018a8 <HAL_GetTick>
 80018c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018d4:	d005      	beq.n	80018e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_Delay+0x44>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018e2:	bf00      	nop
 80018e4:	f7ff ffe0 	bl	80018a8 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d8f7      	bhi.n	80018e4 <HAL_Delay+0x28>
  {
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200002a0 	.word	0x200002a0

08001904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800192c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001936:	4a04      	ldr	r2, [pc, #16]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	60d3      	str	r3, [r2, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <__NVIC_GetPriorityGrouping+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0307 	and.w	r3, r3, #7
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0b      	blt.n	8001992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4906      	ldr	r1, [pc, #24]	; (800199c <__NVIC_EnableIRQ+0x34>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a7c:	f7ff ff90 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff2d 	bl	8001904 <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff42 	bl	800194c <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff90 	bl	80019f4 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5f 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff35 	bl	8001968 <__NVIC_EnableIRQ>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffa2 	bl	8001a58 <SysTick_Config>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e043      	b.n	8001bbe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <HAL_DMA_Init+0xa8>)
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a22      	ldr	r2, [pc, #136]	; (8001bcc <HAL_DMA_Init+0xac>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	009a      	lsls	r2, r3, #2
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a1f      	ldr	r2, [pc, #124]	; (8001bd0 <HAL_DMA_Init+0xb0>)
 8001b52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	bffdfff8 	.word	0xbffdfff8
 8001bcc:	cccccccd 	.word	0xcccccccd
 8001bd0:	40020000 	.word	0x40020000

08001bd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_DMA_Start_IT+0x20>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e04a      	b.n	8001c8a <HAL_DMA_Start_IT+0xb6>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d13a      	bne.n	8001c7c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f9e8 	bl	8002000 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 020e 	orr.w	r2, r2, #14
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e00f      	b.n	8001c6a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0204 	bic.w	r2, r2, #4
 8001c58:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 020a 	orr.w	r2, r2, #10
 8001c68:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0201 	orr.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e005      	b.n	8001c88 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c84:	2302      	movs	r3, #2
 8001c86:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b085      	sub	sp, #20
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d008      	beq.n	8001cba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2204      	movs	r2, #4
 8001cac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e020      	b.n	8001cfc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 020e 	bic.w	r2, r2, #14
 8001cc8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d005      	beq.n	8001d2a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2204      	movs	r2, #4
 8001d22:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e051      	b.n	8001dce <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 020e 	bic.w	r2, r2, #14
 8001d38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a22      	ldr	r2, [pc, #136]	; (8001dd8 <HAL_DMA_Abort_IT+0xd0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d029      	beq.n	8001da8 <HAL_DMA_Abort_IT+0xa0>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a20      	ldr	r2, [pc, #128]	; (8001ddc <HAL_DMA_Abort_IT+0xd4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d022      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x9c>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <HAL_DMA_Abort_IT+0xd8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d01a      	beq.n	8001d9e <HAL_DMA_Abort_IT+0x96>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <HAL_DMA_Abort_IT+0xdc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d012      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x90>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <HAL_DMA_Abort_IT+0xe0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00a      	beq.n	8001d92 <HAL_DMA_Abort_IT+0x8a>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1a      	ldr	r2, [pc, #104]	; (8001dec <HAL_DMA_Abort_IT+0xe4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d102      	bne.n	8001d8c <HAL_DMA_Abort_IT+0x84>
 8001d86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d8a:	e00e      	b.n	8001daa <HAL_DMA_Abort_IT+0xa2>
 8001d8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d90:	e00b      	b.n	8001daa <HAL_DMA_Abort_IT+0xa2>
 8001d92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d96:	e008      	b.n	8001daa <HAL_DMA_Abort_IT+0xa2>
 8001d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d9c:	e005      	b.n	8001daa <HAL_DMA_Abort_IT+0xa2>
 8001d9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001da2:	e002      	b.n	8001daa <HAL_DMA_Abort_IT+0xa2>
 8001da4:	2310      	movs	r3, #16
 8001da6:	e000      	b.n	8001daa <HAL_DMA_Abort_IT+0xa2>
 8001da8:	2301      	movs	r3, #1
 8001daa:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <HAL_DMA_Abort_IT+0xe8>)
 8001dac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	4798      	blx	r3
    } 
  }
  return status;
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40020008 	.word	0x40020008
 8001ddc:	4002001c 	.word	0x4002001c
 8001de0:	40020030 	.word	0x40020030
 8001de4:	40020044 	.word	0x40020044
 8001de8:	40020058 	.word	0x40020058
 8001dec:	4002006c 	.word	0x4002006c
 8001df0:	40020000 	.word	0x40020000

08001df4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	2204      	movs	r2, #4
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d04f      	beq.n	8001ebc <HAL_DMA_IRQHandler+0xc8>
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d04a      	beq.n	8001ebc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d107      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0204 	bic.w	r2, r2, #4
 8001e42:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a66      	ldr	r2, [pc, #408]	; (8001fe4 <HAL_DMA_IRQHandler+0x1f0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d029      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0xae>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a65      	ldr	r2, [pc, #404]	; (8001fe8 <HAL_DMA_IRQHandler+0x1f4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d022      	beq.n	8001e9e <HAL_DMA_IRQHandler+0xaa>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a63      	ldr	r2, [pc, #396]	; (8001fec <HAL_DMA_IRQHandler+0x1f8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01a      	beq.n	8001e98 <HAL_DMA_IRQHandler+0xa4>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a62      	ldr	r2, [pc, #392]	; (8001ff0 <HAL_DMA_IRQHandler+0x1fc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d012      	beq.n	8001e92 <HAL_DMA_IRQHandler+0x9e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a60      	ldr	r2, [pc, #384]	; (8001ff4 <HAL_DMA_IRQHandler+0x200>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00a      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x98>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a5f      	ldr	r2, [pc, #380]	; (8001ff8 <HAL_DMA_IRQHandler+0x204>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d102      	bne.n	8001e86 <HAL_DMA_IRQHandler+0x92>
 8001e80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e84:	e00e      	b.n	8001ea4 <HAL_DMA_IRQHandler+0xb0>
 8001e86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e8a:	e00b      	b.n	8001ea4 <HAL_DMA_IRQHandler+0xb0>
 8001e8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e90:	e008      	b.n	8001ea4 <HAL_DMA_IRQHandler+0xb0>
 8001e92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e96:	e005      	b.n	8001ea4 <HAL_DMA_IRQHandler+0xb0>
 8001e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e9c:	e002      	b.n	8001ea4 <HAL_DMA_IRQHandler+0xb0>
 8001e9e:	2340      	movs	r3, #64	; 0x40
 8001ea0:	e000      	b.n	8001ea4 <HAL_DMA_IRQHandler+0xb0>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	4a55      	ldr	r2, [pc, #340]	; (8001ffc <HAL_DMA_IRQHandler+0x208>)
 8001ea6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 8094 	beq.w	8001fda <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001eba:	e08e      	b.n	8001fda <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d056      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x186>
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d051      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0320 	and.w	r3, r3, #32
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10b      	bne.n	8001efc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 020a 	bic.w	r2, r2, #10
 8001ef2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a38      	ldr	r2, [pc, #224]	; (8001fe4 <HAL_DMA_IRQHandler+0x1f0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d029      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x166>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a37      	ldr	r2, [pc, #220]	; (8001fe8 <HAL_DMA_IRQHandler+0x1f4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d022      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x162>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a35      	ldr	r2, [pc, #212]	; (8001fec <HAL_DMA_IRQHandler+0x1f8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d01a      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x15c>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a34      	ldr	r2, [pc, #208]	; (8001ff0 <HAL_DMA_IRQHandler+0x1fc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d012      	beq.n	8001f4a <HAL_DMA_IRQHandler+0x156>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a32      	ldr	r2, [pc, #200]	; (8001ff4 <HAL_DMA_IRQHandler+0x200>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00a      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x150>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a31      	ldr	r2, [pc, #196]	; (8001ff8 <HAL_DMA_IRQHandler+0x204>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d102      	bne.n	8001f3e <HAL_DMA_IRQHandler+0x14a>
 8001f38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f3c:	e00e      	b.n	8001f5c <HAL_DMA_IRQHandler+0x168>
 8001f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f42:	e00b      	b.n	8001f5c <HAL_DMA_IRQHandler+0x168>
 8001f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f48:	e008      	b.n	8001f5c <HAL_DMA_IRQHandler+0x168>
 8001f4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f4e:	e005      	b.n	8001f5c <HAL_DMA_IRQHandler+0x168>
 8001f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f54:	e002      	b.n	8001f5c <HAL_DMA_IRQHandler+0x168>
 8001f56:	2320      	movs	r3, #32
 8001f58:	e000      	b.n	8001f5c <HAL_DMA_IRQHandler+0x168>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	4a27      	ldr	r2, [pc, #156]	; (8001ffc <HAL_DMA_IRQHandler+0x208>)
 8001f5e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d034      	beq.n	8001fda <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f78:	e02f      	b.n	8001fda <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	2208      	movs	r2, #8
 8001f80:	409a      	lsls	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d028      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x1e8>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d023      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 020e 	bic.w	r2, r2, #14
 8001fa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	4798      	blx	r3
    }
  }
  return;
 8001fda:	bf00      	nop
 8001fdc:	bf00      	nop
}
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40020008 	.word	0x40020008
 8001fe8:	4002001c 	.word	0x4002001c
 8001fec:	40020030 	.word	0x40020030
 8001ff0:	40020044 	.word	0x40020044
 8001ff4:	40020058 	.word	0x40020058
 8001ff8:	4002006c 	.word	0x4002006c
 8001ffc:	40020000 	.word	0x40020000

08002000 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002016:	2101      	movs	r1, #1
 8002018:	fa01 f202 	lsl.w	r2, r1, r2
 800201c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b10      	cmp	r3, #16
 800202c:	d108      	bne.n	8002040 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800203e:	e007      	b.n	8002050 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	60da      	str	r2, [r3, #12]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
	...

0800205c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800205c:	b480      	push	{r7}
 800205e:	b08b      	sub	sp, #44	; 0x2c
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206e:	e169      	b.n	8002344 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002070:	2201      	movs	r2, #1
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	69fa      	ldr	r2, [r7, #28]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	429a      	cmp	r2, r3
 800208a:	f040 8158 	bne.w	800233e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4a9a      	ldr	r2, [pc, #616]	; (80022fc <HAL_GPIO_Init+0x2a0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d05e      	beq.n	8002156 <HAL_GPIO_Init+0xfa>
 8002098:	4a98      	ldr	r2, [pc, #608]	; (80022fc <HAL_GPIO_Init+0x2a0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d875      	bhi.n	800218a <HAL_GPIO_Init+0x12e>
 800209e:	4a98      	ldr	r2, [pc, #608]	; (8002300 <HAL_GPIO_Init+0x2a4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d058      	beq.n	8002156 <HAL_GPIO_Init+0xfa>
 80020a4:	4a96      	ldr	r2, [pc, #600]	; (8002300 <HAL_GPIO_Init+0x2a4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d86f      	bhi.n	800218a <HAL_GPIO_Init+0x12e>
 80020aa:	4a96      	ldr	r2, [pc, #600]	; (8002304 <HAL_GPIO_Init+0x2a8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d052      	beq.n	8002156 <HAL_GPIO_Init+0xfa>
 80020b0:	4a94      	ldr	r2, [pc, #592]	; (8002304 <HAL_GPIO_Init+0x2a8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d869      	bhi.n	800218a <HAL_GPIO_Init+0x12e>
 80020b6:	4a94      	ldr	r2, [pc, #592]	; (8002308 <HAL_GPIO_Init+0x2ac>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d04c      	beq.n	8002156 <HAL_GPIO_Init+0xfa>
 80020bc:	4a92      	ldr	r2, [pc, #584]	; (8002308 <HAL_GPIO_Init+0x2ac>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d863      	bhi.n	800218a <HAL_GPIO_Init+0x12e>
 80020c2:	4a92      	ldr	r2, [pc, #584]	; (800230c <HAL_GPIO_Init+0x2b0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d046      	beq.n	8002156 <HAL_GPIO_Init+0xfa>
 80020c8:	4a90      	ldr	r2, [pc, #576]	; (800230c <HAL_GPIO_Init+0x2b0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d85d      	bhi.n	800218a <HAL_GPIO_Init+0x12e>
 80020ce:	2b12      	cmp	r3, #18
 80020d0:	d82a      	bhi.n	8002128 <HAL_GPIO_Init+0xcc>
 80020d2:	2b12      	cmp	r3, #18
 80020d4:	d859      	bhi.n	800218a <HAL_GPIO_Init+0x12e>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <HAL_GPIO_Init+0x80>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	08002157 	.word	0x08002157
 80020e0:	08002131 	.word	0x08002131
 80020e4:	08002143 	.word	0x08002143
 80020e8:	08002185 	.word	0x08002185
 80020ec:	0800218b 	.word	0x0800218b
 80020f0:	0800218b 	.word	0x0800218b
 80020f4:	0800218b 	.word	0x0800218b
 80020f8:	0800218b 	.word	0x0800218b
 80020fc:	0800218b 	.word	0x0800218b
 8002100:	0800218b 	.word	0x0800218b
 8002104:	0800218b 	.word	0x0800218b
 8002108:	0800218b 	.word	0x0800218b
 800210c:	0800218b 	.word	0x0800218b
 8002110:	0800218b 	.word	0x0800218b
 8002114:	0800218b 	.word	0x0800218b
 8002118:	0800218b 	.word	0x0800218b
 800211c:	0800218b 	.word	0x0800218b
 8002120:	08002139 	.word	0x08002139
 8002124:	0800214d 	.word	0x0800214d
 8002128:	4a79      	ldr	r2, [pc, #484]	; (8002310 <HAL_GPIO_Init+0x2b4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800212e:	e02c      	b.n	800218a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	623b      	str	r3, [r7, #32]
          break;
 8002136:	e029      	b.n	800218c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	3304      	adds	r3, #4
 800213e:	623b      	str	r3, [r7, #32]
          break;
 8002140:	e024      	b.n	800218c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	3308      	adds	r3, #8
 8002148:	623b      	str	r3, [r7, #32]
          break;
 800214a:	e01f      	b.n	800218c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	330c      	adds	r3, #12
 8002152:	623b      	str	r3, [r7, #32]
          break;
 8002154:	e01a      	b.n	800218c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d102      	bne.n	8002164 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800215e:	2304      	movs	r3, #4
 8002160:	623b      	str	r3, [r7, #32]
          break;
 8002162:	e013      	b.n	800218c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d105      	bne.n	8002178 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800216c:	2308      	movs	r3, #8
 800216e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	611a      	str	r2, [r3, #16]
          break;
 8002176:	e009      	b.n	800218c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002178:	2308      	movs	r3, #8
 800217a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	615a      	str	r2, [r3, #20]
          break;
 8002182:	e003      	b.n	800218c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002184:	2300      	movs	r3, #0
 8002186:	623b      	str	r3, [r7, #32]
          break;
 8002188:	e000      	b.n	800218c <HAL_GPIO_Init+0x130>
          break;
 800218a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2bff      	cmp	r3, #255	; 0xff
 8002190:	d801      	bhi.n	8002196 <HAL_GPIO_Init+0x13a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	e001      	b.n	800219a <HAL_GPIO_Init+0x13e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3304      	adds	r3, #4
 800219a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2bff      	cmp	r3, #255	; 0xff
 80021a0:	d802      	bhi.n	80021a8 <HAL_GPIO_Init+0x14c>
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	e002      	b.n	80021ae <HAL_GPIO_Init+0x152>
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	3b08      	subs	r3, #8
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	210f      	movs	r1, #15
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	401a      	ands	r2, r3
 80021c0:	6a39      	ldr	r1, [r7, #32]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	431a      	orrs	r2, r3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80b1 	beq.w	800233e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021dc:	4b4d      	ldr	r3, [pc, #308]	; (8002314 <HAL_GPIO_Init+0x2b8>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	4a4c      	ldr	r2, [pc, #304]	; (8002314 <HAL_GPIO_Init+0x2b8>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6193      	str	r3, [r2, #24]
 80021e8:	4b4a      	ldr	r3, [pc, #296]	; (8002314 <HAL_GPIO_Init+0x2b8>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021f4:	4a48      	ldr	r2, [pc, #288]	; (8002318 <HAL_GPIO_Init+0x2bc>)
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	089b      	lsrs	r3, r3, #2
 80021fa:	3302      	adds	r3, #2
 80021fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002200:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	220f      	movs	r2, #15
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4013      	ands	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a40      	ldr	r2, [pc, #256]	; (800231c <HAL_GPIO_Init+0x2c0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d013      	beq.n	8002248 <HAL_GPIO_Init+0x1ec>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a3f      	ldr	r2, [pc, #252]	; (8002320 <HAL_GPIO_Init+0x2c4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00d      	beq.n	8002244 <HAL_GPIO_Init+0x1e8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3e      	ldr	r2, [pc, #248]	; (8002324 <HAL_GPIO_Init+0x2c8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d007      	beq.n	8002240 <HAL_GPIO_Init+0x1e4>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a3d      	ldr	r2, [pc, #244]	; (8002328 <HAL_GPIO_Init+0x2cc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d101      	bne.n	800223c <HAL_GPIO_Init+0x1e0>
 8002238:	2303      	movs	r3, #3
 800223a:	e006      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 800223c:	2304      	movs	r3, #4
 800223e:	e004      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 8002240:	2302      	movs	r3, #2
 8002242:	e002      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 8002248:	2300      	movs	r3, #0
 800224a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224c:	f002 0203 	and.w	r2, r2, #3
 8002250:	0092      	lsls	r2, r2, #2
 8002252:	4093      	lsls	r3, r2
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800225a:	492f      	ldr	r1, [pc, #188]	; (8002318 <HAL_GPIO_Init+0x2bc>)
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_GPIO_Init+0x2d0>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	492c      	ldr	r1, [pc, #176]	; (800232c <HAL_GPIO_Init+0x2d0>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]
 8002280:	e006      	b.n	8002290 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002282:	4b2a      	ldr	r3, [pc, #168]	; (800232c <HAL_GPIO_Init+0x2d0>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	43db      	mvns	r3, r3
 800228a:	4928      	ldr	r1, [pc, #160]	; (800232c <HAL_GPIO_Init+0x2d0>)
 800228c:	4013      	ands	r3, r2
 800228e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d006      	beq.n	80022aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800229c:	4b23      	ldr	r3, [pc, #140]	; (800232c <HAL_GPIO_Init+0x2d0>)
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	4922      	ldr	r1, [pc, #136]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	491e      	ldr	r1, [pc, #120]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d006      	beq.n	80022d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	4918      	ldr	r1, [pc, #96]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	608b      	str	r3, [r1, #8]
 80022d0:	e006      	b.n	80022e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	43db      	mvns	r3, r3
 80022da:	4914      	ldr	r1, [pc, #80]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022dc:	4013      	ands	r3, r2
 80022de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d021      	beq.n	8002330 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022ec:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	490e      	ldr	r1, [pc, #56]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60cb      	str	r3, [r1, #12]
 80022f8:	e021      	b.n	800233e <HAL_GPIO_Init+0x2e2>
 80022fa:	bf00      	nop
 80022fc:	10320000 	.word	0x10320000
 8002300:	10310000 	.word	0x10310000
 8002304:	10220000 	.word	0x10220000
 8002308:	10210000 	.word	0x10210000
 800230c:	10120000 	.word	0x10120000
 8002310:	10110000 	.word	0x10110000
 8002314:	40021000 	.word	0x40021000
 8002318:	40010000 	.word	0x40010000
 800231c:	40010800 	.word	0x40010800
 8002320:	40010c00 	.word	0x40010c00
 8002324:	40011000 	.word	0x40011000
 8002328:	40011400 	.word	0x40011400
 800232c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_GPIO_Init+0x304>)
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	43db      	mvns	r3, r3
 8002338:	4909      	ldr	r1, [pc, #36]	; (8002360 <HAL_GPIO_Init+0x304>)
 800233a:	4013      	ands	r3, r2
 800233c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	3301      	adds	r3, #1
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	fa22 f303 	lsr.w	r3, r2, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	f47f ae8e 	bne.w	8002070 <HAL_GPIO_Init+0x14>
  }
}
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	372c      	adds	r7, #44	; 0x2c
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	40010400 	.word	0x40010400

08002364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	887b      	ldrh	r3, [r7, #2]
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
 8002380:	e001      	b.n	8002386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002386:	7bfb      	ldrb	r3, [r7, #15]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	807b      	strh	r3, [r7, #2]
 800239e:	4613      	mov	r3, r2
 80023a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023a2:	787b      	ldrb	r3, [r7, #1]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a8:	887a      	ldrh	r2, [r7, #2]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023ae:	e003      	b.n	80023b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023b0:	887b      	ldrh	r3, [r7, #2]
 80023b2:	041a      	lsls	r2, r3, #16
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	611a      	str	r2, [r3, #16]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	460b      	mov	r3, r1
 80023cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023d4:	887a      	ldrh	r2, [r7, #2]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4013      	ands	r3, r2
 80023da:	041a      	lsls	r2, r3, #16
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	43d9      	mvns	r1, r3
 80023e0:	887b      	ldrh	r3, [r7, #2]
 80023e2:	400b      	ands	r3, r1
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	611a      	str	r2, [r3, #16]
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e272      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8087 	beq.w	8002522 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002414:	4b92      	ldr	r3, [pc, #584]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b04      	cmp	r3, #4
 800241e:	d00c      	beq.n	800243a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002420:	4b8f      	ldr	r3, [pc, #572]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b08      	cmp	r3, #8
 800242a:	d112      	bne.n	8002452 <HAL_RCC_OscConfig+0x5e>
 800242c:	4b8c      	ldr	r3, [pc, #560]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d10b      	bne.n	8002452 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243a:	4b89      	ldr	r3, [pc, #548]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d06c      	beq.n	8002520 <HAL_RCC_OscConfig+0x12c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d168      	bne.n	8002520 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e24c      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x76>
 800245c:	4b80      	ldr	r3, [pc, #512]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a7f      	ldr	r2, [pc, #508]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e02e      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x98>
 8002472:	4b7b      	ldr	r3, [pc, #492]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a7a      	ldr	r2, [pc, #488]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b78      	ldr	r3, [pc, #480]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a77      	ldr	r2, [pc, #476]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e01d      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0xbc>
 8002496:	4b72      	ldr	r3, [pc, #456]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a71      	ldr	r2, [pc, #452]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b6f      	ldr	r3, [pc, #444]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a6e      	ldr	r2, [pc, #440]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 80024b0:	4b6b      	ldr	r3, [pc, #428]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a6a      	ldr	r2, [pc, #424]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b68      	ldr	r3, [pc, #416]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a67      	ldr	r2, [pc, #412]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7ff f9ea 	bl	80018a8 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7ff f9e6 	bl	80018a8 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e200      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	4b5d      	ldr	r3, [pc, #372]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xe4>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7ff f9d6 	bl	80018a8 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7ff f9d2 	bl	80018a8 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1ec      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	4b53      	ldr	r3, [pc, #332]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x10c>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d063      	beq.n	80025f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800252e:	4b4c      	ldr	r3, [pc, #304]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800253a:	4b49      	ldr	r3, [pc, #292]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b08      	cmp	r3, #8
 8002544:	d11c      	bne.n	8002580 <HAL_RCC_OscConfig+0x18c>
 8002546:	4b46      	ldr	r3, [pc, #280]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d116      	bne.n	8002580 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	4b43      	ldr	r3, [pc, #268]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_RCC_OscConfig+0x176>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e1c0      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4939      	ldr	r1, [pc, #228]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	e03a      	b.n	80025f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d020      	beq.n	80025ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002588:	4b36      	ldr	r3, [pc, #216]	; (8002664 <HAL_RCC_OscConfig+0x270>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7ff f98b 	bl	80018a8 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002596:	f7ff f987 	bl	80018a8 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e1a1      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a8:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4927      	ldr	r1, [pc, #156]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e015      	b.n	80025f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ca:	4b26      	ldr	r3, [pc, #152]	; (8002664 <HAL_RCC_OscConfig+0x270>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7ff f96a 	bl	80018a8 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d8:	f7ff f966 	bl	80018a8 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e180      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d03a      	beq.n	8002678 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d019      	beq.n	800263e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <HAL_RCC_OscConfig+0x274>)
 800260c:	2201      	movs	r2, #1
 800260e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002610:	f7ff f94a 	bl	80018a8 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002618:	f7ff f946 	bl	80018a8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e160      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002636:	2001      	movs	r0, #1
 8002638:	f000 fad8 	bl	8002bec <RCC_Delay>
 800263c:	e01c      	b.n	8002678 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <HAL_RCC_OscConfig+0x274>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002644:	f7ff f930 	bl	80018a8 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264a:	e00f      	b.n	800266c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264c:	f7ff f92c 	bl	80018a8 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d908      	bls.n	800266c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e146      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	42420000 	.word	0x42420000
 8002668:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	4b92      	ldr	r3, [pc, #584]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1e9      	bne.n	800264c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80a6 	beq.w	80027d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268a:	4b8b      	ldr	r3, [pc, #556]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10d      	bne.n	80026b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	4b88      	ldr	r3, [pc, #544]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	4a87      	ldr	r2, [pc, #540]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a0:	61d3      	str	r3, [r2, #28]
 80026a2:	4b85      	ldr	r3, [pc, #532]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ae:	2301      	movs	r3, #1
 80026b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	4b82      	ldr	r3, [pc, #520]	; (80028bc <HAL_RCC_OscConfig+0x4c8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026be:	4b7f      	ldr	r3, [pc, #508]	; (80028bc <HAL_RCC_OscConfig+0x4c8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a7e      	ldr	r2, [pc, #504]	; (80028bc <HAL_RCC_OscConfig+0x4c8>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7ff f8ed 	bl	80018a8 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7ff f8e9 	bl	80018a8 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b64      	cmp	r3, #100	; 0x64
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e103      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	4b75      	ldr	r3, [pc, #468]	; (80028bc <HAL_RCC_OscConfig+0x4c8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x312>
 80026f8:	4b6f      	ldr	r3, [pc, #444]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4a6e      	ldr	r2, [pc, #440]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6213      	str	r3, [r2, #32]
 8002704:	e02d      	b.n	8002762 <HAL_RCC_OscConfig+0x36e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x334>
 800270e:	4b6a      	ldr	r3, [pc, #424]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a69      	ldr	r2, [pc, #420]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	6213      	str	r3, [r2, #32]
 800271a:	4b67      	ldr	r3, [pc, #412]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a66      	ldr	r2, [pc, #408]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f023 0304 	bic.w	r3, r3, #4
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	e01c      	b.n	8002762 <HAL_RCC_OscConfig+0x36e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d10c      	bne.n	800274a <HAL_RCC_OscConfig+0x356>
 8002730:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4a60      	ldr	r2, [pc, #384]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	6213      	str	r3, [r2, #32]
 800273c:	4b5e      	ldr	r3, [pc, #376]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4a5d      	ldr	r2, [pc, #372]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6213      	str	r3, [r2, #32]
 8002748:	e00b      	b.n	8002762 <HAL_RCC_OscConfig+0x36e>
 800274a:	4b5b      	ldr	r3, [pc, #364]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a5a      	ldr	r2, [pc, #360]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	4b58      	ldr	r3, [pc, #352]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a57      	ldr	r2, [pc, #348]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d015      	beq.n	8002796 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276a:	f7ff f89d 	bl	80018a8 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7ff f899 	bl	80018a8 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0b1      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ee      	beq.n	8002772 <HAL_RCC_OscConfig+0x37e>
 8002794:	e014      	b.n	80027c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7ff f887 	bl	80018a8 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7ff f883 	bl	80018a8 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e09b      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b4:	4b40      	ldr	r3, [pc, #256]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ee      	bne.n	800279e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c6:	4b3c      	ldr	r3, [pc, #240]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4a3b      	ldr	r2, [pc, #236]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8087 	beq.w	80028ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027dc:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d061      	beq.n	80028ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d146      	bne.n	800287e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f0:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <HAL_RCC_OscConfig+0x4cc>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7ff f857 	bl	80018a8 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fe:	f7ff f853 	bl	80018a8 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e06d      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002810:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002824:	d108      	bne.n	8002838 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002826:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	4921      	ldr	r1, [pc, #132]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002838:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a19      	ldr	r1, [r3, #32]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	430b      	orrs	r3, r1
 800284a:	491b      	ldr	r1, [pc, #108]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x4cc>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7ff f827 	bl	80018a8 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7ff f823 	bl	80018a8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e03d      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x46a>
 800287c:	e035      	b.n	80028ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_RCC_OscConfig+0x4cc>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7ff f810 	bl	80018a8 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288c:	f7ff f80c 	bl	80018a8 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e026      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x498>
 80028aa:	e01e      	b.n	80028ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e019      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40007000 	.word	0x40007000
 80028c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_OscConfig+0x500>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d106      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d001      	beq.n	80028ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000

080028f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0d0      	b.n	8002aae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800290c:	4b6a      	ldr	r3, [pc, #424]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d910      	bls.n	800293c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 0207 	bic.w	r2, r3, #7
 8002922:	4965      	ldr	r1, [pc, #404]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b63      	ldr	r3, [pc, #396]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0b8      	b.n	8002aae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d020      	beq.n	800298a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002954:	4b59      	ldr	r3, [pc, #356]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a58      	ldr	r2, [pc, #352]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800295e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800296c:	4b53      	ldr	r3, [pc, #332]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	4a52      	ldr	r2, [pc, #328]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002976:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002978:	4b50      	ldr	r3, [pc, #320]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	494d      	ldr	r1, [pc, #308]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d040      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d115      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e07f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b6:	4b41      	ldr	r3, [pc, #260]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e073      	b.n	8002aae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c6:	4b3d      	ldr	r3, [pc, #244]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e06b      	b.n	8002aae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029d6:	4b39      	ldr	r3, [pc, #228]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f023 0203 	bic.w	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4936      	ldr	r1, [pc, #216]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e8:	f7fe ff5e 	bl	80018a8 <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f0:	f7fe ff5a 	bl	80018a8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e053      	b.n	8002aae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 020c 	and.w	r2, r3, #12
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d1eb      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a18:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d210      	bcs.n	8002a48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 0207 	bic.w	r2, r3, #7
 8002a2e:	4922      	ldr	r1, [pc, #136]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e032      	b.n	8002aae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a54:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4916      	ldr	r1, [pc, #88]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a72:	4b12      	ldr	r3, [pc, #72]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	490e      	ldr	r1, [pc, #56]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a86:	f000 f821 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	490a      	ldr	r1, [pc, #40]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a98:	5ccb      	ldrb	r3, [r1, r3]
 8002a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9e:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <HAL_RCC_ClockConfig+0x1cc>)
 8002aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <HAL_RCC_ClockConfig+0x1d0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe febc 	bl	8001824 <HAL_InitTick>

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40022000 	.word	0x40022000
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	08006738 	.word	0x08006738
 8002ac4:	20000298 	.word	0x20000298
 8002ac8:	2000029c 	.word	0x2000029c

08002acc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002acc:	b490      	push	{r4, r7}
 8002ace:	b08a      	sub	sp, #40	; 0x28
 8002ad0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ad2:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xac>)
 8002ad4:	1d3c      	adds	r4, r7, #4
 8002ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002adc:	f240 2301 	movw	r3, #513	; 0x201
 8002ae0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
 8002aea:	2300      	movs	r3, #0
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002af6:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d002      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x40>
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d003      	beq.n	8002b12 <HAL_RCC_GetSysClockFreq+0x46>
 8002b0a:	e02b      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b0e:	623b      	str	r3, [r7, #32]
      break;
 8002b10:	e02b      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	0c9b      	lsrs	r3, r3, #18
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	3328      	adds	r3, #40	; 0x28
 8002b1c:	443b      	add	r3, r7
 8002b1e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b22:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d012      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b2e:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	0c5b      	lsrs	r3, r3, #17
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	3328      	adds	r3, #40	; 0x28
 8002b3a:	443b      	add	r3, r7
 8002b3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	4a0e      	ldr	r2, [pc, #56]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b46:	fb03 f202 	mul.w	r2, r3, r2
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
 8002b52:	e004      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	4a0b      	ldr	r2, [pc, #44]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b58:	fb02 f303 	mul.w	r3, r2, r3
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	623b      	str	r3, [r7, #32]
      break;
 8002b62:	e002      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b66:	623b      	str	r3, [r7, #32]
      break;
 8002b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3728      	adds	r7, #40	; 0x28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc90      	pop	{r4, r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	08006728 	.word	0x08006728
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	007a1200 	.word	0x007a1200
 8002b84:	003d0900 	.word	0x003d0900

08002b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b8c:	4b02      	ldr	r3, [pc, #8]	; (8002b98 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	20000298 	.word	0x20000298

08002b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ba0:	f7ff fff2 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	4903      	ldr	r1, [pc, #12]	; (8002bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb2:	5ccb      	ldrb	r3, [r1, r3]
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	08006748 	.word	0x08006748

08002bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bc8:	f7ff ffde 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	0adb      	lsrs	r3, r3, #11
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4903      	ldr	r1, [pc, #12]	; (8002be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000
 8002be8:	08006748 	.word	0x08006748

08002bec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bf4:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <RCC_Delay+0x34>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <RCC_Delay+0x38>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	0a5b      	lsrs	r3, r3, #9
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c08:	bf00      	nop
  }
  while (Delay --);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1e5a      	subs	r2, r3, #1
 8002c0e:	60fa      	str	r2, [r7, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f9      	bne.n	8002c08 <RCC_Delay+0x1c>
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	20000298 	.word	0x20000298
 8002c24:	10624dd3 	.word	0x10624dd3

08002c28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e076      	b.n	8002d28 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d108      	bne.n	8002c54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c4a:	d009      	beq.n	8002c60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	61da      	str	r2, [r3, #28]
 8002c52:	e005      	b.n	8002c60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe f93a 	bl	8000ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce4:	ea42 0103 	orr.w	r1, r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	0c1a      	lsrs	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f002 0204 	and.w	r2, r2, #4
 8002d06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_SPI_Transmit+0x22>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e126      	b.n	8002fa0 <HAL_SPI_Transmit+0x270>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d5a:	f7fe fda5 	bl	80018a8 <HAL_GetTick>
 8002d5e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d60:	88fb      	ldrh	r3, [r7, #6]
 8002d62:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d002      	beq.n	8002d76 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d70:	2302      	movs	r3, #2
 8002d72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d74:	e10b      	b.n	8002f8e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_SPI_Transmit+0x52>
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d102      	bne.n	8002d88 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d86:	e102      	b.n	8002f8e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	88fa      	ldrh	r2, [r7, #6]
 8002da0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	88fa      	ldrh	r2, [r7, #6]
 8002da6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dce:	d10f      	bne.n	8002df0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	2b40      	cmp	r3, #64	; 0x40
 8002dfc:	d007      	beq.n	8002e0e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e16:	d14b      	bne.n	8002eb0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <HAL_SPI_Transmit+0xf6>
 8002e20:	8afb      	ldrh	r3, [r7, #22]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d13e      	bne.n	8002ea4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	881a      	ldrh	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	1c9a      	adds	r2, r3, #2
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e4a:	e02b      	b.n	8002ea4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d112      	bne.n	8002e80 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	881a      	ldrh	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	1c9a      	adds	r2, r3, #2
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e7e:	e011      	b.n	8002ea4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e80:	f7fe fd12 	bl	80018a8 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d803      	bhi.n	8002e98 <HAL_SPI_Transmit+0x168>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e96:	d102      	bne.n	8002e9e <HAL_SPI_Transmit+0x16e>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d102      	bne.n	8002ea4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ea2:	e074      	b.n	8002f8e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1ce      	bne.n	8002e4c <HAL_SPI_Transmit+0x11c>
 8002eae:	e04c      	b.n	8002f4a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_SPI_Transmit+0x18e>
 8002eb8:	8afb      	ldrh	r3, [r7, #22]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d140      	bne.n	8002f40 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	330c      	adds	r3, #12
 8002ec8:	7812      	ldrb	r2, [r2, #0]
 8002eca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ee4:	e02c      	b.n	8002f40 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d113      	bne.n	8002f1c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	330c      	adds	r3, #12
 8002efe:	7812      	ldrb	r2, [r2, #0]
 8002f00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f1a:	e011      	b.n	8002f40 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f1c:	f7fe fcc4 	bl	80018a8 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d803      	bhi.n	8002f34 <HAL_SPI_Transmit+0x204>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f32:	d102      	bne.n	8002f3a <HAL_SPI_Transmit+0x20a>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f3e:	e026      	b.n	8002f8e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1cd      	bne.n	8002ee6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	6839      	ldr	r1, [r7, #0]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fbb8 	bl	80036c4 <SPI_EndRxTxTransaction>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10a      	bne.n	8002f7e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f68:	2300      	movs	r3, #0
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	77fb      	strb	r3, [r7, #31]
 8002f8a:	e000      	b.n	8002f8e <HAL_SPI_Transmit+0x25e>
  }

error:
 8002f8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3720      	adds	r7, #32
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fc4:	d112      	bne.n	8002fec <HAL_SPI_Receive+0x44>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10e      	bne.n	8002fec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fd6:	88fa      	ldrh	r2, [r7, #6]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	68b9      	ldr	r1, [r7, #8]
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f8f1 	bl	80031ca <HAL_SPI_TransmitReceive>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	e0ea      	b.n	80031c2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_SPI_Receive+0x52>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e0e3      	b.n	80031c2 <HAL_SPI_Receive+0x21a>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003002:	f7fe fc51 	bl	80018a8 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d002      	beq.n	800301a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003014:	2302      	movs	r3, #2
 8003016:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003018:	e0ca      	b.n	80031b0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_SPI_Receive+0x7e>
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	75fb      	strb	r3, [r7, #23]
    goto error;
 800302a:	e0c1      	b.n	80031b0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2204      	movs	r2, #4
 8003030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	88fa      	ldrh	r2, [r7, #6]
 8003044:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	88fa      	ldrh	r2, [r7, #6]
 800304a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003072:	d10f      	bne.n	8003094 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003082:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003092:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309e:	2b40      	cmp	r3, #64	; 0x40
 80030a0:	d007      	beq.n	80030b2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d162      	bne.n	8003180 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80030ba:	e02e      	b.n	800311a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d115      	bne.n	80030f6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f103 020c 	add.w	r2, r3, #12
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	7812      	ldrb	r2, [r2, #0]
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030f4:	e011      	b.n	800311a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030f6:	f7fe fbd7 	bl	80018a8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d803      	bhi.n	800310e <HAL_SPI_Receive+0x166>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800310c:	d102      	bne.n	8003114 <HAL_SPI_Receive+0x16c>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003118:	e04a      	b.n	80031b0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1cb      	bne.n	80030bc <HAL_SPI_Receive+0x114>
 8003124:	e031      	b.n	800318a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d113      	bne.n	800315c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	b292      	uxth	r2, r2
 8003140:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003146:	1c9a      	adds	r2, r3, #2
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	87da      	strh	r2, [r3, #62]	; 0x3e
 800315a:	e011      	b.n	8003180 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800315c:	f7fe fba4 	bl	80018a8 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d803      	bhi.n	8003174 <HAL_SPI_Receive+0x1cc>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003172:	d102      	bne.n	800317a <HAL_SPI_Receive+0x1d2>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800317e:	e017      	b.n	80031b0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1cd      	bne.n	8003126 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	6839      	ldr	r1, [r7, #0]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fa46 	bl	8003620 <SPI_EndRxTransaction>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	75fb      	strb	r3, [r7, #23]
 80031ac:	e000      	b.n	80031b0 <HAL_SPI_Receive+0x208>
  }

error :
 80031ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b08c      	sub	sp, #48	; 0x30
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031d8:	2301      	movs	r3, #1
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_SPI_TransmitReceive+0x26>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e18a      	b.n	8003506 <HAL_SPI_TransmitReceive+0x33c>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f8:	f7fe fb56 	bl	80018a8 <HAL_GetTick>
 80031fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003212:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003216:	2b01      	cmp	r3, #1
 8003218:	d00f      	beq.n	800323a <HAL_SPI_TransmitReceive+0x70>
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003220:	d107      	bne.n	8003232 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <HAL_SPI_TransmitReceive+0x68>
 800322a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800322e:	2b04      	cmp	r3, #4
 8003230:	d003      	beq.n	800323a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003232:	2302      	movs	r3, #2
 8003234:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003238:	e15b      	b.n	80034f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_SPI_TransmitReceive+0x82>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_SPI_TransmitReceive+0x82>
 8003246:	887b      	ldrh	r3, [r7, #2]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d103      	bne.n	8003254 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003252:	e14e      	b.n	80034f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b04      	cmp	r3, #4
 800325e:	d003      	beq.n	8003268 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2205      	movs	r2, #5
 8003264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	887a      	ldrh	r2, [r7, #2]
 8003278:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	887a      	ldrh	r2, [r7, #2]
 800327e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	887a      	ldrh	r2, [r7, #2]
 800328a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	887a      	ldrh	r2, [r7, #2]
 8003290:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a8:	2b40      	cmp	r3, #64	; 0x40
 80032aa:	d007      	beq.n	80032bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c4:	d178      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_SPI_TransmitReceive+0x10a>
 80032ce:	8b7b      	ldrh	r3, [r7, #26]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d166      	bne.n	80033a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	881a      	ldrh	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	1c9a      	adds	r2, r3, #2
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032f8:	e053      	b.n	80033a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b02      	cmp	r3, #2
 8003306:	d11b      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x176>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d016      	beq.n	8003340 <HAL_SPI_TransmitReceive+0x176>
 8003312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003314:	2b01      	cmp	r3, #1
 8003316:	d113      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	881a      	ldrh	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	1c9a      	adds	r2, r3, #2
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b01      	cmp	r3, #1
 800334c:	d119      	bne.n	8003382 <HAL_SPI_TransmitReceive+0x1b8>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d014      	beq.n	8003382 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	b292      	uxth	r2, r2
 8003364:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	1c9a      	adds	r2, r3, #2
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800337e:	2301      	movs	r3, #1
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003382:	f7fe fa91 	bl	80018a8 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800338e:	429a      	cmp	r2, r3
 8003390:	d807      	bhi.n	80033a2 <HAL_SPI_TransmitReceive+0x1d8>
 8003392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003398:	d003      	beq.n	80033a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033a0:	e0a7      	b.n	80034f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1a6      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x130>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1a1      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x130>
 80033b6:	e07c      	b.n	80034b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_SPI_TransmitReceive+0x1fc>
 80033c0:	8b7b      	ldrh	r3, [r7, #26]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d16b      	bne.n	800349e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	330c      	adds	r3, #12
 80033d0:	7812      	ldrb	r2, [r2, #0]
 80033d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ec:	e057      	b.n	800349e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d11c      	bne.n	8003436 <HAL_SPI_TransmitReceive+0x26c>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d017      	beq.n	8003436 <HAL_SPI_TransmitReceive+0x26c>
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d114      	bne.n	8003436 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	330c      	adds	r3, #12
 8003416:	7812      	ldrb	r2, [r2, #0]
 8003418:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b01      	cmp	r3, #1
 8003442:	d119      	bne.n	8003478 <HAL_SPI_TransmitReceive+0x2ae>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d014      	beq.n	8003478 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003474:	2301      	movs	r3, #1
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003478:	f7fe fa16 	bl	80018a8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003484:	429a      	cmp	r2, r3
 8003486:	d803      	bhi.n	8003490 <HAL_SPI_TransmitReceive+0x2c6>
 8003488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800348e:	d102      	bne.n	8003496 <HAL_SPI_TransmitReceive+0x2cc>
 8003490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800349c:	e029      	b.n	80034f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1a2      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x224>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d19d      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f904 	bl	80036c4 <SPI_EndRxTxTransaction>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d006      	beq.n	80034d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034ce:	e010      	b.n	80034f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10b      	bne.n	80034f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	e000      	b.n	80034f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80034f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003502:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003506:	4618      	mov	r0, r3
 8003508:	3730      	adds	r7, #48	; 0x30
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003520:	f7fe f9c2 	bl	80018a8 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4413      	add	r3, r2
 800352e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003530:	f7fe f9ba 	bl	80018a8 <HAL_GetTick>
 8003534:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003536:	4b39      	ldr	r3, [pc, #228]	; (800361c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	015b      	lsls	r3, r3, #5
 800353c:	0d1b      	lsrs	r3, r3, #20
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	fb02 f303 	mul.w	r3, r2, r3
 8003544:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003546:	e054      	b.n	80035f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800354e:	d050      	beq.n	80035f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003550:	f7fe f9aa 	bl	80018a8 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	429a      	cmp	r2, r3
 800355e:	d902      	bls.n	8003566 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d13d      	bne.n	80035e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003574:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357e:	d111      	bne.n	80035a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003588:	d004      	beq.n	8003594 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003592:	d107      	bne.n	80035a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ac:	d10f      	bne.n	80035ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e017      	b.n	8003612 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	429a      	cmp	r2, r3
 800360e:	d19b      	bne.n	8003548 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000298 	.word	0x20000298

08003620 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003634:	d111      	bne.n	800365a <SPI_EndRxTransaction+0x3a>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363e:	d004      	beq.n	800364a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003648:	d107      	bne.n	800365a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003658:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003662:	d117      	bne.n	8003694 <SPI_EndRxTransaction+0x74>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366c:	d112      	bne.n	8003694 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2200      	movs	r2, #0
 8003676:	2101      	movs	r1, #1
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f7ff ff49 	bl	8003510 <SPI_WaitFlagStateUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01a      	beq.n	80036ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	f043 0220 	orr.w	r2, r3, #32
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e013      	b.n	80036bc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2200      	movs	r2, #0
 800369c:	2180      	movs	r1, #128	; 0x80
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7ff ff36 	bl	8003510 <SPI_WaitFlagStateUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d007      	beq.n	80036ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	f043 0220 	orr.w	r2, r3, #32
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e000      	b.n	80036bc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2200      	movs	r2, #0
 80036d8:	2180      	movs	r1, #128	; 0x80
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff ff18 	bl	8003510 <SPI_WaitFlagStateUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	f043 0220 	orr.w	r2, r3, #32
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e000      	b.n	80036f8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e041      	b.n	8003796 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fd fe46 	bl	80013b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f000 fc8c 	bl	800405c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d001      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e03a      	b.n	800382e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a18      	ldr	r2, [pc, #96]	; (8003838 <HAL_TIM_Base_Start_IT+0x98>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00e      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0x58>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e2:	d009      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0x58>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a14      	ldr	r2, [pc, #80]	; (800383c <HAL_TIM_Base_Start_IT+0x9c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d004      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0x58>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a13      	ldr	r2, [pc, #76]	; (8003840 <HAL_TIM_Base_Start_IT+0xa0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d111      	bne.n	800381c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b06      	cmp	r3, #6
 8003808:	d010      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381a:	e007      	b.n	800382c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr
 8003838:	40012c00 	.word	0x40012c00
 800383c:	40000400 	.word	0x40000400
 8003840:	40000800 	.word	0x40000800

08003844 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e041      	b.n	80038da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f839 	bl	80038e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3304      	adds	r3, #4
 8003880:	4619      	mov	r1, r3
 8003882:	4610      	mov	r0, r2
 8003884:	f000 fbea 	bl	800405c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <HAL_TIM_PWM_Start+0x24>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	bf14      	ite	ne
 8003910:	2301      	movne	r3, #1
 8003912:	2300      	moveq	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e022      	b.n	800395e <HAL_TIM_PWM_Start+0x6a>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b04      	cmp	r3, #4
 800391c:	d109      	bne.n	8003932 <HAL_TIM_PWM_Start+0x3e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	bf14      	ite	ne
 800392a:	2301      	movne	r3, #1
 800392c:	2300      	moveq	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	e015      	b.n	800395e <HAL_TIM_PWM_Start+0x6a>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d109      	bne.n	800394c <HAL_TIM_PWM_Start+0x58>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	bf14      	ite	ne
 8003944:	2301      	movne	r3, #1
 8003946:	2300      	moveq	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e008      	b.n	800395e <HAL_TIM_PWM_Start+0x6a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b01      	cmp	r3, #1
 8003956:	bf14      	ite	ne
 8003958:	2301      	movne	r3, #1
 800395a:	2300      	moveq	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e05e      	b.n	8003a24 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d104      	bne.n	8003976 <HAL_TIM_PWM_Start+0x82>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003974:	e013      	b.n	800399e <HAL_TIM_PWM_Start+0xaa>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b04      	cmp	r3, #4
 800397a:	d104      	bne.n	8003986 <HAL_TIM_PWM_Start+0x92>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003984:	e00b      	b.n	800399e <HAL_TIM_PWM_Start+0xaa>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d104      	bne.n	8003996 <HAL_TIM_PWM_Start+0xa2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003994:	e003      	b.n	800399e <HAL_TIM_PWM_Start+0xaa>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2202      	movs	r2, #2
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2201      	movs	r2, #1
 80039a4:	6839      	ldr	r1, [r7, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fdd8 	bl	800455c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1e      	ldr	r2, [pc, #120]	; (8003a2c <HAL_TIM_PWM_Start+0x138>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d107      	bne.n	80039c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a18      	ldr	r2, [pc, #96]	; (8003a2c <HAL_TIM_PWM_Start+0x138>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00e      	beq.n	80039ee <HAL_TIM_PWM_Start+0xfa>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d8:	d009      	beq.n	80039ee <HAL_TIM_PWM_Start+0xfa>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <HAL_TIM_PWM_Start+0x13c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d004      	beq.n	80039ee <HAL_TIM_PWM_Start+0xfa>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a12      	ldr	r2, [pc, #72]	; (8003a34 <HAL_TIM_PWM_Start+0x140>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d111      	bne.n	8003a12 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b06      	cmp	r3, #6
 80039fe:	d010      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a10:	e007      	b.n	8003a22 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0201 	orr.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	40000400 	.word	0x40000400
 8003a34:	40000800 	.word	0x40000800

08003a38 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2200      	movs	r2, #0
 8003a48:	6839      	ldr	r1, [r7, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fd86 	bl	800455c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a29      	ldr	r2, [pc, #164]	; (8003afc <HAL_TIM_PWM_Stop+0xc4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d117      	bne.n	8003a8a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6a1a      	ldr	r2, [r3, #32]
 8003a60:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10f      	bne.n	8003a8a <HAL_TIM_PWM_Stop+0x52>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6a1a      	ldr	r2, [r3, #32]
 8003a70:	f240 4344 	movw	r3, #1092	; 0x444
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d107      	bne.n	8003a8a <HAL_TIM_PWM_Stop+0x52>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6a1a      	ldr	r2, [r3, #32]
 8003a90:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10f      	bne.n	8003aba <HAL_TIM_PWM_Stop+0x82>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	f240 4344 	movw	r3, #1092	; 0x444
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d107      	bne.n	8003aba <HAL_TIM_PWM_Stop+0x82>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0201 	bic.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d104      	bne.n	8003aca <HAL_TIM_PWM_Stop+0x92>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac8:	e013      	b.n	8003af2 <HAL_TIM_PWM_Stop+0xba>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d104      	bne.n	8003ada <HAL_TIM_PWM_Stop+0xa2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad8:	e00b      	b.n	8003af2 <HAL_TIM_PWM_Stop+0xba>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d104      	bne.n	8003aea <HAL_TIM_PWM_Stop+0xb2>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae8:	e003      	b.n	8003af2 <HAL_TIM_PWM_Stop+0xba>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40012c00 	.word	0x40012c00

08003b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d122      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d11b      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0202 	mvn.w	r2, #2
 8003b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa6f 	bl	8004026 <HAL_TIM_IC_CaptureCallback>
 8003b48:	e005      	b.n	8003b56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fa62 	bl	8004014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fa71 	bl	8004038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d122      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d11b      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0204 	mvn.w	r2, #4
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2202      	movs	r2, #2
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fa45 	bl	8004026 <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fa38 	bl	8004014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fa47 	bl	8004038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d122      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d11b      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0208 	mvn.w	r2, #8
 8003bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2204      	movs	r2, #4
 8003bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fa1b 	bl	8004026 <HAL_TIM_IC_CaptureCallback>
 8003bf0:	e005      	b.n	8003bfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fa0e 	bl	8004014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fa1d 	bl	8004038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b10      	cmp	r3, #16
 8003c10:	d122      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	d11b      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0210 	mvn.w	r2, #16
 8003c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f9f1 	bl	8004026 <HAL_TIM_IC_CaptureCallback>
 8003c44:	e005      	b.n	8003c52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f9e4 	bl	8004014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f9f3 	bl	8004038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d107      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0201 	mvn.w	r2, #1
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fd fac6 	bl	8001210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8e:	2b80      	cmp	r3, #128	; 0x80
 8003c90:	d10e      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9c:	2b80      	cmp	r3, #128	; 0x80
 8003c9e:	d107      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fce1 	bl	8004672 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d10e      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	d107      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f9b7 	bl	800404a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d10e      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d107      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0220 	mvn.w	r2, #32
 8003d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fcac 	bl	8004660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e0ac      	b.n	8003e84 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b0c      	cmp	r3, #12
 8003d36:	f200 809f 	bhi.w	8003e78 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003d3a:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d75 	.word	0x08003d75
 8003d44:	08003e79 	.word	0x08003e79
 8003d48:	08003e79 	.word	0x08003e79
 8003d4c:	08003e79 	.word	0x08003e79
 8003d50:	08003db5 	.word	0x08003db5
 8003d54:	08003e79 	.word	0x08003e79
 8003d58:	08003e79 	.word	0x08003e79
 8003d5c:	08003e79 	.word	0x08003e79
 8003d60:	08003df7 	.word	0x08003df7
 8003d64:	08003e79 	.word	0x08003e79
 8003d68:	08003e79 	.word	0x08003e79
 8003d6c:	08003e79 	.word	0x08003e79
 8003d70:	08003e37 	.word	0x08003e37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f9d0 	bl	8004120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699a      	ldr	r2, [r3, #24]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0208 	orr.w	r2, r2, #8
 8003d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6999      	ldr	r1, [r3, #24]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	619a      	str	r2, [r3, #24]
      break;
 8003db2:	e062      	b.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fa16 	bl	80041ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6999      	ldr	r1, [r3, #24]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	021a      	lsls	r2, r3, #8
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	619a      	str	r2, [r3, #24]
      break;
 8003df4:	e041      	b.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fa5f 	bl	80042c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69da      	ldr	r2, [r3, #28]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0208 	orr.w	r2, r2, #8
 8003e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0204 	bic.w	r2, r2, #4
 8003e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69d9      	ldr	r1, [r3, #28]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	61da      	str	r2, [r3, #28]
      break;
 8003e34:	e021      	b.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 faa9 	bl	8004394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69d9      	ldr	r1, [r3, #28]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	021a      	lsls	r2, r3, #8
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	61da      	str	r2, [r3, #28]
      break;
 8003e76:	e000      	b.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003e78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_TIM_ConfigClockSource+0x18>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e0b3      	b.n	800400c <HAL_TIM_ConfigClockSource+0x180>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ec2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003edc:	d03e      	beq.n	8003f5c <HAL_TIM_ConfigClockSource+0xd0>
 8003ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee2:	f200 8087 	bhi.w	8003ff4 <HAL_TIM_ConfigClockSource+0x168>
 8003ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eea:	f000 8085 	beq.w	8003ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef2:	d87f      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x168>
 8003ef4:	2b70      	cmp	r3, #112	; 0x70
 8003ef6:	d01a      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0xa2>
 8003ef8:	2b70      	cmp	r3, #112	; 0x70
 8003efa:	d87b      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x168>
 8003efc:	2b60      	cmp	r3, #96	; 0x60
 8003efe:	d050      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x116>
 8003f00:	2b60      	cmp	r3, #96	; 0x60
 8003f02:	d877      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x168>
 8003f04:	2b50      	cmp	r3, #80	; 0x50
 8003f06:	d03c      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0xf6>
 8003f08:	2b50      	cmp	r3, #80	; 0x50
 8003f0a:	d873      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x168>
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d058      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x136>
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	d86f      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x168>
 8003f14:	2b30      	cmp	r3, #48	; 0x30
 8003f16:	d064      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x156>
 8003f18:	2b30      	cmp	r3, #48	; 0x30
 8003f1a:	d86b      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x168>
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d060      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x156>
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d867      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x168>
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d05c      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x156>
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d05a      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f2c:	e062      	b.n	8003ff4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6899      	ldr	r1, [r3, #8]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f000 faee 	bl	800451e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	609a      	str	r2, [r3, #8]
      break;
 8003f5a:	e04e      	b.n	8003ffa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	6899      	ldr	r1, [r3, #8]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f000 fad7 	bl	800451e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f7e:	609a      	str	r2, [r3, #8]
      break;
 8003f80:	e03b      	b.n	8003ffa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6859      	ldr	r1, [r3, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f000 fa4e 	bl	8004430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2150      	movs	r1, #80	; 0x50
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 faa5 	bl	80044ea <TIM_ITRx_SetConfig>
      break;
 8003fa0:	e02b      	b.n	8003ffa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f000 fa6c 	bl	800448c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2160      	movs	r1, #96	; 0x60
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fa95 	bl	80044ea <TIM_ITRx_SetConfig>
      break;
 8003fc0:	e01b      	b.n	8003ffa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f000 fa2e 	bl	8004430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2140      	movs	r1, #64	; 0x40
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fa85 	bl	80044ea <TIM_ITRx_SetConfig>
      break;
 8003fe0:	e00b      	b.n	8003ffa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f000 fa7c 	bl	80044ea <TIM_ITRx_SetConfig>
        break;
 8003ff2:	e002      	b.n	8003ffa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ff4:	bf00      	nop
 8003ff6:	e000      	b.n	8003ffa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ff8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a29      	ldr	r2, [pc, #164]	; (8004114 <TIM_Base_SetConfig+0xb8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00b      	beq.n	800408c <TIM_Base_SetConfig+0x30>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407a:	d007      	beq.n	800408c <TIM_Base_SetConfig+0x30>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a26      	ldr	r2, [pc, #152]	; (8004118 <TIM_Base_SetConfig+0xbc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d003      	beq.n	800408c <TIM_Base_SetConfig+0x30>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a25      	ldr	r2, [pc, #148]	; (800411c <TIM_Base_SetConfig+0xc0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d108      	bne.n	800409e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a1c      	ldr	r2, [pc, #112]	; (8004114 <TIM_Base_SetConfig+0xb8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00b      	beq.n	80040be <TIM_Base_SetConfig+0x62>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ac:	d007      	beq.n	80040be <TIM_Base_SetConfig+0x62>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a19      	ldr	r2, [pc, #100]	; (8004118 <TIM_Base_SetConfig+0xbc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_Base_SetConfig+0x62>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a18      	ldr	r2, [pc, #96]	; (800411c <TIM_Base_SetConfig+0xc0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d108      	bne.n	80040d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a07      	ldr	r2, [pc, #28]	; (8004114 <TIM_Base_SetConfig+0xb8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d103      	bne.n	8004104 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	615a      	str	r2, [r3, #20]
}
 800410a:	bf00      	nop
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40000400 	.word	0x40000400
 800411c:	40000800 	.word	0x40000800

08004120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f023 0201 	bic.w	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0303 	bic.w	r3, r3, #3
 8004156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f023 0302 	bic.w	r3, r3, #2
 8004168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a1c      	ldr	r2, [pc, #112]	; (80041e8 <TIM_OC1_SetConfig+0xc8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d10c      	bne.n	8004196 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0308 	bic.w	r3, r3, #8
 8004182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f023 0304 	bic.w	r3, r3, #4
 8004194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a13      	ldr	r2, [pc, #76]	; (80041e8 <TIM_OC1_SetConfig+0xc8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d111      	bne.n	80041c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	621a      	str	r2, [r3, #32]
}
 80041dc:	bf00      	nop
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40012c00 	.word	0x40012c00

080041ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	f023 0210 	bic.w	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f023 0320 	bic.w	r3, r3, #32
 8004236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a1d      	ldr	r2, [pc, #116]	; (80042bc <TIM_OC2_SetConfig+0xd0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d10d      	bne.n	8004268 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004266:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a14      	ldr	r2, [pc, #80]	; (80042bc <TIM_OC2_SetConfig+0xd0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d113      	bne.n	8004298 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800427e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr
 80042bc:	40012c00 	.word	0x40012c00

080042c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a1d      	ldr	r2, [pc, #116]	; (8004390 <TIM_OC3_SetConfig+0xd0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d10d      	bne.n	800433a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004324:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	021b      	lsls	r3, r3, #8
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a14      	ldr	r2, [pc, #80]	; (8004390 <TIM_OC3_SetConfig+0xd0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d113      	bne.n	800436a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	621a      	str	r2, [r3, #32]
}
 8004384:	bf00      	nop
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40012c00 	.word	0x40012c00

08004394 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	031b      	lsls	r3, r3, #12
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a0f      	ldr	r2, [pc, #60]	; (800442c <TIM_OC4_SetConfig+0x98>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d109      	bne.n	8004408 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	019b      	lsls	r3, r3, #6
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr
 800442c:	40012c00 	.word	0x40012c00

08004430 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f023 0201 	bic.w	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800445a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f023 030a 	bic.w	r3, r3, #10
 800446c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	621a      	str	r2, [r3, #32]
}
 8004482:	bf00      	nop
 8004484:	371c      	adds	r7, #28
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	f023 0210 	bic.w	r2, r3, #16
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	031b      	lsls	r3, r3, #12
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	621a      	str	r2, [r3, #32]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr

080044ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b085      	sub	sp, #20
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004500:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	f043 0307 	orr.w	r3, r3, #7
 800450c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	609a      	str	r2, [r3, #8]
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr

0800451e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800451e:	b480      	push	{r7}
 8004520:	b087      	sub	sp, #28
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
 800452a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004538:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	021a      	lsls	r2, r3, #8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	431a      	orrs	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4313      	orrs	r3, r2
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	609a      	str	r2, [r3, #8]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr

0800455c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	2201      	movs	r2, #1
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a1a      	ldr	r2, [r3, #32]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	43db      	mvns	r3, r3
 800457e:	401a      	ands	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a1a      	ldr	r2, [r3, #32]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	fa01 f303 	lsl.w	r3, r1, r3
 8004594:	431a      	orrs	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	621a      	str	r2, [r3, #32]
}
 800459a:	bf00      	nop
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e046      	b.n	800464a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a16      	ldr	r2, [pc, #88]	; (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004608:	d009      	beq.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a12      	ldr	r2, [pc, #72]	; (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d004      	beq.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a10      	ldr	r2, [pc, #64]	; (800465c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d10c      	bne.n	8004638 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004624:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	4313      	orrs	r3, r2
 800462e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr
 8004654:	40012c00 	.word	0x40012c00
 8004658:	40000400 	.word	0x40000400
 800465c:	40000800 	.word	0x40000800

08004660 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr

08004672 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e03f      	b.n	8004716 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fc ffd2 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2224      	movs	r2, #36	; 0x24
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fe87 	bl	80053dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695a      	ldr	r2, [r3, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b08a      	sub	sp, #40	; 0x28
 8004722:	af02      	add	r7, sp, #8
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	603b      	str	r3, [r7, #0]
 800472a:	4613      	mov	r3, r2
 800472c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b20      	cmp	r3, #32
 800473c:	d17c      	bne.n	8004838 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <HAL_UART_Transmit+0x2c>
 8004744:	88fb      	ldrh	r3, [r7, #6]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e075      	b.n	800483a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_UART_Transmit+0x3e>
 8004758:	2302      	movs	r3, #2
 800475a:	e06e      	b.n	800483a <HAL_UART_Transmit+0x11c>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2221      	movs	r2, #33	; 0x21
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004772:	f7fd f899 	bl	80018a8 <HAL_GetTick>
 8004776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	88fa      	ldrh	r2, [r7, #6]
 8004782:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478c:	d108      	bne.n	80047a0 <HAL_UART_Transmit+0x82>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	61bb      	str	r3, [r7, #24]
 800479e:	e003      	b.n	80047a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047b0:	e02a      	b.n	8004808 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2200      	movs	r2, #0
 80047ba:	2180      	movs	r1, #128	; 0x80
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 fbf9 	bl	8004fb4 <UART_WaitOnFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e036      	b.n	800483a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10b      	bne.n	80047ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	3302      	adds	r3, #2
 80047e6:	61bb      	str	r3, [r7, #24]
 80047e8:	e007      	b.n	80047fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	781a      	ldrb	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	3301      	adds	r3, #1
 80047f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1cf      	bne.n	80047b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2200      	movs	r2, #0
 800481a:	2140      	movs	r1, #64	; 0x40
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fbc9 	bl	8004fb4 <UART_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e006      	b.n	800483a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	e000      	b.n	800483a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	3720      	adds	r7, #32
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	4613      	mov	r3, r2
 8004850:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b20      	cmp	r3, #32
 800485c:	d153      	bne.n	8004906 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <HAL_UART_Transmit_DMA+0x26>
 8004864:	88fb      	ldrh	r3, [r7, #6]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e04c      	b.n	8004908 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_UART_Transmit_DMA+0x38>
 8004878:	2302      	movs	r3, #2
 800487a:	e045      	b.n	8004908 <HAL_UART_Transmit_DMA+0xc4>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	88fa      	ldrh	r2, [r7, #6]
 800488e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	88fa      	ldrh	r2, [r7, #6]
 8004894:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2221      	movs	r2, #33	; 0x21
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a8:	4a19      	ldr	r2, [pc, #100]	; (8004910 <HAL_UART_Transmit_DMA+0xcc>)
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b0:	4a18      	ldr	r2, [pc, #96]	; (8004914 <HAL_UART_Transmit_DMA+0xd0>)
 80048b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b8:	4a17      	ldr	r2, [pc, #92]	; (8004918 <HAL_UART_Transmit_DMA+0xd4>)
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c0:	2200      	movs	r2, #0
 80048c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80048c4:	f107 0308 	add.w	r3, r7, #8
 80048c8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	6819      	ldr	r1, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3304      	adds	r3, #4
 80048d8:	461a      	mov	r2, r3
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	f7fd f97a 	bl	8001bd4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048e8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004900:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	e000      	b.n	8004908 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004906:	2302      	movs	r3, #2
  }
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	08004de7 	.word	0x08004de7
 8004914:	08004e39 	.word	0x08004e39
 8004918:	08004f21 	.word	0x08004f21

0800491c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	4613      	mov	r3, r2
 8004928:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b20      	cmp	r3, #32
 8004934:	d11d      	bne.n	8004972 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <HAL_UART_Receive_DMA+0x26>
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e016      	b.n	8004974 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_UART_Receive_DMA+0x38>
 8004950:	2302      	movs	r3, #2
 8004952:	e00f      	b.n	8004974 <HAL_UART_Receive_DMA+0x58>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	461a      	mov	r2, r3
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 fb6d 	bl	8005048 <UART_Start_Receive_DMA>
 800496e:	4603      	mov	r3, r0
 8004970:	e000      	b.n	8004974 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004972:	2302      	movs	r3, #2
  }
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	bf14      	ite	ne
 8004996:	2301      	movne	r3, #1
 8004998:	2300      	moveq	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b21      	cmp	r3, #33	; 0x21
 80049a8:	d116      	bne.n	80049d8 <HAL_UART_DMAStop+0x5c>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d013      	beq.n	80049d8 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049be:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d004      	beq.n	80049d2 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fd f960 	bl	8001c92 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fb9c 	bl	8005110 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bf14      	ite	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	2300      	moveq	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b22      	cmp	r3, #34	; 0x22
 80049f8:	d116      	bne.n	8004a28 <HAL_UART_DMAStop+0xac>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d013      	beq.n	8004a28 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a0e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d004      	beq.n	8004a22 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fd f938 	bl	8001c92 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fb89 	bl	800513a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08a      	sub	sp, #40	; 0x28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10d      	bne.n	8004a86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d008      	beq.n	8004a86 <HAL_UART_IRQHandler+0x52>
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fc02 	bl	8005288 <UART_Receive_IT>
      return;
 8004a84:	e17b      	b.n	8004d7e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80b1 	beq.w	8004bf0 <HAL_UART_IRQHandler+0x1bc>
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d105      	bne.n	8004aa4 <HAL_UART_IRQHandler+0x70>
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 80a6 	beq.w	8004bf0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_UART_IRQHandler+0x90>
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d005      	beq.n	8004ac4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	f043 0201 	orr.w	r2, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <HAL_UART_IRQHandler+0xb0>
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	f043 0202 	orr.w	r2, r3, #2
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_UART_IRQHandler+0xd0>
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	f043 0204 	orr.w	r2, r3, #4
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00f      	beq.n	8004b2e <HAL_UART_IRQHandler+0xfa>
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d104      	bne.n	8004b22 <HAL_UART_IRQHandler+0xee>
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d005      	beq.n	8004b2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f043 0208 	orr.w	r2, r3, #8
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 811e 	beq.w	8004d74 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d007      	beq.n	8004b52 <HAL_UART_IRQHandler+0x11e>
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fb9b 	bl	8005288 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <HAL_UART_IRQHandler+0x146>
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d031      	beq.n	8004bde <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fadd 	bl	800513a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d023      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b9c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d013      	beq.n	8004bce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	4a76      	ldr	r2, [pc, #472]	; (8004d84 <HAL_UART_IRQHandler+0x350>)
 8004bac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fd f8a8 	bl	8001d08 <HAL_DMA_Abort_IT>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d016      	beq.n	8004bec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bc8:	4610      	mov	r0, r2
 8004bca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bcc:	e00e      	b.n	8004bec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f8f5 	bl	8004dbe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd4:	e00a      	b.n	8004bec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f8f1 	bl	8004dbe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bdc:	e006      	b.n	8004bec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f8ed 	bl	8004dbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004bea:	e0c3      	b.n	8004d74 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bec:	bf00      	nop
    return;
 8004bee:	e0c1      	b.n	8004d74 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	f040 80a1 	bne.w	8004d3c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 809b 	beq.w	8004d3c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 8095 	beq.w	8004d3c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d04e      	beq.n	8004cd4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004c40:	8a3b      	ldrh	r3, [r7, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 8098 	beq.w	8004d78 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c4c:	8a3a      	ldrh	r2, [r7, #16]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	f080 8092 	bcs.w	8004d78 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	8a3a      	ldrh	r2, [r7, #16]
 8004c58:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d02b      	beq.n	8004cbc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c72:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695a      	ldr	r2, [r3, #20]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0201 	bic.w	r2, r2, #1
 8004c82:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695a      	ldr	r2, [r3, #20]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c92:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0210 	bic.w	r2, r2, #16
 8004cb0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fc ffeb 	bl	8001c92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f87f 	bl	8004dd0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004cd2:	e051      	b.n	8004d78 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d047      	beq.n	8004d7c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004cec:	8a7b      	ldrh	r3, [r7, #18]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d044      	beq.n	8004d7c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d00:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0201 	bic.w	r2, r2, #1
 8004d10:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0210 	bic.w	r2, r2, #16
 8004d2e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d30:	8a7b      	ldrh	r3, [r7, #18]
 8004d32:	4619      	mov	r1, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f84b 	bl	8004dd0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004d3a:	e01f      	b.n	8004d7c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <HAL_UART_IRQHandler+0x324>
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fa32 	bl	80051ba <UART_Transmit_IT>
    return;
 8004d56:	e012      	b.n	8004d7e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00d      	beq.n	8004d7e <HAL_UART_IRQHandler+0x34a>
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fa73 	bl	8005258 <UART_EndTransmit_IT>
    return;
 8004d72:	e004      	b.n	8004d7e <HAL_UART_IRQHandler+0x34a>
    return;
 8004d74:	bf00      	nop
 8004d76:	e002      	b.n	8004d7e <HAL_UART_IRQHandler+0x34a>
      return;
 8004d78:	bf00      	nop
 8004d7a:	e000      	b.n	8004d7e <HAL_UART_IRQHandler+0x34a>
      return;
 8004d7c:	bf00      	nop
  }
}
 8004d7e:	3728      	adds	r7, #40	; 0x28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	08005193 	.word	0x08005193

08004d88 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr

08004dbe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d113      	bne.n	8004e2a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695a      	ldr	r2, [r3, #20]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e16:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e26:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e28:	e002      	b.n	8004e30 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f7fb fefa 	bl	8000c24 <HAL_UART_TxCpltCallback>
}
 8004e30:	bf00      	nop
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f7ff ff9e 	bl	8004d88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e4c:	bf00      	nop
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d12a      	bne.n	8004ec6 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e84:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695a      	ldr	r2, [r3, #20]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0201 	bic.w	r2, r2, #1
 8004e94:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695a      	ldr	r2, [r3, #20]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d107      	bne.n	8004ec6 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0210 	bic.w	r2, r2, #16
 8004ec4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d106      	bne.n	8004edc <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7ff ff7b 	bl	8004dd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004eda:	e002      	b.n	8004ee2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff ff5c 	bl	8004d9a <HAL_UART_RxCpltCallback>
}
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d108      	bne.n	8004f12 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f04:	085b      	lsrs	r3, r3, #1
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	4619      	mov	r1, r3
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f7ff ff60 	bl	8004dd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f10:	e002      	b.n	8004f18 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f7ff ff4a 	bl	8004dac <HAL_UART_RxHalfCpltCallback>
}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bf14      	ite	ne
 8004f40:	2301      	movne	r3, #1
 8004f42:	2300      	moveq	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b21      	cmp	r3, #33	; 0x21
 8004f52:	d108      	bne.n	8004f66 <UART_DMAError+0x46>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004f60:	68b8      	ldr	r0, [r7, #8]
 8004f62:	f000 f8d5 	bl	8005110 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b22      	cmp	r3, #34	; 0x22
 8004f86:	d108      	bne.n	8004f9a <UART_DMAError+0x7a>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2200      	movs	r2, #0
 8004f92:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004f94:	68b8      	ldr	r0, [r7, #8]
 8004f96:	f000 f8d0 	bl	800513a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f043 0210 	orr.w	r2, r3, #16
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fa6:	68b8      	ldr	r0, [r7, #8]
 8004fa8:	f7ff ff09 	bl	8004dbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fac:	bf00      	nop
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc4:	e02c      	b.n	8005020 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fcc:	d028      	beq.n	8005020 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d007      	beq.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fd4:	f7fc fc68 	bl	80018a8 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d21d      	bcs.n	8005020 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ff2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695a      	ldr	r2, [r3, #20]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0201 	bic.w	r2, r2, #1
 8005002:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e00f      	b.n	8005040 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4013      	ands	r3, r2
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	429a      	cmp	r2, r3
 800502e:	bf0c      	ite	eq
 8005030:	2301      	moveq	r3, #1
 8005032:	2300      	movne	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	79fb      	ldrb	r3, [r7, #7]
 800503a:	429a      	cmp	r2, r3
 800503c:	d0c3      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	4613      	mov	r3, r2
 8005054:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	88fa      	ldrh	r2, [r7, #6]
 8005060:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2222      	movs	r2, #34	; 0x22
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	4a23      	ldr	r2, [pc, #140]	; (8005104 <UART_Start_Receive_DMA+0xbc>)
 8005076:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	4a22      	ldr	r2, [pc, #136]	; (8005108 <UART_Start_Receive_DMA+0xc0>)
 800507e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	4a21      	ldr	r2, [pc, #132]	; (800510c <UART_Start_Receive_DMA+0xc4>)
 8005086:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	2200      	movs	r2, #0
 800508e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005090:	f107 0308 	add.w	r3, r7, #8
 8005094:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	f7fc fd94 	bl	8001bd4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80050ac:	2300      	movs	r3, #0
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	613b      	str	r3, [r7, #16]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050d8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695a      	ldr	r2, [r3, #20]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0201 	orr.w	r2, r2, #1
 80050e8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695a      	ldr	r2, [r3, #20]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050f8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	08004e55 	.word	0x08004e55
 8005108:	08004eeb 	.word	0x08004eeb
 800510c:	08004f21 	.word	0x08004f21

08005110 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005126:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	bc80      	pop	{r7}
 8005138:	4770      	bx	lr

0800513a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005150:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695a      	ldr	r2, [r3, #20]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0201 	bic.w	r2, r2, #1
 8005160:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	2b01      	cmp	r3, #1
 8005168:	d107      	bne.n	800517a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0210 	bic.w	r2, r2, #16
 8005178:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7ff fe06 	bl	8004dbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b21      	cmp	r3, #33	; 0x21
 80051cc:	d13e      	bne.n	800524c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d6:	d114      	bne.n	8005202 <UART_Transmit_IT+0x48>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d110      	bne.n	8005202 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	1c9a      	adds	r2, r3, #2
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	621a      	str	r2, [r3, #32]
 8005200:	e008      	b.n	8005214 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	1c59      	adds	r1, r3, #1
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6211      	str	r1, [r2, #32]
 800520c:	781a      	ldrb	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29b      	uxth	r3, r3
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4619      	mov	r1, r3
 8005222:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10f      	bne.n	8005248 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005236:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005246:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr

08005258 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800526e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7fb fcd3 	bl	8000c24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b22      	cmp	r3, #34	; 0x22
 800529a:	f040 8099 	bne.w	80053d0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a6:	d117      	bne.n	80052d8 <UART_Receive_IT+0x50>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d113      	bne.n	80052d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d0:	1c9a      	adds	r2, r3, #2
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	629a      	str	r2, [r3, #40]	; 0x28
 80052d6:	e026      	b.n	8005326 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ea:	d007      	beq.n	80052fc <UART_Receive_IT+0x74>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <UART_Receive_IT+0x82>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d106      	bne.n	800530a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	b2da      	uxtb	r2, r3
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	e008      	b.n	800531c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005316:	b2da      	uxtb	r2, r3
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29b      	uxth	r3, r3
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	4619      	mov	r1, r3
 8005334:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005336:	2b00      	cmp	r3, #0
 8005338:	d148      	bne.n	80053cc <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0220 	bic.w	r2, r2, #32
 8005348:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005358:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695a      	ldr	r2, [r3, #20]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	2b01      	cmp	r3, #1
 8005378:	d123      	bne.n	80053c2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0210 	bic.w	r2, r2, #16
 800538e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	2b10      	cmp	r3, #16
 800539c:	d10a      	bne.n	80053b4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff fd08 	bl	8004dd0 <HAL_UARTEx_RxEventCallback>
 80053c0:	e002      	b.n	80053c8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff fce9 	bl	8004d9a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	e002      	b.n	80053d2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e000      	b.n	80053d2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005416:	f023 030c 	bic.w	r3, r3, #12
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	430b      	orrs	r3, r1
 8005422:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a2c      	ldr	r2, [pc, #176]	; (80054f0 <UART_SetConfig+0x114>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d103      	bne.n	800544c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005444:	f7fd fbbe 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	e002      	b.n	8005452 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800544c:	f7fd fba6 	bl	8002b9c <HAL_RCC_GetPCLK1Freq>
 8005450:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	009a      	lsls	r2, r3, #2
 800545c:	441a      	add	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	fbb2 f3f3 	udiv	r3, r2, r3
 8005468:	4a22      	ldr	r2, [pc, #136]	; (80054f4 <UART_SetConfig+0x118>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	0119      	lsls	r1, r3, #4
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	009a      	lsls	r2, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	fbb2 f2f3 	udiv	r2, r2, r3
 8005488:	4b1a      	ldr	r3, [pc, #104]	; (80054f4 <UART_SetConfig+0x118>)
 800548a:	fba3 0302 	umull	r0, r3, r3, r2
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	2064      	movs	r0, #100	; 0x64
 8005492:	fb00 f303 	mul.w	r3, r0, r3
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	3332      	adds	r3, #50	; 0x32
 800549c:	4a15      	ldr	r2, [pc, #84]	; (80054f4 <UART_SetConfig+0x118>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054a8:	4419      	add	r1, r3
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009a      	lsls	r2, r3, #2
 80054b4:	441a      	add	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80054c0:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <UART_SetConfig+0x118>)
 80054c2:	fba3 0302 	umull	r0, r3, r3, r2
 80054c6:	095b      	lsrs	r3, r3, #5
 80054c8:	2064      	movs	r0, #100	; 0x64
 80054ca:	fb00 f303 	mul.w	r3, r0, r3
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	3332      	adds	r3, #50	; 0x32
 80054d4:	4a07      	ldr	r2, [pc, #28]	; (80054f4 <UART_SetConfig+0x118>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	f003 020f 	and.w	r2, r3, #15
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	440a      	add	r2, r1
 80054e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40013800 	.word	0x40013800
 80054f4:	51eb851f 	.word	0x51eb851f

080054f8 <__errno>:
 80054f8:	4b01      	ldr	r3, [pc, #4]	; (8005500 <__errno+0x8>)
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	200002a4 	.word	0x200002a4

08005504 <__libc_init_array>:
 8005504:	b570      	push	{r4, r5, r6, lr}
 8005506:	2600      	movs	r6, #0
 8005508:	4d0c      	ldr	r5, [pc, #48]	; (800553c <__libc_init_array+0x38>)
 800550a:	4c0d      	ldr	r4, [pc, #52]	; (8005540 <__libc_init_array+0x3c>)
 800550c:	1b64      	subs	r4, r4, r5
 800550e:	10a4      	asrs	r4, r4, #2
 8005510:	42a6      	cmp	r6, r4
 8005512:	d109      	bne.n	8005528 <__libc_init_array+0x24>
 8005514:	f001 f84c 	bl	80065b0 <_init>
 8005518:	2600      	movs	r6, #0
 800551a:	4d0a      	ldr	r5, [pc, #40]	; (8005544 <__libc_init_array+0x40>)
 800551c:	4c0a      	ldr	r4, [pc, #40]	; (8005548 <__libc_init_array+0x44>)
 800551e:	1b64      	subs	r4, r4, r5
 8005520:	10a4      	asrs	r4, r4, #2
 8005522:	42a6      	cmp	r6, r4
 8005524:	d105      	bne.n	8005532 <__libc_init_array+0x2e>
 8005526:	bd70      	pop	{r4, r5, r6, pc}
 8005528:	f855 3b04 	ldr.w	r3, [r5], #4
 800552c:	4798      	blx	r3
 800552e:	3601      	adds	r6, #1
 8005530:	e7ee      	b.n	8005510 <__libc_init_array+0xc>
 8005532:	f855 3b04 	ldr.w	r3, [r5], #4
 8005536:	4798      	blx	r3
 8005538:	3601      	adds	r6, #1
 800553a:	e7f2      	b.n	8005522 <__libc_init_array+0x1e>
 800553c:	080067e8 	.word	0x080067e8
 8005540:	080067e8 	.word	0x080067e8
 8005544:	080067e8 	.word	0x080067e8
 8005548:	080067ec 	.word	0x080067ec

0800554c <memset>:
 800554c:	4603      	mov	r3, r0
 800554e:	4402      	add	r2, r0
 8005550:	4293      	cmp	r3, r2
 8005552:	d100      	bne.n	8005556 <memset+0xa>
 8005554:	4770      	bx	lr
 8005556:	f803 1b01 	strb.w	r1, [r3], #1
 800555a:	e7f9      	b.n	8005550 <memset+0x4>

0800555c <iprintf>:
 800555c:	b40f      	push	{r0, r1, r2, r3}
 800555e:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <iprintf+0x2c>)
 8005560:	b513      	push	{r0, r1, r4, lr}
 8005562:	681c      	ldr	r4, [r3, #0]
 8005564:	b124      	cbz	r4, 8005570 <iprintf+0x14>
 8005566:	69a3      	ldr	r3, [r4, #24]
 8005568:	b913      	cbnz	r3, 8005570 <iprintf+0x14>
 800556a:	4620      	mov	r0, r4
 800556c:	f000 fa5a 	bl	8005a24 <__sinit>
 8005570:	ab05      	add	r3, sp, #20
 8005572:	4620      	mov	r0, r4
 8005574:	9a04      	ldr	r2, [sp, #16]
 8005576:	68a1      	ldr	r1, [r4, #8]
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	f000 fc5d 	bl	8005e38 <_vfiprintf_r>
 800557e:	b002      	add	sp, #8
 8005580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005584:	b004      	add	sp, #16
 8005586:	4770      	bx	lr
 8005588:	200002a4 	.word	0x200002a4

0800558c <_puts_r>:
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	460e      	mov	r6, r1
 8005590:	4605      	mov	r5, r0
 8005592:	b118      	cbz	r0, 800559c <_puts_r+0x10>
 8005594:	6983      	ldr	r3, [r0, #24]
 8005596:	b90b      	cbnz	r3, 800559c <_puts_r+0x10>
 8005598:	f000 fa44 	bl	8005a24 <__sinit>
 800559c:	69ab      	ldr	r3, [r5, #24]
 800559e:	68ac      	ldr	r4, [r5, #8]
 80055a0:	b913      	cbnz	r3, 80055a8 <_puts_r+0x1c>
 80055a2:	4628      	mov	r0, r5
 80055a4:	f000 fa3e 	bl	8005a24 <__sinit>
 80055a8:	4b2c      	ldr	r3, [pc, #176]	; (800565c <_puts_r+0xd0>)
 80055aa:	429c      	cmp	r4, r3
 80055ac:	d120      	bne.n	80055f0 <_puts_r+0x64>
 80055ae:	686c      	ldr	r4, [r5, #4]
 80055b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055b2:	07db      	lsls	r3, r3, #31
 80055b4:	d405      	bmi.n	80055c2 <_puts_r+0x36>
 80055b6:	89a3      	ldrh	r3, [r4, #12]
 80055b8:	0598      	lsls	r0, r3, #22
 80055ba:	d402      	bmi.n	80055c2 <_puts_r+0x36>
 80055bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055be:	f000 facf 	bl	8005b60 <__retarget_lock_acquire_recursive>
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	0719      	lsls	r1, r3, #28
 80055c6:	d51d      	bpl.n	8005604 <_puts_r+0x78>
 80055c8:	6923      	ldr	r3, [r4, #16]
 80055ca:	b1db      	cbz	r3, 8005604 <_puts_r+0x78>
 80055cc:	3e01      	subs	r6, #1
 80055ce:	68a3      	ldr	r3, [r4, #8]
 80055d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055d4:	3b01      	subs	r3, #1
 80055d6:	60a3      	str	r3, [r4, #8]
 80055d8:	bb39      	cbnz	r1, 800562a <_puts_r+0x9e>
 80055da:	2b00      	cmp	r3, #0
 80055dc:	da38      	bge.n	8005650 <_puts_r+0xc4>
 80055de:	4622      	mov	r2, r4
 80055e0:	210a      	movs	r1, #10
 80055e2:	4628      	mov	r0, r5
 80055e4:	f000 f848 	bl	8005678 <__swbuf_r>
 80055e8:	3001      	adds	r0, #1
 80055ea:	d011      	beq.n	8005610 <_puts_r+0x84>
 80055ec:	250a      	movs	r5, #10
 80055ee:	e011      	b.n	8005614 <_puts_r+0x88>
 80055f0:	4b1b      	ldr	r3, [pc, #108]	; (8005660 <_puts_r+0xd4>)
 80055f2:	429c      	cmp	r4, r3
 80055f4:	d101      	bne.n	80055fa <_puts_r+0x6e>
 80055f6:	68ac      	ldr	r4, [r5, #8]
 80055f8:	e7da      	b.n	80055b0 <_puts_r+0x24>
 80055fa:	4b1a      	ldr	r3, [pc, #104]	; (8005664 <_puts_r+0xd8>)
 80055fc:	429c      	cmp	r4, r3
 80055fe:	bf08      	it	eq
 8005600:	68ec      	ldreq	r4, [r5, #12]
 8005602:	e7d5      	b.n	80055b0 <_puts_r+0x24>
 8005604:	4621      	mov	r1, r4
 8005606:	4628      	mov	r0, r5
 8005608:	f000 f888 	bl	800571c <__swsetup_r>
 800560c:	2800      	cmp	r0, #0
 800560e:	d0dd      	beq.n	80055cc <_puts_r+0x40>
 8005610:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005614:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005616:	07da      	lsls	r2, r3, #31
 8005618:	d405      	bmi.n	8005626 <_puts_r+0x9a>
 800561a:	89a3      	ldrh	r3, [r4, #12]
 800561c:	059b      	lsls	r3, r3, #22
 800561e:	d402      	bmi.n	8005626 <_puts_r+0x9a>
 8005620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005622:	f000 fa9e 	bl	8005b62 <__retarget_lock_release_recursive>
 8005626:	4628      	mov	r0, r5
 8005628:	bd70      	pop	{r4, r5, r6, pc}
 800562a:	2b00      	cmp	r3, #0
 800562c:	da04      	bge.n	8005638 <_puts_r+0xac>
 800562e:	69a2      	ldr	r2, [r4, #24]
 8005630:	429a      	cmp	r2, r3
 8005632:	dc06      	bgt.n	8005642 <_puts_r+0xb6>
 8005634:	290a      	cmp	r1, #10
 8005636:	d004      	beq.n	8005642 <_puts_r+0xb6>
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	6022      	str	r2, [r4, #0]
 800563e:	7019      	strb	r1, [r3, #0]
 8005640:	e7c5      	b.n	80055ce <_puts_r+0x42>
 8005642:	4622      	mov	r2, r4
 8005644:	4628      	mov	r0, r5
 8005646:	f000 f817 	bl	8005678 <__swbuf_r>
 800564a:	3001      	adds	r0, #1
 800564c:	d1bf      	bne.n	80055ce <_puts_r+0x42>
 800564e:	e7df      	b.n	8005610 <_puts_r+0x84>
 8005650:	250a      	movs	r5, #10
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	6022      	str	r2, [r4, #0]
 8005658:	701d      	strb	r5, [r3, #0]
 800565a:	e7db      	b.n	8005614 <_puts_r+0x88>
 800565c:	08006774 	.word	0x08006774
 8005660:	08006794 	.word	0x08006794
 8005664:	08006754 	.word	0x08006754

08005668 <puts>:
 8005668:	4b02      	ldr	r3, [pc, #8]	; (8005674 <puts+0xc>)
 800566a:	4601      	mov	r1, r0
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	f7ff bf8d 	b.w	800558c <_puts_r>
 8005672:	bf00      	nop
 8005674:	200002a4 	.word	0x200002a4

08005678 <__swbuf_r>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	460e      	mov	r6, r1
 800567c:	4614      	mov	r4, r2
 800567e:	4605      	mov	r5, r0
 8005680:	b118      	cbz	r0, 800568a <__swbuf_r+0x12>
 8005682:	6983      	ldr	r3, [r0, #24]
 8005684:	b90b      	cbnz	r3, 800568a <__swbuf_r+0x12>
 8005686:	f000 f9cd 	bl	8005a24 <__sinit>
 800568a:	4b21      	ldr	r3, [pc, #132]	; (8005710 <__swbuf_r+0x98>)
 800568c:	429c      	cmp	r4, r3
 800568e:	d12b      	bne.n	80056e8 <__swbuf_r+0x70>
 8005690:	686c      	ldr	r4, [r5, #4]
 8005692:	69a3      	ldr	r3, [r4, #24]
 8005694:	60a3      	str	r3, [r4, #8]
 8005696:	89a3      	ldrh	r3, [r4, #12]
 8005698:	071a      	lsls	r2, r3, #28
 800569a:	d52f      	bpl.n	80056fc <__swbuf_r+0x84>
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	b36b      	cbz	r3, 80056fc <__swbuf_r+0x84>
 80056a0:	6923      	ldr	r3, [r4, #16]
 80056a2:	6820      	ldr	r0, [r4, #0]
 80056a4:	b2f6      	uxtb	r6, r6
 80056a6:	1ac0      	subs	r0, r0, r3
 80056a8:	6963      	ldr	r3, [r4, #20]
 80056aa:	4637      	mov	r7, r6
 80056ac:	4283      	cmp	r3, r0
 80056ae:	dc04      	bgt.n	80056ba <__swbuf_r+0x42>
 80056b0:	4621      	mov	r1, r4
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 f922 	bl	80058fc <_fflush_r>
 80056b8:	bb30      	cbnz	r0, 8005708 <__swbuf_r+0x90>
 80056ba:	68a3      	ldr	r3, [r4, #8]
 80056bc:	3001      	adds	r0, #1
 80056be:	3b01      	subs	r3, #1
 80056c0:	60a3      	str	r3, [r4, #8]
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	6022      	str	r2, [r4, #0]
 80056c8:	701e      	strb	r6, [r3, #0]
 80056ca:	6963      	ldr	r3, [r4, #20]
 80056cc:	4283      	cmp	r3, r0
 80056ce:	d004      	beq.n	80056da <__swbuf_r+0x62>
 80056d0:	89a3      	ldrh	r3, [r4, #12]
 80056d2:	07db      	lsls	r3, r3, #31
 80056d4:	d506      	bpl.n	80056e4 <__swbuf_r+0x6c>
 80056d6:	2e0a      	cmp	r6, #10
 80056d8:	d104      	bne.n	80056e4 <__swbuf_r+0x6c>
 80056da:	4621      	mov	r1, r4
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 f90d 	bl	80058fc <_fflush_r>
 80056e2:	b988      	cbnz	r0, 8005708 <__swbuf_r+0x90>
 80056e4:	4638      	mov	r0, r7
 80056e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e8:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <__swbuf_r+0x9c>)
 80056ea:	429c      	cmp	r4, r3
 80056ec:	d101      	bne.n	80056f2 <__swbuf_r+0x7a>
 80056ee:	68ac      	ldr	r4, [r5, #8]
 80056f0:	e7cf      	b.n	8005692 <__swbuf_r+0x1a>
 80056f2:	4b09      	ldr	r3, [pc, #36]	; (8005718 <__swbuf_r+0xa0>)
 80056f4:	429c      	cmp	r4, r3
 80056f6:	bf08      	it	eq
 80056f8:	68ec      	ldreq	r4, [r5, #12]
 80056fa:	e7ca      	b.n	8005692 <__swbuf_r+0x1a>
 80056fc:	4621      	mov	r1, r4
 80056fe:	4628      	mov	r0, r5
 8005700:	f000 f80c 	bl	800571c <__swsetup_r>
 8005704:	2800      	cmp	r0, #0
 8005706:	d0cb      	beq.n	80056a0 <__swbuf_r+0x28>
 8005708:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800570c:	e7ea      	b.n	80056e4 <__swbuf_r+0x6c>
 800570e:	bf00      	nop
 8005710:	08006774 	.word	0x08006774
 8005714:	08006794 	.word	0x08006794
 8005718:	08006754 	.word	0x08006754

0800571c <__swsetup_r>:
 800571c:	4b32      	ldr	r3, [pc, #200]	; (80057e8 <__swsetup_r+0xcc>)
 800571e:	b570      	push	{r4, r5, r6, lr}
 8005720:	681d      	ldr	r5, [r3, #0]
 8005722:	4606      	mov	r6, r0
 8005724:	460c      	mov	r4, r1
 8005726:	b125      	cbz	r5, 8005732 <__swsetup_r+0x16>
 8005728:	69ab      	ldr	r3, [r5, #24]
 800572a:	b913      	cbnz	r3, 8005732 <__swsetup_r+0x16>
 800572c:	4628      	mov	r0, r5
 800572e:	f000 f979 	bl	8005a24 <__sinit>
 8005732:	4b2e      	ldr	r3, [pc, #184]	; (80057ec <__swsetup_r+0xd0>)
 8005734:	429c      	cmp	r4, r3
 8005736:	d10f      	bne.n	8005758 <__swsetup_r+0x3c>
 8005738:	686c      	ldr	r4, [r5, #4]
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005740:	0719      	lsls	r1, r3, #28
 8005742:	d42c      	bmi.n	800579e <__swsetup_r+0x82>
 8005744:	06dd      	lsls	r5, r3, #27
 8005746:	d411      	bmi.n	800576c <__swsetup_r+0x50>
 8005748:	2309      	movs	r3, #9
 800574a:	6033      	str	r3, [r6, #0]
 800574c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005754:	81a3      	strh	r3, [r4, #12]
 8005756:	e03e      	b.n	80057d6 <__swsetup_r+0xba>
 8005758:	4b25      	ldr	r3, [pc, #148]	; (80057f0 <__swsetup_r+0xd4>)
 800575a:	429c      	cmp	r4, r3
 800575c:	d101      	bne.n	8005762 <__swsetup_r+0x46>
 800575e:	68ac      	ldr	r4, [r5, #8]
 8005760:	e7eb      	b.n	800573a <__swsetup_r+0x1e>
 8005762:	4b24      	ldr	r3, [pc, #144]	; (80057f4 <__swsetup_r+0xd8>)
 8005764:	429c      	cmp	r4, r3
 8005766:	bf08      	it	eq
 8005768:	68ec      	ldreq	r4, [r5, #12]
 800576a:	e7e6      	b.n	800573a <__swsetup_r+0x1e>
 800576c:	0758      	lsls	r0, r3, #29
 800576e:	d512      	bpl.n	8005796 <__swsetup_r+0x7a>
 8005770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005772:	b141      	cbz	r1, 8005786 <__swsetup_r+0x6a>
 8005774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005778:	4299      	cmp	r1, r3
 800577a:	d002      	beq.n	8005782 <__swsetup_r+0x66>
 800577c:	4630      	mov	r0, r6
 800577e:	f000 fa57 	bl	8005c30 <_free_r>
 8005782:	2300      	movs	r3, #0
 8005784:	6363      	str	r3, [r4, #52]	; 0x34
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800578c:	81a3      	strh	r3, [r4, #12]
 800578e:	2300      	movs	r3, #0
 8005790:	6063      	str	r3, [r4, #4]
 8005792:	6923      	ldr	r3, [r4, #16]
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	89a3      	ldrh	r3, [r4, #12]
 8005798:	f043 0308 	orr.w	r3, r3, #8
 800579c:	81a3      	strh	r3, [r4, #12]
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	b94b      	cbnz	r3, 80057b6 <__swsetup_r+0x9a>
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ac:	d003      	beq.n	80057b6 <__swsetup_r+0x9a>
 80057ae:	4621      	mov	r1, r4
 80057b0:	4630      	mov	r0, r6
 80057b2:	f000 f9fd 	bl	8005bb0 <__smakebuf_r>
 80057b6:	89a0      	ldrh	r0, [r4, #12]
 80057b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057bc:	f010 0301 	ands.w	r3, r0, #1
 80057c0:	d00a      	beq.n	80057d8 <__swsetup_r+0xbc>
 80057c2:	2300      	movs	r3, #0
 80057c4:	60a3      	str	r3, [r4, #8]
 80057c6:	6963      	ldr	r3, [r4, #20]
 80057c8:	425b      	negs	r3, r3
 80057ca:	61a3      	str	r3, [r4, #24]
 80057cc:	6923      	ldr	r3, [r4, #16]
 80057ce:	b943      	cbnz	r3, 80057e2 <__swsetup_r+0xc6>
 80057d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057d4:	d1ba      	bne.n	800574c <__swsetup_r+0x30>
 80057d6:	bd70      	pop	{r4, r5, r6, pc}
 80057d8:	0781      	lsls	r1, r0, #30
 80057da:	bf58      	it	pl
 80057dc:	6963      	ldrpl	r3, [r4, #20]
 80057de:	60a3      	str	r3, [r4, #8]
 80057e0:	e7f4      	b.n	80057cc <__swsetup_r+0xb0>
 80057e2:	2000      	movs	r0, #0
 80057e4:	e7f7      	b.n	80057d6 <__swsetup_r+0xba>
 80057e6:	bf00      	nop
 80057e8:	200002a4 	.word	0x200002a4
 80057ec:	08006774 	.word	0x08006774
 80057f0:	08006794 	.word	0x08006794
 80057f4:	08006754 	.word	0x08006754

080057f8 <__sflush_r>:
 80057f8:	898a      	ldrh	r2, [r1, #12]
 80057fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fc:	4605      	mov	r5, r0
 80057fe:	0710      	lsls	r0, r2, #28
 8005800:	460c      	mov	r4, r1
 8005802:	d457      	bmi.n	80058b4 <__sflush_r+0xbc>
 8005804:	684b      	ldr	r3, [r1, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	dc04      	bgt.n	8005814 <__sflush_r+0x1c>
 800580a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	dc01      	bgt.n	8005814 <__sflush_r+0x1c>
 8005810:	2000      	movs	r0, #0
 8005812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005816:	2e00      	cmp	r6, #0
 8005818:	d0fa      	beq.n	8005810 <__sflush_r+0x18>
 800581a:	2300      	movs	r3, #0
 800581c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005820:	682f      	ldr	r7, [r5, #0]
 8005822:	602b      	str	r3, [r5, #0]
 8005824:	d032      	beq.n	800588c <__sflush_r+0x94>
 8005826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	075a      	lsls	r2, r3, #29
 800582c:	d505      	bpl.n	800583a <__sflush_r+0x42>
 800582e:	6863      	ldr	r3, [r4, #4]
 8005830:	1ac0      	subs	r0, r0, r3
 8005832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005834:	b10b      	cbz	r3, 800583a <__sflush_r+0x42>
 8005836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005838:	1ac0      	subs	r0, r0, r3
 800583a:	2300      	movs	r3, #0
 800583c:	4602      	mov	r2, r0
 800583e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005840:	4628      	mov	r0, r5
 8005842:	6a21      	ldr	r1, [r4, #32]
 8005844:	47b0      	blx	r6
 8005846:	1c43      	adds	r3, r0, #1
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	d106      	bne.n	800585a <__sflush_r+0x62>
 800584c:	6829      	ldr	r1, [r5, #0]
 800584e:	291d      	cmp	r1, #29
 8005850:	d82c      	bhi.n	80058ac <__sflush_r+0xb4>
 8005852:	4a29      	ldr	r2, [pc, #164]	; (80058f8 <__sflush_r+0x100>)
 8005854:	40ca      	lsrs	r2, r1
 8005856:	07d6      	lsls	r6, r2, #31
 8005858:	d528      	bpl.n	80058ac <__sflush_r+0xb4>
 800585a:	2200      	movs	r2, #0
 800585c:	6062      	str	r2, [r4, #4]
 800585e:	6922      	ldr	r2, [r4, #16]
 8005860:	04d9      	lsls	r1, r3, #19
 8005862:	6022      	str	r2, [r4, #0]
 8005864:	d504      	bpl.n	8005870 <__sflush_r+0x78>
 8005866:	1c42      	adds	r2, r0, #1
 8005868:	d101      	bne.n	800586e <__sflush_r+0x76>
 800586a:	682b      	ldr	r3, [r5, #0]
 800586c:	b903      	cbnz	r3, 8005870 <__sflush_r+0x78>
 800586e:	6560      	str	r0, [r4, #84]	; 0x54
 8005870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005872:	602f      	str	r7, [r5, #0]
 8005874:	2900      	cmp	r1, #0
 8005876:	d0cb      	beq.n	8005810 <__sflush_r+0x18>
 8005878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800587c:	4299      	cmp	r1, r3
 800587e:	d002      	beq.n	8005886 <__sflush_r+0x8e>
 8005880:	4628      	mov	r0, r5
 8005882:	f000 f9d5 	bl	8005c30 <_free_r>
 8005886:	2000      	movs	r0, #0
 8005888:	6360      	str	r0, [r4, #52]	; 0x34
 800588a:	e7c2      	b.n	8005812 <__sflush_r+0x1a>
 800588c:	6a21      	ldr	r1, [r4, #32]
 800588e:	2301      	movs	r3, #1
 8005890:	4628      	mov	r0, r5
 8005892:	47b0      	blx	r6
 8005894:	1c41      	adds	r1, r0, #1
 8005896:	d1c7      	bne.n	8005828 <__sflush_r+0x30>
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0c4      	beq.n	8005828 <__sflush_r+0x30>
 800589e:	2b1d      	cmp	r3, #29
 80058a0:	d001      	beq.n	80058a6 <__sflush_r+0xae>
 80058a2:	2b16      	cmp	r3, #22
 80058a4:	d101      	bne.n	80058aa <__sflush_r+0xb2>
 80058a6:	602f      	str	r7, [r5, #0]
 80058a8:	e7b2      	b.n	8005810 <__sflush_r+0x18>
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	e7ae      	b.n	8005812 <__sflush_r+0x1a>
 80058b4:	690f      	ldr	r7, [r1, #16]
 80058b6:	2f00      	cmp	r7, #0
 80058b8:	d0aa      	beq.n	8005810 <__sflush_r+0x18>
 80058ba:	0793      	lsls	r3, r2, #30
 80058bc:	bf18      	it	ne
 80058be:	2300      	movne	r3, #0
 80058c0:	680e      	ldr	r6, [r1, #0]
 80058c2:	bf08      	it	eq
 80058c4:	694b      	ldreq	r3, [r1, #20]
 80058c6:	1bf6      	subs	r6, r6, r7
 80058c8:	600f      	str	r7, [r1, #0]
 80058ca:	608b      	str	r3, [r1, #8]
 80058cc:	2e00      	cmp	r6, #0
 80058ce:	dd9f      	ble.n	8005810 <__sflush_r+0x18>
 80058d0:	4633      	mov	r3, r6
 80058d2:	463a      	mov	r2, r7
 80058d4:	4628      	mov	r0, r5
 80058d6:	6a21      	ldr	r1, [r4, #32]
 80058d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80058dc:	47e0      	blx	ip
 80058de:	2800      	cmp	r0, #0
 80058e0:	dc06      	bgt.n	80058f0 <__sflush_r+0xf8>
 80058e2:	89a3      	ldrh	r3, [r4, #12]
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ec:	81a3      	strh	r3, [r4, #12]
 80058ee:	e790      	b.n	8005812 <__sflush_r+0x1a>
 80058f0:	4407      	add	r7, r0
 80058f2:	1a36      	subs	r6, r6, r0
 80058f4:	e7ea      	b.n	80058cc <__sflush_r+0xd4>
 80058f6:	bf00      	nop
 80058f8:	20400001 	.word	0x20400001

080058fc <_fflush_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	690b      	ldr	r3, [r1, #16]
 8005900:	4605      	mov	r5, r0
 8005902:	460c      	mov	r4, r1
 8005904:	b913      	cbnz	r3, 800590c <_fflush_r+0x10>
 8005906:	2500      	movs	r5, #0
 8005908:	4628      	mov	r0, r5
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	b118      	cbz	r0, 8005916 <_fflush_r+0x1a>
 800590e:	6983      	ldr	r3, [r0, #24]
 8005910:	b90b      	cbnz	r3, 8005916 <_fflush_r+0x1a>
 8005912:	f000 f887 	bl	8005a24 <__sinit>
 8005916:	4b14      	ldr	r3, [pc, #80]	; (8005968 <_fflush_r+0x6c>)
 8005918:	429c      	cmp	r4, r3
 800591a:	d11b      	bne.n	8005954 <_fflush_r+0x58>
 800591c:	686c      	ldr	r4, [r5, #4]
 800591e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0ef      	beq.n	8005906 <_fflush_r+0xa>
 8005926:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005928:	07d0      	lsls	r0, r2, #31
 800592a:	d404      	bmi.n	8005936 <_fflush_r+0x3a>
 800592c:	0599      	lsls	r1, r3, #22
 800592e:	d402      	bmi.n	8005936 <_fflush_r+0x3a>
 8005930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005932:	f000 f915 	bl	8005b60 <__retarget_lock_acquire_recursive>
 8005936:	4628      	mov	r0, r5
 8005938:	4621      	mov	r1, r4
 800593a:	f7ff ff5d 	bl	80057f8 <__sflush_r>
 800593e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005940:	4605      	mov	r5, r0
 8005942:	07da      	lsls	r2, r3, #31
 8005944:	d4e0      	bmi.n	8005908 <_fflush_r+0xc>
 8005946:	89a3      	ldrh	r3, [r4, #12]
 8005948:	059b      	lsls	r3, r3, #22
 800594a:	d4dd      	bmi.n	8005908 <_fflush_r+0xc>
 800594c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800594e:	f000 f908 	bl	8005b62 <__retarget_lock_release_recursive>
 8005952:	e7d9      	b.n	8005908 <_fflush_r+0xc>
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <_fflush_r+0x70>)
 8005956:	429c      	cmp	r4, r3
 8005958:	d101      	bne.n	800595e <_fflush_r+0x62>
 800595a:	68ac      	ldr	r4, [r5, #8]
 800595c:	e7df      	b.n	800591e <_fflush_r+0x22>
 800595e:	4b04      	ldr	r3, [pc, #16]	; (8005970 <_fflush_r+0x74>)
 8005960:	429c      	cmp	r4, r3
 8005962:	bf08      	it	eq
 8005964:	68ec      	ldreq	r4, [r5, #12]
 8005966:	e7da      	b.n	800591e <_fflush_r+0x22>
 8005968:	08006774 	.word	0x08006774
 800596c:	08006794 	.word	0x08006794
 8005970:	08006754 	.word	0x08006754

08005974 <std>:
 8005974:	2300      	movs	r3, #0
 8005976:	b510      	push	{r4, lr}
 8005978:	4604      	mov	r4, r0
 800597a:	e9c0 3300 	strd	r3, r3, [r0]
 800597e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005982:	6083      	str	r3, [r0, #8]
 8005984:	8181      	strh	r1, [r0, #12]
 8005986:	6643      	str	r3, [r0, #100]	; 0x64
 8005988:	81c2      	strh	r2, [r0, #14]
 800598a:	6183      	str	r3, [r0, #24]
 800598c:	4619      	mov	r1, r3
 800598e:	2208      	movs	r2, #8
 8005990:	305c      	adds	r0, #92	; 0x5c
 8005992:	f7ff fddb 	bl	800554c <memset>
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <std+0x38>)
 8005998:	6224      	str	r4, [r4, #32]
 800599a:	6263      	str	r3, [r4, #36]	; 0x24
 800599c:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <std+0x3c>)
 800599e:	62a3      	str	r3, [r4, #40]	; 0x28
 80059a0:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <std+0x40>)
 80059a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059a4:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <std+0x44>)
 80059a6:	6323      	str	r3, [r4, #48]	; 0x30
 80059a8:	bd10      	pop	{r4, pc}
 80059aa:	bf00      	nop
 80059ac:	080063e5 	.word	0x080063e5
 80059b0:	08006407 	.word	0x08006407
 80059b4:	0800643f 	.word	0x0800643f
 80059b8:	08006463 	.word	0x08006463

080059bc <_cleanup_r>:
 80059bc:	4901      	ldr	r1, [pc, #4]	; (80059c4 <_cleanup_r+0x8>)
 80059be:	f000 b8af 	b.w	8005b20 <_fwalk_reent>
 80059c2:	bf00      	nop
 80059c4:	080058fd 	.word	0x080058fd

080059c8 <__sfmoreglue>:
 80059c8:	2268      	movs	r2, #104	; 0x68
 80059ca:	b570      	push	{r4, r5, r6, lr}
 80059cc:	1e4d      	subs	r5, r1, #1
 80059ce:	4355      	muls	r5, r2
 80059d0:	460e      	mov	r6, r1
 80059d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059d6:	f000 f993 	bl	8005d00 <_malloc_r>
 80059da:	4604      	mov	r4, r0
 80059dc:	b140      	cbz	r0, 80059f0 <__sfmoreglue+0x28>
 80059de:	2100      	movs	r1, #0
 80059e0:	e9c0 1600 	strd	r1, r6, [r0]
 80059e4:	300c      	adds	r0, #12
 80059e6:	60a0      	str	r0, [r4, #8]
 80059e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059ec:	f7ff fdae 	bl	800554c <memset>
 80059f0:	4620      	mov	r0, r4
 80059f2:	bd70      	pop	{r4, r5, r6, pc}

080059f4 <__sfp_lock_acquire>:
 80059f4:	4801      	ldr	r0, [pc, #4]	; (80059fc <__sfp_lock_acquire+0x8>)
 80059f6:	f000 b8b3 	b.w	8005b60 <__retarget_lock_acquire_recursive>
 80059fa:	bf00      	nop
 80059fc:	200006f5 	.word	0x200006f5

08005a00 <__sfp_lock_release>:
 8005a00:	4801      	ldr	r0, [pc, #4]	; (8005a08 <__sfp_lock_release+0x8>)
 8005a02:	f000 b8ae 	b.w	8005b62 <__retarget_lock_release_recursive>
 8005a06:	bf00      	nop
 8005a08:	200006f5 	.word	0x200006f5

08005a0c <__sinit_lock_acquire>:
 8005a0c:	4801      	ldr	r0, [pc, #4]	; (8005a14 <__sinit_lock_acquire+0x8>)
 8005a0e:	f000 b8a7 	b.w	8005b60 <__retarget_lock_acquire_recursive>
 8005a12:	bf00      	nop
 8005a14:	200006f6 	.word	0x200006f6

08005a18 <__sinit_lock_release>:
 8005a18:	4801      	ldr	r0, [pc, #4]	; (8005a20 <__sinit_lock_release+0x8>)
 8005a1a:	f000 b8a2 	b.w	8005b62 <__retarget_lock_release_recursive>
 8005a1e:	bf00      	nop
 8005a20:	200006f6 	.word	0x200006f6

08005a24 <__sinit>:
 8005a24:	b510      	push	{r4, lr}
 8005a26:	4604      	mov	r4, r0
 8005a28:	f7ff fff0 	bl	8005a0c <__sinit_lock_acquire>
 8005a2c:	69a3      	ldr	r3, [r4, #24]
 8005a2e:	b11b      	cbz	r3, 8005a38 <__sinit+0x14>
 8005a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a34:	f7ff bff0 	b.w	8005a18 <__sinit_lock_release>
 8005a38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a3c:	6523      	str	r3, [r4, #80]	; 0x50
 8005a3e:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <__sinit+0x68>)
 8005a40:	4a13      	ldr	r2, [pc, #76]	; (8005a90 <__sinit+0x6c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a46:	42a3      	cmp	r3, r4
 8005a48:	bf08      	it	eq
 8005a4a:	2301      	moveq	r3, #1
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	bf08      	it	eq
 8005a50:	61a3      	streq	r3, [r4, #24]
 8005a52:	f000 f81f 	bl	8005a94 <__sfp>
 8005a56:	6060      	str	r0, [r4, #4]
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f000 f81b 	bl	8005a94 <__sfp>
 8005a5e:	60a0      	str	r0, [r4, #8]
 8005a60:	4620      	mov	r0, r4
 8005a62:	f000 f817 	bl	8005a94 <__sfp>
 8005a66:	2200      	movs	r2, #0
 8005a68:	2104      	movs	r1, #4
 8005a6a:	60e0      	str	r0, [r4, #12]
 8005a6c:	6860      	ldr	r0, [r4, #4]
 8005a6e:	f7ff ff81 	bl	8005974 <std>
 8005a72:	2201      	movs	r2, #1
 8005a74:	2109      	movs	r1, #9
 8005a76:	68a0      	ldr	r0, [r4, #8]
 8005a78:	f7ff ff7c 	bl	8005974 <std>
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	2112      	movs	r1, #18
 8005a80:	68e0      	ldr	r0, [r4, #12]
 8005a82:	f7ff ff77 	bl	8005974 <std>
 8005a86:	2301      	movs	r3, #1
 8005a88:	61a3      	str	r3, [r4, #24]
 8005a8a:	e7d1      	b.n	8005a30 <__sinit+0xc>
 8005a8c:	08006750 	.word	0x08006750
 8005a90:	080059bd 	.word	0x080059bd

08005a94 <__sfp>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	4607      	mov	r7, r0
 8005a98:	f7ff ffac 	bl	80059f4 <__sfp_lock_acquire>
 8005a9c:	4b1e      	ldr	r3, [pc, #120]	; (8005b18 <__sfp+0x84>)
 8005a9e:	681e      	ldr	r6, [r3, #0]
 8005aa0:	69b3      	ldr	r3, [r6, #24]
 8005aa2:	b913      	cbnz	r3, 8005aaa <__sfp+0x16>
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f7ff ffbd 	bl	8005a24 <__sinit>
 8005aaa:	3648      	adds	r6, #72	; 0x48
 8005aac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	d503      	bpl.n	8005abc <__sfp+0x28>
 8005ab4:	6833      	ldr	r3, [r6, #0]
 8005ab6:	b30b      	cbz	r3, 8005afc <__sfp+0x68>
 8005ab8:	6836      	ldr	r6, [r6, #0]
 8005aba:	e7f7      	b.n	8005aac <__sfp+0x18>
 8005abc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ac0:	b9d5      	cbnz	r5, 8005af8 <__sfp+0x64>
 8005ac2:	4b16      	ldr	r3, [pc, #88]	; (8005b1c <__sfp+0x88>)
 8005ac4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ac8:	60e3      	str	r3, [r4, #12]
 8005aca:	6665      	str	r5, [r4, #100]	; 0x64
 8005acc:	f000 f847 	bl	8005b5e <__retarget_lock_init_recursive>
 8005ad0:	f7ff ff96 	bl	8005a00 <__sfp_lock_release>
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005adc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ae0:	6025      	str	r5, [r4, #0]
 8005ae2:	61a5      	str	r5, [r4, #24]
 8005ae4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ae8:	f7ff fd30 	bl	800554c <memset>
 8005aec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005af0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005af4:	4620      	mov	r0, r4
 8005af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af8:	3468      	adds	r4, #104	; 0x68
 8005afa:	e7d9      	b.n	8005ab0 <__sfp+0x1c>
 8005afc:	2104      	movs	r1, #4
 8005afe:	4638      	mov	r0, r7
 8005b00:	f7ff ff62 	bl	80059c8 <__sfmoreglue>
 8005b04:	4604      	mov	r4, r0
 8005b06:	6030      	str	r0, [r6, #0]
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d1d5      	bne.n	8005ab8 <__sfp+0x24>
 8005b0c:	f7ff ff78 	bl	8005a00 <__sfp_lock_release>
 8005b10:	230c      	movs	r3, #12
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	e7ee      	b.n	8005af4 <__sfp+0x60>
 8005b16:	bf00      	nop
 8005b18:	08006750 	.word	0x08006750
 8005b1c:	ffff0001 	.word	0xffff0001

08005b20 <_fwalk_reent>:
 8005b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b24:	4606      	mov	r6, r0
 8005b26:	4688      	mov	r8, r1
 8005b28:	2700      	movs	r7, #0
 8005b2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b32:	f1b9 0901 	subs.w	r9, r9, #1
 8005b36:	d505      	bpl.n	8005b44 <_fwalk_reent+0x24>
 8005b38:	6824      	ldr	r4, [r4, #0]
 8005b3a:	2c00      	cmp	r4, #0
 8005b3c:	d1f7      	bne.n	8005b2e <_fwalk_reent+0xe>
 8005b3e:	4638      	mov	r0, r7
 8005b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b44:	89ab      	ldrh	r3, [r5, #12]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d907      	bls.n	8005b5a <_fwalk_reent+0x3a>
 8005b4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	d003      	beq.n	8005b5a <_fwalk_reent+0x3a>
 8005b52:	4629      	mov	r1, r5
 8005b54:	4630      	mov	r0, r6
 8005b56:	47c0      	blx	r8
 8005b58:	4307      	orrs	r7, r0
 8005b5a:	3568      	adds	r5, #104	; 0x68
 8005b5c:	e7e9      	b.n	8005b32 <_fwalk_reent+0x12>

08005b5e <__retarget_lock_init_recursive>:
 8005b5e:	4770      	bx	lr

08005b60 <__retarget_lock_acquire_recursive>:
 8005b60:	4770      	bx	lr

08005b62 <__retarget_lock_release_recursive>:
 8005b62:	4770      	bx	lr

08005b64 <__swhatbuf_r>:
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	460e      	mov	r6, r1
 8005b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	2900      	cmp	r1, #0
 8005b70:	461d      	mov	r5, r3
 8005b72:	b096      	sub	sp, #88	; 0x58
 8005b74:	da08      	bge.n	8005b88 <__swhatbuf_r+0x24>
 8005b76:	2200      	movs	r2, #0
 8005b78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b7c:	602a      	str	r2, [r5, #0]
 8005b7e:	061a      	lsls	r2, r3, #24
 8005b80:	d410      	bmi.n	8005ba4 <__swhatbuf_r+0x40>
 8005b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b86:	e00e      	b.n	8005ba6 <__swhatbuf_r+0x42>
 8005b88:	466a      	mov	r2, sp
 8005b8a:	f000 fc91 	bl	80064b0 <_fstat_r>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	dbf1      	blt.n	8005b76 <__swhatbuf_r+0x12>
 8005b92:	9a01      	ldr	r2, [sp, #4]
 8005b94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b9c:	425a      	negs	r2, r3
 8005b9e:	415a      	adcs	r2, r3
 8005ba0:	602a      	str	r2, [r5, #0]
 8005ba2:	e7ee      	b.n	8005b82 <__swhatbuf_r+0x1e>
 8005ba4:	2340      	movs	r3, #64	; 0x40
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	b016      	add	sp, #88	; 0x58
 8005bac:	bd70      	pop	{r4, r5, r6, pc}
	...

08005bb0 <__smakebuf_r>:
 8005bb0:	898b      	ldrh	r3, [r1, #12]
 8005bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bb4:	079d      	lsls	r5, r3, #30
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	460c      	mov	r4, r1
 8005bba:	d507      	bpl.n	8005bcc <__smakebuf_r+0x1c>
 8005bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	6123      	str	r3, [r4, #16]
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	6163      	str	r3, [r4, #20]
 8005bc8:	b002      	add	sp, #8
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	466a      	mov	r2, sp
 8005bce:	ab01      	add	r3, sp, #4
 8005bd0:	f7ff ffc8 	bl	8005b64 <__swhatbuf_r>
 8005bd4:	9900      	ldr	r1, [sp, #0]
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f000 f891 	bl	8005d00 <_malloc_r>
 8005bde:	b948      	cbnz	r0, 8005bf4 <__smakebuf_r+0x44>
 8005be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005be4:	059a      	lsls	r2, r3, #22
 8005be6:	d4ef      	bmi.n	8005bc8 <__smakebuf_r+0x18>
 8005be8:	f023 0303 	bic.w	r3, r3, #3
 8005bec:	f043 0302 	orr.w	r3, r3, #2
 8005bf0:	81a3      	strh	r3, [r4, #12]
 8005bf2:	e7e3      	b.n	8005bbc <__smakebuf_r+0xc>
 8005bf4:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <__smakebuf_r+0x7c>)
 8005bf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	6020      	str	r0, [r4, #0]
 8005bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c00:	81a3      	strh	r3, [r4, #12]
 8005c02:	9b00      	ldr	r3, [sp, #0]
 8005c04:	6120      	str	r0, [r4, #16]
 8005c06:	6163      	str	r3, [r4, #20]
 8005c08:	9b01      	ldr	r3, [sp, #4]
 8005c0a:	b15b      	cbz	r3, 8005c24 <__smakebuf_r+0x74>
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c12:	f000 fc5f 	bl	80064d4 <_isatty_r>
 8005c16:	b128      	cbz	r0, 8005c24 <__smakebuf_r+0x74>
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	f043 0301 	orr.w	r3, r3, #1
 8005c22:	81a3      	strh	r3, [r4, #12]
 8005c24:	89a0      	ldrh	r0, [r4, #12]
 8005c26:	4305      	orrs	r5, r0
 8005c28:	81a5      	strh	r5, [r4, #12]
 8005c2a:	e7cd      	b.n	8005bc8 <__smakebuf_r+0x18>
 8005c2c:	080059bd 	.word	0x080059bd

08005c30 <_free_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4605      	mov	r5, r0
 8005c34:	2900      	cmp	r1, #0
 8005c36:	d040      	beq.n	8005cba <_free_r+0x8a>
 8005c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c3c:	1f0c      	subs	r4, r1, #4
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	bfb8      	it	lt
 8005c42:	18e4      	addlt	r4, r4, r3
 8005c44:	f000 fc76 	bl	8006534 <__malloc_lock>
 8005c48:	4a1c      	ldr	r2, [pc, #112]	; (8005cbc <_free_r+0x8c>)
 8005c4a:	6813      	ldr	r3, [r2, #0]
 8005c4c:	b933      	cbnz	r3, 8005c5c <_free_r+0x2c>
 8005c4e:	6063      	str	r3, [r4, #4]
 8005c50:	6014      	str	r4, [r2, #0]
 8005c52:	4628      	mov	r0, r5
 8005c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c58:	f000 bc72 	b.w	8006540 <__malloc_unlock>
 8005c5c:	42a3      	cmp	r3, r4
 8005c5e:	d908      	bls.n	8005c72 <_free_r+0x42>
 8005c60:	6820      	ldr	r0, [r4, #0]
 8005c62:	1821      	adds	r1, r4, r0
 8005c64:	428b      	cmp	r3, r1
 8005c66:	bf01      	itttt	eq
 8005c68:	6819      	ldreq	r1, [r3, #0]
 8005c6a:	685b      	ldreq	r3, [r3, #4]
 8005c6c:	1809      	addeq	r1, r1, r0
 8005c6e:	6021      	streq	r1, [r4, #0]
 8005c70:	e7ed      	b.n	8005c4e <_free_r+0x1e>
 8005c72:	461a      	mov	r2, r3
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	b10b      	cbz	r3, 8005c7c <_free_r+0x4c>
 8005c78:	42a3      	cmp	r3, r4
 8005c7a:	d9fa      	bls.n	8005c72 <_free_r+0x42>
 8005c7c:	6811      	ldr	r1, [r2, #0]
 8005c7e:	1850      	adds	r0, r2, r1
 8005c80:	42a0      	cmp	r0, r4
 8005c82:	d10b      	bne.n	8005c9c <_free_r+0x6c>
 8005c84:	6820      	ldr	r0, [r4, #0]
 8005c86:	4401      	add	r1, r0
 8005c88:	1850      	adds	r0, r2, r1
 8005c8a:	4283      	cmp	r3, r0
 8005c8c:	6011      	str	r1, [r2, #0]
 8005c8e:	d1e0      	bne.n	8005c52 <_free_r+0x22>
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	4401      	add	r1, r0
 8005c96:	6011      	str	r1, [r2, #0]
 8005c98:	6053      	str	r3, [r2, #4]
 8005c9a:	e7da      	b.n	8005c52 <_free_r+0x22>
 8005c9c:	d902      	bls.n	8005ca4 <_free_r+0x74>
 8005c9e:	230c      	movs	r3, #12
 8005ca0:	602b      	str	r3, [r5, #0]
 8005ca2:	e7d6      	b.n	8005c52 <_free_r+0x22>
 8005ca4:	6820      	ldr	r0, [r4, #0]
 8005ca6:	1821      	adds	r1, r4, r0
 8005ca8:	428b      	cmp	r3, r1
 8005caa:	bf01      	itttt	eq
 8005cac:	6819      	ldreq	r1, [r3, #0]
 8005cae:	685b      	ldreq	r3, [r3, #4]
 8005cb0:	1809      	addeq	r1, r1, r0
 8005cb2:	6021      	streq	r1, [r4, #0]
 8005cb4:	6063      	str	r3, [r4, #4]
 8005cb6:	6054      	str	r4, [r2, #4]
 8005cb8:	e7cb      	b.n	8005c52 <_free_r+0x22>
 8005cba:	bd38      	pop	{r3, r4, r5, pc}
 8005cbc:	200006f8 	.word	0x200006f8

08005cc0 <sbrk_aligned>:
 8005cc0:	b570      	push	{r4, r5, r6, lr}
 8005cc2:	4e0e      	ldr	r6, [pc, #56]	; (8005cfc <sbrk_aligned+0x3c>)
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	6831      	ldr	r1, [r6, #0]
 8005cc8:	4605      	mov	r5, r0
 8005cca:	b911      	cbnz	r1, 8005cd2 <sbrk_aligned+0x12>
 8005ccc:	f000 fb7a 	bl	80063c4 <_sbrk_r>
 8005cd0:	6030      	str	r0, [r6, #0]
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f000 fb75 	bl	80063c4 <_sbrk_r>
 8005cda:	1c43      	adds	r3, r0, #1
 8005cdc:	d00a      	beq.n	8005cf4 <sbrk_aligned+0x34>
 8005cde:	1cc4      	adds	r4, r0, #3
 8005ce0:	f024 0403 	bic.w	r4, r4, #3
 8005ce4:	42a0      	cmp	r0, r4
 8005ce6:	d007      	beq.n	8005cf8 <sbrk_aligned+0x38>
 8005ce8:	1a21      	subs	r1, r4, r0
 8005cea:	4628      	mov	r0, r5
 8005cec:	f000 fb6a 	bl	80063c4 <_sbrk_r>
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d101      	bne.n	8005cf8 <sbrk_aligned+0x38>
 8005cf4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	bd70      	pop	{r4, r5, r6, pc}
 8005cfc:	200006fc 	.word	0x200006fc

08005d00 <_malloc_r>:
 8005d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d04:	1ccd      	adds	r5, r1, #3
 8005d06:	f025 0503 	bic.w	r5, r5, #3
 8005d0a:	3508      	adds	r5, #8
 8005d0c:	2d0c      	cmp	r5, #12
 8005d0e:	bf38      	it	cc
 8005d10:	250c      	movcc	r5, #12
 8005d12:	2d00      	cmp	r5, #0
 8005d14:	4607      	mov	r7, r0
 8005d16:	db01      	blt.n	8005d1c <_malloc_r+0x1c>
 8005d18:	42a9      	cmp	r1, r5
 8005d1a:	d905      	bls.n	8005d28 <_malloc_r+0x28>
 8005d1c:	230c      	movs	r3, #12
 8005d1e:	2600      	movs	r6, #0
 8005d20:	603b      	str	r3, [r7, #0]
 8005d22:	4630      	mov	r0, r6
 8005d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d28:	4e2e      	ldr	r6, [pc, #184]	; (8005de4 <_malloc_r+0xe4>)
 8005d2a:	f000 fc03 	bl	8006534 <__malloc_lock>
 8005d2e:	6833      	ldr	r3, [r6, #0]
 8005d30:	461c      	mov	r4, r3
 8005d32:	bb34      	cbnz	r4, 8005d82 <_malloc_r+0x82>
 8005d34:	4629      	mov	r1, r5
 8005d36:	4638      	mov	r0, r7
 8005d38:	f7ff ffc2 	bl	8005cc0 <sbrk_aligned>
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	4604      	mov	r4, r0
 8005d40:	d14d      	bne.n	8005dde <_malloc_r+0xde>
 8005d42:	6834      	ldr	r4, [r6, #0]
 8005d44:	4626      	mov	r6, r4
 8005d46:	2e00      	cmp	r6, #0
 8005d48:	d140      	bne.n	8005dcc <_malloc_r+0xcc>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	4638      	mov	r0, r7
 8005d50:	eb04 0803 	add.w	r8, r4, r3
 8005d54:	f000 fb36 	bl	80063c4 <_sbrk_r>
 8005d58:	4580      	cmp	r8, r0
 8005d5a:	d13a      	bne.n	8005dd2 <_malloc_r+0xd2>
 8005d5c:	6821      	ldr	r1, [r4, #0]
 8005d5e:	3503      	adds	r5, #3
 8005d60:	1a6d      	subs	r5, r5, r1
 8005d62:	f025 0503 	bic.w	r5, r5, #3
 8005d66:	3508      	adds	r5, #8
 8005d68:	2d0c      	cmp	r5, #12
 8005d6a:	bf38      	it	cc
 8005d6c:	250c      	movcc	r5, #12
 8005d6e:	4638      	mov	r0, r7
 8005d70:	4629      	mov	r1, r5
 8005d72:	f7ff ffa5 	bl	8005cc0 <sbrk_aligned>
 8005d76:	3001      	adds	r0, #1
 8005d78:	d02b      	beq.n	8005dd2 <_malloc_r+0xd2>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	442b      	add	r3, r5
 8005d7e:	6023      	str	r3, [r4, #0]
 8005d80:	e00e      	b.n	8005da0 <_malloc_r+0xa0>
 8005d82:	6822      	ldr	r2, [r4, #0]
 8005d84:	1b52      	subs	r2, r2, r5
 8005d86:	d41e      	bmi.n	8005dc6 <_malloc_r+0xc6>
 8005d88:	2a0b      	cmp	r2, #11
 8005d8a:	d916      	bls.n	8005dba <_malloc_r+0xba>
 8005d8c:	1961      	adds	r1, r4, r5
 8005d8e:	42a3      	cmp	r3, r4
 8005d90:	6025      	str	r5, [r4, #0]
 8005d92:	bf18      	it	ne
 8005d94:	6059      	strne	r1, [r3, #4]
 8005d96:	6863      	ldr	r3, [r4, #4]
 8005d98:	bf08      	it	eq
 8005d9a:	6031      	streq	r1, [r6, #0]
 8005d9c:	5162      	str	r2, [r4, r5]
 8005d9e:	604b      	str	r3, [r1, #4]
 8005da0:	4638      	mov	r0, r7
 8005da2:	f104 060b 	add.w	r6, r4, #11
 8005da6:	f000 fbcb 	bl	8006540 <__malloc_unlock>
 8005daa:	f026 0607 	bic.w	r6, r6, #7
 8005dae:	1d23      	adds	r3, r4, #4
 8005db0:	1af2      	subs	r2, r6, r3
 8005db2:	d0b6      	beq.n	8005d22 <_malloc_r+0x22>
 8005db4:	1b9b      	subs	r3, r3, r6
 8005db6:	50a3      	str	r3, [r4, r2]
 8005db8:	e7b3      	b.n	8005d22 <_malloc_r+0x22>
 8005dba:	6862      	ldr	r2, [r4, #4]
 8005dbc:	42a3      	cmp	r3, r4
 8005dbe:	bf0c      	ite	eq
 8005dc0:	6032      	streq	r2, [r6, #0]
 8005dc2:	605a      	strne	r2, [r3, #4]
 8005dc4:	e7ec      	b.n	8005da0 <_malloc_r+0xa0>
 8005dc6:	4623      	mov	r3, r4
 8005dc8:	6864      	ldr	r4, [r4, #4]
 8005dca:	e7b2      	b.n	8005d32 <_malloc_r+0x32>
 8005dcc:	4634      	mov	r4, r6
 8005dce:	6876      	ldr	r6, [r6, #4]
 8005dd0:	e7b9      	b.n	8005d46 <_malloc_r+0x46>
 8005dd2:	230c      	movs	r3, #12
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	f000 fbb2 	bl	8006540 <__malloc_unlock>
 8005ddc:	e7a1      	b.n	8005d22 <_malloc_r+0x22>
 8005dde:	6025      	str	r5, [r4, #0]
 8005de0:	e7de      	b.n	8005da0 <_malloc_r+0xa0>
 8005de2:	bf00      	nop
 8005de4:	200006f8 	.word	0x200006f8

08005de8 <__sfputc_r>:
 8005de8:	6893      	ldr	r3, [r2, #8]
 8005dea:	b410      	push	{r4}
 8005dec:	3b01      	subs	r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	6093      	str	r3, [r2, #8]
 8005df2:	da07      	bge.n	8005e04 <__sfputc_r+0x1c>
 8005df4:	6994      	ldr	r4, [r2, #24]
 8005df6:	42a3      	cmp	r3, r4
 8005df8:	db01      	blt.n	8005dfe <__sfputc_r+0x16>
 8005dfa:	290a      	cmp	r1, #10
 8005dfc:	d102      	bne.n	8005e04 <__sfputc_r+0x1c>
 8005dfe:	bc10      	pop	{r4}
 8005e00:	f7ff bc3a 	b.w	8005678 <__swbuf_r>
 8005e04:	6813      	ldr	r3, [r2, #0]
 8005e06:	1c58      	adds	r0, r3, #1
 8005e08:	6010      	str	r0, [r2, #0]
 8005e0a:	7019      	strb	r1, [r3, #0]
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	bc10      	pop	{r4}
 8005e10:	4770      	bx	lr

08005e12 <__sfputs_r>:
 8005e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e14:	4606      	mov	r6, r0
 8005e16:	460f      	mov	r7, r1
 8005e18:	4614      	mov	r4, r2
 8005e1a:	18d5      	adds	r5, r2, r3
 8005e1c:	42ac      	cmp	r4, r5
 8005e1e:	d101      	bne.n	8005e24 <__sfputs_r+0x12>
 8005e20:	2000      	movs	r0, #0
 8005e22:	e007      	b.n	8005e34 <__sfputs_r+0x22>
 8005e24:	463a      	mov	r2, r7
 8005e26:	4630      	mov	r0, r6
 8005e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e2c:	f7ff ffdc 	bl	8005de8 <__sfputc_r>
 8005e30:	1c43      	adds	r3, r0, #1
 8005e32:	d1f3      	bne.n	8005e1c <__sfputs_r+0xa>
 8005e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e38 <_vfiprintf_r>:
 8005e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3c:	460d      	mov	r5, r1
 8005e3e:	4614      	mov	r4, r2
 8005e40:	4698      	mov	r8, r3
 8005e42:	4606      	mov	r6, r0
 8005e44:	b09d      	sub	sp, #116	; 0x74
 8005e46:	b118      	cbz	r0, 8005e50 <_vfiprintf_r+0x18>
 8005e48:	6983      	ldr	r3, [r0, #24]
 8005e4a:	b90b      	cbnz	r3, 8005e50 <_vfiprintf_r+0x18>
 8005e4c:	f7ff fdea 	bl	8005a24 <__sinit>
 8005e50:	4b89      	ldr	r3, [pc, #548]	; (8006078 <_vfiprintf_r+0x240>)
 8005e52:	429d      	cmp	r5, r3
 8005e54:	d11b      	bne.n	8005e8e <_vfiprintf_r+0x56>
 8005e56:	6875      	ldr	r5, [r6, #4]
 8005e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e5a:	07d9      	lsls	r1, r3, #31
 8005e5c:	d405      	bmi.n	8005e6a <_vfiprintf_r+0x32>
 8005e5e:	89ab      	ldrh	r3, [r5, #12]
 8005e60:	059a      	lsls	r2, r3, #22
 8005e62:	d402      	bmi.n	8005e6a <_vfiprintf_r+0x32>
 8005e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e66:	f7ff fe7b 	bl	8005b60 <__retarget_lock_acquire_recursive>
 8005e6a:	89ab      	ldrh	r3, [r5, #12]
 8005e6c:	071b      	lsls	r3, r3, #28
 8005e6e:	d501      	bpl.n	8005e74 <_vfiprintf_r+0x3c>
 8005e70:	692b      	ldr	r3, [r5, #16]
 8005e72:	b9eb      	cbnz	r3, 8005eb0 <_vfiprintf_r+0x78>
 8005e74:	4629      	mov	r1, r5
 8005e76:	4630      	mov	r0, r6
 8005e78:	f7ff fc50 	bl	800571c <__swsetup_r>
 8005e7c:	b1c0      	cbz	r0, 8005eb0 <_vfiprintf_r+0x78>
 8005e7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e80:	07dc      	lsls	r4, r3, #31
 8005e82:	d50e      	bpl.n	8005ea2 <_vfiprintf_r+0x6a>
 8005e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e88:	b01d      	add	sp, #116	; 0x74
 8005e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8e:	4b7b      	ldr	r3, [pc, #492]	; (800607c <_vfiprintf_r+0x244>)
 8005e90:	429d      	cmp	r5, r3
 8005e92:	d101      	bne.n	8005e98 <_vfiprintf_r+0x60>
 8005e94:	68b5      	ldr	r5, [r6, #8]
 8005e96:	e7df      	b.n	8005e58 <_vfiprintf_r+0x20>
 8005e98:	4b79      	ldr	r3, [pc, #484]	; (8006080 <_vfiprintf_r+0x248>)
 8005e9a:	429d      	cmp	r5, r3
 8005e9c:	bf08      	it	eq
 8005e9e:	68f5      	ldreq	r5, [r6, #12]
 8005ea0:	e7da      	b.n	8005e58 <_vfiprintf_r+0x20>
 8005ea2:	89ab      	ldrh	r3, [r5, #12]
 8005ea4:	0598      	lsls	r0, r3, #22
 8005ea6:	d4ed      	bmi.n	8005e84 <_vfiprintf_r+0x4c>
 8005ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eaa:	f7ff fe5a 	bl	8005b62 <__retarget_lock_release_recursive>
 8005eae:	e7e9      	b.n	8005e84 <_vfiprintf_r+0x4c>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb4:	2320      	movs	r3, #32
 8005eb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eba:	2330      	movs	r3, #48	; 0x30
 8005ebc:	f04f 0901 	mov.w	r9, #1
 8005ec0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ec4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006084 <_vfiprintf_r+0x24c>
 8005ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ecc:	4623      	mov	r3, r4
 8005ece:	469a      	mov	sl, r3
 8005ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ed4:	b10a      	cbz	r2, 8005eda <_vfiprintf_r+0xa2>
 8005ed6:	2a25      	cmp	r2, #37	; 0x25
 8005ed8:	d1f9      	bne.n	8005ece <_vfiprintf_r+0x96>
 8005eda:	ebba 0b04 	subs.w	fp, sl, r4
 8005ede:	d00b      	beq.n	8005ef8 <_vfiprintf_r+0xc0>
 8005ee0:	465b      	mov	r3, fp
 8005ee2:	4622      	mov	r2, r4
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f7ff ff93 	bl	8005e12 <__sfputs_r>
 8005eec:	3001      	adds	r0, #1
 8005eee:	f000 80aa 	beq.w	8006046 <_vfiprintf_r+0x20e>
 8005ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ef4:	445a      	add	r2, fp
 8005ef6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80a2 	beq.w	8006046 <_vfiprintf_r+0x20e>
 8005f02:	2300      	movs	r3, #0
 8005f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f0c:	f10a 0a01 	add.w	sl, sl, #1
 8005f10:	9304      	str	r3, [sp, #16]
 8005f12:	9307      	str	r3, [sp, #28]
 8005f14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f18:	931a      	str	r3, [sp, #104]	; 0x68
 8005f1a:	4654      	mov	r4, sl
 8005f1c:	2205      	movs	r2, #5
 8005f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f22:	4858      	ldr	r0, [pc, #352]	; (8006084 <_vfiprintf_r+0x24c>)
 8005f24:	f000 faf8 	bl	8006518 <memchr>
 8005f28:	9a04      	ldr	r2, [sp, #16]
 8005f2a:	b9d8      	cbnz	r0, 8005f64 <_vfiprintf_r+0x12c>
 8005f2c:	06d1      	lsls	r1, r2, #27
 8005f2e:	bf44      	itt	mi
 8005f30:	2320      	movmi	r3, #32
 8005f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f36:	0713      	lsls	r3, r2, #28
 8005f38:	bf44      	itt	mi
 8005f3a:	232b      	movmi	r3, #43	; 0x2b
 8005f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f40:	f89a 3000 	ldrb.w	r3, [sl]
 8005f44:	2b2a      	cmp	r3, #42	; 0x2a
 8005f46:	d015      	beq.n	8005f74 <_vfiprintf_r+0x13c>
 8005f48:	4654      	mov	r4, sl
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	f04f 0c0a 	mov.w	ip, #10
 8005f50:	9a07      	ldr	r2, [sp, #28]
 8005f52:	4621      	mov	r1, r4
 8005f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f58:	3b30      	subs	r3, #48	; 0x30
 8005f5a:	2b09      	cmp	r3, #9
 8005f5c:	d94e      	bls.n	8005ffc <_vfiprintf_r+0x1c4>
 8005f5e:	b1b0      	cbz	r0, 8005f8e <_vfiprintf_r+0x156>
 8005f60:	9207      	str	r2, [sp, #28]
 8005f62:	e014      	b.n	8005f8e <_vfiprintf_r+0x156>
 8005f64:	eba0 0308 	sub.w	r3, r0, r8
 8005f68:	fa09 f303 	lsl.w	r3, r9, r3
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	46a2      	mov	sl, r4
 8005f70:	9304      	str	r3, [sp, #16]
 8005f72:	e7d2      	b.n	8005f1a <_vfiprintf_r+0xe2>
 8005f74:	9b03      	ldr	r3, [sp, #12]
 8005f76:	1d19      	adds	r1, r3, #4
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	9103      	str	r1, [sp, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	bfbb      	ittet	lt
 8005f80:	425b      	neglt	r3, r3
 8005f82:	f042 0202 	orrlt.w	r2, r2, #2
 8005f86:	9307      	strge	r3, [sp, #28]
 8005f88:	9307      	strlt	r3, [sp, #28]
 8005f8a:	bfb8      	it	lt
 8005f8c:	9204      	strlt	r2, [sp, #16]
 8005f8e:	7823      	ldrb	r3, [r4, #0]
 8005f90:	2b2e      	cmp	r3, #46	; 0x2e
 8005f92:	d10c      	bne.n	8005fae <_vfiprintf_r+0x176>
 8005f94:	7863      	ldrb	r3, [r4, #1]
 8005f96:	2b2a      	cmp	r3, #42	; 0x2a
 8005f98:	d135      	bne.n	8006006 <_vfiprintf_r+0x1ce>
 8005f9a:	9b03      	ldr	r3, [sp, #12]
 8005f9c:	3402      	adds	r4, #2
 8005f9e:	1d1a      	adds	r2, r3, #4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	9203      	str	r2, [sp, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	bfb8      	it	lt
 8005fa8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005fac:	9305      	str	r3, [sp, #20]
 8005fae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006088 <_vfiprintf_r+0x250>
 8005fb2:	2203      	movs	r2, #3
 8005fb4:	4650      	mov	r0, sl
 8005fb6:	7821      	ldrb	r1, [r4, #0]
 8005fb8:	f000 faae 	bl	8006518 <memchr>
 8005fbc:	b140      	cbz	r0, 8005fd0 <_vfiprintf_r+0x198>
 8005fbe:	2340      	movs	r3, #64	; 0x40
 8005fc0:	eba0 000a 	sub.w	r0, r0, sl
 8005fc4:	fa03 f000 	lsl.w	r0, r3, r0
 8005fc8:	9b04      	ldr	r3, [sp, #16]
 8005fca:	3401      	adds	r4, #1
 8005fcc:	4303      	orrs	r3, r0
 8005fce:	9304      	str	r3, [sp, #16]
 8005fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd4:	2206      	movs	r2, #6
 8005fd6:	482d      	ldr	r0, [pc, #180]	; (800608c <_vfiprintf_r+0x254>)
 8005fd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fdc:	f000 fa9c 	bl	8006518 <memchr>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d03f      	beq.n	8006064 <_vfiprintf_r+0x22c>
 8005fe4:	4b2a      	ldr	r3, [pc, #168]	; (8006090 <_vfiprintf_r+0x258>)
 8005fe6:	bb1b      	cbnz	r3, 8006030 <_vfiprintf_r+0x1f8>
 8005fe8:	9b03      	ldr	r3, [sp, #12]
 8005fea:	3307      	adds	r3, #7
 8005fec:	f023 0307 	bic.w	r3, r3, #7
 8005ff0:	3308      	adds	r3, #8
 8005ff2:	9303      	str	r3, [sp, #12]
 8005ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff6:	443b      	add	r3, r7
 8005ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8005ffa:	e767      	b.n	8005ecc <_vfiprintf_r+0x94>
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	2001      	movs	r0, #1
 8006000:	fb0c 3202 	mla	r2, ip, r2, r3
 8006004:	e7a5      	b.n	8005f52 <_vfiprintf_r+0x11a>
 8006006:	2300      	movs	r3, #0
 8006008:	f04f 0c0a 	mov.w	ip, #10
 800600c:	4619      	mov	r1, r3
 800600e:	3401      	adds	r4, #1
 8006010:	9305      	str	r3, [sp, #20]
 8006012:	4620      	mov	r0, r4
 8006014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006018:	3a30      	subs	r2, #48	; 0x30
 800601a:	2a09      	cmp	r2, #9
 800601c:	d903      	bls.n	8006026 <_vfiprintf_r+0x1ee>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0c5      	beq.n	8005fae <_vfiprintf_r+0x176>
 8006022:	9105      	str	r1, [sp, #20]
 8006024:	e7c3      	b.n	8005fae <_vfiprintf_r+0x176>
 8006026:	4604      	mov	r4, r0
 8006028:	2301      	movs	r3, #1
 800602a:	fb0c 2101 	mla	r1, ip, r1, r2
 800602e:	e7f0      	b.n	8006012 <_vfiprintf_r+0x1da>
 8006030:	ab03      	add	r3, sp, #12
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	462a      	mov	r2, r5
 8006036:	4630      	mov	r0, r6
 8006038:	4b16      	ldr	r3, [pc, #88]	; (8006094 <_vfiprintf_r+0x25c>)
 800603a:	a904      	add	r1, sp, #16
 800603c:	f3af 8000 	nop.w
 8006040:	4607      	mov	r7, r0
 8006042:	1c78      	adds	r0, r7, #1
 8006044:	d1d6      	bne.n	8005ff4 <_vfiprintf_r+0x1bc>
 8006046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006048:	07d9      	lsls	r1, r3, #31
 800604a:	d405      	bmi.n	8006058 <_vfiprintf_r+0x220>
 800604c:	89ab      	ldrh	r3, [r5, #12]
 800604e:	059a      	lsls	r2, r3, #22
 8006050:	d402      	bmi.n	8006058 <_vfiprintf_r+0x220>
 8006052:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006054:	f7ff fd85 	bl	8005b62 <__retarget_lock_release_recursive>
 8006058:	89ab      	ldrh	r3, [r5, #12]
 800605a:	065b      	lsls	r3, r3, #25
 800605c:	f53f af12 	bmi.w	8005e84 <_vfiprintf_r+0x4c>
 8006060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006062:	e711      	b.n	8005e88 <_vfiprintf_r+0x50>
 8006064:	ab03      	add	r3, sp, #12
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	462a      	mov	r2, r5
 800606a:	4630      	mov	r0, r6
 800606c:	4b09      	ldr	r3, [pc, #36]	; (8006094 <_vfiprintf_r+0x25c>)
 800606e:	a904      	add	r1, sp, #16
 8006070:	f000 f882 	bl	8006178 <_printf_i>
 8006074:	e7e4      	b.n	8006040 <_vfiprintf_r+0x208>
 8006076:	bf00      	nop
 8006078:	08006774 	.word	0x08006774
 800607c:	08006794 	.word	0x08006794
 8006080:	08006754 	.word	0x08006754
 8006084:	080067b4 	.word	0x080067b4
 8006088:	080067ba 	.word	0x080067ba
 800608c:	080067be 	.word	0x080067be
 8006090:	00000000 	.word	0x00000000
 8006094:	08005e13 	.word	0x08005e13

08006098 <_printf_common>:
 8006098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800609c:	4616      	mov	r6, r2
 800609e:	4699      	mov	r9, r3
 80060a0:	688a      	ldr	r2, [r1, #8]
 80060a2:	690b      	ldr	r3, [r1, #16]
 80060a4:	4607      	mov	r7, r0
 80060a6:	4293      	cmp	r3, r2
 80060a8:	bfb8      	it	lt
 80060aa:	4613      	movlt	r3, r2
 80060ac:	6033      	str	r3, [r6, #0]
 80060ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060b2:	460c      	mov	r4, r1
 80060b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060b8:	b10a      	cbz	r2, 80060be <_printf_common+0x26>
 80060ba:	3301      	adds	r3, #1
 80060bc:	6033      	str	r3, [r6, #0]
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	0699      	lsls	r1, r3, #26
 80060c2:	bf42      	ittt	mi
 80060c4:	6833      	ldrmi	r3, [r6, #0]
 80060c6:	3302      	addmi	r3, #2
 80060c8:	6033      	strmi	r3, [r6, #0]
 80060ca:	6825      	ldr	r5, [r4, #0]
 80060cc:	f015 0506 	ands.w	r5, r5, #6
 80060d0:	d106      	bne.n	80060e0 <_printf_common+0x48>
 80060d2:	f104 0a19 	add.w	sl, r4, #25
 80060d6:	68e3      	ldr	r3, [r4, #12]
 80060d8:	6832      	ldr	r2, [r6, #0]
 80060da:	1a9b      	subs	r3, r3, r2
 80060dc:	42ab      	cmp	r3, r5
 80060de:	dc28      	bgt.n	8006132 <_printf_common+0x9a>
 80060e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060e4:	1e13      	subs	r3, r2, #0
 80060e6:	6822      	ldr	r2, [r4, #0]
 80060e8:	bf18      	it	ne
 80060ea:	2301      	movne	r3, #1
 80060ec:	0692      	lsls	r2, r2, #26
 80060ee:	d42d      	bmi.n	800614c <_printf_common+0xb4>
 80060f0:	4649      	mov	r1, r9
 80060f2:	4638      	mov	r0, r7
 80060f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060f8:	47c0      	blx	r8
 80060fa:	3001      	adds	r0, #1
 80060fc:	d020      	beq.n	8006140 <_printf_common+0xa8>
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	68e5      	ldr	r5, [r4, #12]
 8006102:	f003 0306 	and.w	r3, r3, #6
 8006106:	2b04      	cmp	r3, #4
 8006108:	bf18      	it	ne
 800610a:	2500      	movne	r5, #0
 800610c:	6832      	ldr	r2, [r6, #0]
 800610e:	f04f 0600 	mov.w	r6, #0
 8006112:	68a3      	ldr	r3, [r4, #8]
 8006114:	bf08      	it	eq
 8006116:	1aad      	subeq	r5, r5, r2
 8006118:	6922      	ldr	r2, [r4, #16]
 800611a:	bf08      	it	eq
 800611c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006120:	4293      	cmp	r3, r2
 8006122:	bfc4      	itt	gt
 8006124:	1a9b      	subgt	r3, r3, r2
 8006126:	18ed      	addgt	r5, r5, r3
 8006128:	341a      	adds	r4, #26
 800612a:	42b5      	cmp	r5, r6
 800612c:	d11a      	bne.n	8006164 <_printf_common+0xcc>
 800612e:	2000      	movs	r0, #0
 8006130:	e008      	b.n	8006144 <_printf_common+0xac>
 8006132:	2301      	movs	r3, #1
 8006134:	4652      	mov	r2, sl
 8006136:	4649      	mov	r1, r9
 8006138:	4638      	mov	r0, r7
 800613a:	47c0      	blx	r8
 800613c:	3001      	adds	r0, #1
 800613e:	d103      	bne.n	8006148 <_printf_common+0xb0>
 8006140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006148:	3501      	adds	r5, #1
 800614a:	e7c4      	b.n	80060d6 <_printf_common+0x3e>
 800614c:	2030      	movs	r0, #48	; 0x30
 800614e:	18e1      	adds	r1, r4, r3
 8006150:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800615a:	4422      	add	r2, r4
 800615c:	3302      	adds	r3, #2
 800615e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006162:	e7c5      	b.n	80060f0 <_printf_common+0x58>
 8006164:	2301      	movs	r3, #1
 8006166:	4622      	mov	r2, r4
 8006168:	4649      	mov	r1, r9
 800616a:	4638      	mov	r0, r7
 800616c:	47c0      	blx	r8
 800616e:	3001      	adds	r0, #1
 8006170:	d0e6      	beq.n	8006140 <_printf_common+0xa8>
 8006172:	3601      	adds	r6, #1
 8006174:	e7d9      	b.n	800612a <_printf_common+0x92>
	...

08006178 <_printf_i>:
 8006178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800617c:	7e0f      	ldrb	r7, [r1, #24]
 800617e:	4691      	mov	r9, r2
 8006180:	2f78      	cmp	r7, #120	; 0x78
 8006182:	4680      	mov	r8, r0
 8006184:	460c      	mov	r4, r1
 8006186:	469a      	mov	sl, r3
 8006188:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800618a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800618e:	d807      	bhi.n	80061a0 <_printf_i+0x28>
 8006190:	2f62      	cmp	r7, #98	; 0x62
 8006192:	d80a      	bhi.n	80061aa <_printf_i+0x32>
 8006194:	2f00      	cmp	r7, #0
 8006196:	f000 80d9 	beq.w	800634c <_printf_i+0x1d4>
 800619a:	2f58      	cmp	r7, #88	; 0x58
 800619c:	f000 80a4 	beq.w	80062e8 <_printf_i+0x170>
 80061a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061a8:	e03a      	b.n	8006220 <_printf_i+0xa8>
 80061aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061ae:	2b15      	cmp	r3, #21
 80061b0:	d8f6      	bhi.n	80061a0 <_printf_i+0x28>
 80061b2:	a101      	add	r1, pc, #4	; (adr r1, 80061b8 <_printf_i+0x40>)
 80061b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061b8:	08006211 	.word	0x08006211
 80061bc:	08006225 	.word	0x08006225
 80061c0:	080061a1 	.word	0x080061a1
 80061c4:	080061a1 	.word	0x080061a1
 80061c8:	080061a1 	.word	0x080061a1
 80061cc:	080061a1 	.word	0x080061a1
 80061d0:	08006225 	.word	0x08006225
 80061d4:	080061a1 	.word	0x080061a1
 80061d8:	080061a1 	.word	0x080061a1
 80061dc:	080061a1 	.word	0x080061a1
 80061e0:	080061a1 	.word	0x080061a1
 80061e4:	08006333 	.word	0x08006333
 80061e8:	08006255 	.word	0x08006255
 80061ec:	08006315 	.word	0x08006315
 80061f0:	080061a1 	.word	0x080061a1
 80061f4:	080061a1 	.word	0x080061a1
 80061f8:	08006355 	.word	0x08006355
 80061fc:	080061a1 	.word	0x080061a1
 8006200:	08006255 	.word	0x08006255
 8006204:	080061a1 	.word	0x080061a1
 8006208:	080061a1 	.word	0x080061a1
 800620c:	0800631d 	.word	0x0800631d
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	1d1a      	adds	r2, r3, #4
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	602a      	str	r2, [r5, #0]
 8006218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800621c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006220:	2301      	movs	r3, #1
 8006222:	e0a4      	b.n	800636e <_printf_i+0x1f6>
 8006224:	6820      	ldr	r0, [r4, #0]
 8006226:	6829      	ldr	r1, [r5, #0]
 8006228:	0606      	lsls	r6, r0, #24
 800622a:	f101 0304 	add.w	r3, r1, #4
 800622e:	d50a      	bpl.n	8006246 <_printf_i+0xce>
 8006230:	680e      	ldr	r6, [r1, #0]
 8006232:	602b      	str	r3, [r5, #0]
 8006234:	2e00      	cmp	r6, #0
 8006236:	da03      	bge.n	8006240 <_printf_i+0xc8>
 8006238:	232d      	movs	r3, #45	; 0x2d
 800623a:	4276      	negs	r6, r6
 800623c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006240:	230a      	movs	r3, #10
 8006242:	485e      	ldr	r0, [pc, #376]	; (80063bc <_printf_i+0x244>)
 8006244:	e019      	b.n	800627a <_printf_i+0x102>
 8006246:	680e      	ldr	r6, [r1, #0]
 8006248:	f010 0f40 	tst.w	r0, #64	; 0x40
 800624c:	602b      	str	r3, [r5, #0]
 800624e:	bf18      	it	ne
 8006250:	b236      	sxthne	r6, r6
 8006252:	e7ef      	b.n	8006234 <_printf_i+0xbc>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	6820      	ldr	r0, [r4, #0]
 8006258:	1d19      	adds	r1, r3, #4
 800625a:	6029      	str	r1, [r5, #0]
 800625c:	0601      	lsls	r1, r0, #24
 800625e:	d501      	bpl.n	8006264 <_printf_i+0xec>
 8006260:	681e      	ldr	r6, [r3, #0]
 8006262:	e002      	b.n	800626a <_printf_i+0xf2>
 8006264:	0646      	lsls	r6, r0, #25
 8006266:	d5fb      	bpl.n	8006260 <_printf_i+0xe8>
 8006268:	881e      	ldrh	r6, [r3, #0]
 800626a:	2f6f      	cmp	r7, #111	; 0x6f
 800626c:	bf0c      	ite	eq
 800626e:	2308      	moveq	r3, #8
 8006270:	230a      	movne	r3, #10
 8006272:	4852      	ldr	r0, [pc, #328]	; (80063bc <_printf_i+0x244>)
 8006274:	2100      	movs	r1, #0
 8006276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800627a:	6865      	ldr	r5, [r4, #4]
 800627c:	2d00      	cmp	r5, #0
 800627e:	bfa8      	it	ge
 8006280:	6821      	ldrge	r1, [r4, #0]
 8006282:	60a5      	str	r5, [r4, #8]
 8006284:	bfa4      	itt	ge
 8006286:	f021 0104 	bicge.w	r1, r1, #4
 800628a:	6021      	strge	r1, [r4, #0]
 800628c:	b90e      	cbnz	r6, 8006292 <_printf_i+0x11a>
 800628e:	2d00      	cmp	r5, #0
 8006290:	d04d      	beq.n	800632e <_printf_i+0x1b6>
 8006292:	4615      	mov	r5, r2
 8006294:	fbb6 f1f3 	udiv	r1, r6, r3
 8006298:	fb03 6711 	mls	r7, r3, r1, r6
 800629c:	5dc7      	ldrb	r7, [r0, r7]
 800629e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062a2:	4637      	mov	r7, r6
 80062a4:	42bb      	cmp	r3, r7
 80062a6:	460e      	mov	r6, r1
 80062a8:	d9f4      	bls.n	8006294 <_printf_i+0x11c>
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d10b      	bne.n	80062c6 <_printf_i+0x14e>
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	07de      	lsls	r6, r3, #31
 80062b2:	d508      	bpl.n	80062c6 <_printf_i+0x14e>
 80062b4:	6923      	ldr	r3, [r4, #16]
 80062b6:	6861      	ldr	r1, [r4, #4]
 80062b8:	4299      	cmp	r1, r3
 80062ba:	bfde      	ittt	le
 80062bc:	2330      	movle	r3, #48	; 0x30
 80062be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062c2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80062c6:	1b52      	subs	r2, r2, r5
 80062c8:	6122      	str	r2, [r4, #16]
 80062ca:	464b      	mov	r3, r9
 80062cc:	4621      	mov	r1, r4
 80062ce:	4640      	mov	r0, r8
 80062d0:	f8cd a000 	str.w	sl, [sp]
 80062d4:	aa03      	add	r2, sp, #12
 80062d6:	f7ff fedf 	bl	8006098 <_printf_common>
 80062da:	3001      	adds	r0, #1
 80062dc:	d14c      	bne.n	8006378 <_printf_i+0x200>
 80062de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062e2:	b004      	add	sp, #16
 80062e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e8:	4834      	ldr	r0, [pc, #208]	; (80063bc <_printf_i+0x244>)
 80062ea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062ee:	6829      	ldr	r1, [r5, #0]
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80062f6:	6029      	str	r1, [r5, #0]
 80062f8:	061d      	lsls	r5, r3, #24
 80062fa:	d514      	bpl.n	8006326 <_printf_i+0x1ae>
 80062fc:	07df      	lsls	r7, r3, #31
 80062fe:	bf44      	itt	mi
 8006300:	f043 0320 	orrmi.w	r3, r3, #32
 8006304:	6023      	strmi	r3, [r4, #0]
 8006306:	b91e      	cbnz	r6, 8006310 <_printf_i+0x198>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	f023 0320 	bic.w	r3, r3, #32
 800630e:	6023      	str	r3, [r4, #0]
 8006310:	2310      	movs	r3, #16
 8006312:	e7af      	b.n	8006274 <_printf_i+0xfc>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	f043 0320 	orr.w	r3, r3, #32
 800631a:	6023      	str	r3, [r4, #0]
 800631c:	2378      	movs	r3, #120	; 0x78
 800631e:	4828      	ldr	r0, [pc, #160]	; (80063c0 <_printf_i+0x248>)
 8006320:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006324:	e7e3      	b.n	80062ee <_printf_i+0x176>
 8006326:	0659      	lsls	r1, r3, #25
 8006328:	bf48      	it	mi
 800632a:	b2b6      	uxthmi	r6, r6
 800632c:	e7e6      	b.n	80062fc <_printf_i+0x184>
 800632e:	4615      	mov	r5, r2
 8006330:	e7bb      	b.n	80062aa <_printf_i+0x132>
 8006332:	682b      	ldr	r3, [r5, #0]
 8006334:	6826      	ldr	r6, [r4, #0]
 8006336:	1d18      	adds	r0, r3, #4
 8006338:	6961      	ldr	r1, [r4, #20]
 800633a:	6028      	str	r0, [r5, #0]
 800633c:	0635      	lsls	r5, r6, #24
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	d501      	bpl.n	8006346 <_printf_i+0x1ce>
 8006342:	6019      	str	r1, [r3, #0]
 8006344:	e002      	b.n	800634c <_printf_i+0x1d4>
 8006346:	0670      	lsls	r0, r6, #25
 8006348:	d5fb      	bpl.n	8006342 <_printf_i+0x1ca>
 800634a:	8019      	strh	r1, [r3, #0]
 800634c:	2300      	movs	r3, #0
 800634e:	4615      	mov	r5, r2
 8006350:	6123      	str	r3, [r4, #16]
 8006352:	e7ba      	b.n	80062ca <_printf_i+0x152>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	2100      	movs	r1, #0
 8006358:	1d1a      	adds	r2, r3, #4
 800635a:	602a      	str	r2, [r5, #0]
 800635c:	681d      	ldr	r5, [r3, #0]
 800635e:	6862      	ldr	r2, [r4, #4]
 8006360:	4628      	mov	r0, r5
 8006362:	f000 f8d9 	bl	8006518 <memchr>
 8006366:	b108      	cbz	r0, 800636c <_printf_i+0x1f4>
 8006368:	1b40      	subs	r0, r0, r5
 800636a:	6060      	str	r0, [r4, #4]
 800636c:	6863      	ldr	r3, [r4, #4]
 800636e:	6123      	str	r3, [r4, #16]
 8006370:	2300      	movs	r3, #0
 8006372:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006376:	e7a8      	b.n	80062ca <_printf_i+0x152>
 8006378:	462a      	mov	r2, r5
 800637a:	4649      	mov	r1, r9
 800637c:	4640      	mov	r0, r8
 800637e:	6923      	ldr	r3, [r4, #16]
 8006380:	47d0      	blx	sl
 8006382:	3001      	adds	r0, #1
 8006384:	d0ab      	beq.n	80062de <_printf_i+0x166>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	079b      	lsls	r3, r3, #30
 800638a:	d413      	bmi.n	80063b4 <_printf_i+0x23c>
 800638c:	68e0      	ldr	r0, [r4, #12]
 800638e:	9b03      	ldr	r3, [sp, #12]
 8006390:	4298      	cmp	r0, r3
 8006392:	bfb8      	it	lt
 8006394:	4618      	movlt	r0, r3
 8006396:	e7a4      	b.n	80062e2 <_printf_i+0x16a>
 8006398:	2301      	movs	r3, #1
 800639a:	4632      	mov	r2, r6
 800639c:	4649      	mov	r1, r9
 800639e:	4640      	mov	r0, r8
 80063a0:	47d0      	blx	sl
 80063a2:	3001      	adds	r0, #1
 80063a4:	d09b      	beq.n	80062de <_printf_i+0x166>
 80063a6:	3501      	adds	r5, #1
 80063a8:	68e3      	ldr	r3, [r4, #12]
 80063aa:	9903      	ldr	r1, [sp, #12]
 80063ac:	1a5b      	subs	r3, r3, r1
 80063ae:	42ab      	cmp	r3, r5
 80063b0:	dcf2      	bgt.n	8006398 <_printf_i+0x220>
 80063b2:	e7eb      	b.n	800638c <_printf_i+0x214>
 80063b4:	2500      	movs	r5, #0
 80063b6:	f104 0619 	add.w	r6, r4, #25
 80063ba:	e7f5      	b.n	80063a8 <_printf_i+0x230>
 80063bc:	080067c5 	.word	0x080067c5
 80063c0:	080067d6 	.word	0x080067d6

080063c4 <_sbrk_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	2300      	movs	r3, #0
 80063c8:	4d05      	ldr	r5, [pc, #20]	; (80063e0 <_sbrk_r+0x1c>)
 80063ca:	4604      	mov	r4, r0
 80063cc:	4608      	mov	r0, r1
 80063ce:	602b      	str	r3, [r5, #0]
 80063d0:	f7fa fee2 	bl	8001198 <_sbrk>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d102      	bne.n	80063de <_sbrk_r+0x1a>
 80063d8:	682b      	ldr	r3, [r5, #0]
 80063da:	b103      	cbz	r3, 80063de <_sbrk_r+0x1a>
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	20000700 	.word	0x20000700

080063e4 <__sread>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	460c      	mov	r4, r1
 80063e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ec:	f000 f8ae 	bl	800654c <_read_r>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	bfab      	itete	ge
 80063f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063f6:	89a3      	ldrhlt	r3, [r4, #12]
 80063f8:	181b      	addge	r3, r3, r0
 80063fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063fe:	bfac      	ite	ge
 8006400:	6563      	strge	r3, [r4, #84]	; 0x54
 8006402:	81a3      	strhlt	r3, [r4, #12]
 8006404:	bd10      	pop	{r4, pc}

08006406 <__swrite>:
 8006406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800640a:	461f      	mov	r7, r3
 800640c:	898b      	ldrh	r3, [r1, #12]
 800640e:	4605      	mov	r5, r0
 8006410:	05db      	lsls	r3, r3, #23
 8006412:	460c      	mov	r4, r1
 8006414:	4616      	mov	r6, r2
 8006416:	d505      	bpl.n	8006424 <__swrite+0x1e>
 8006418:	2302      	movs	r3, #2
 800641a:	2200      	movs	r2, #0
 800641c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006420:	f000 f868 	bl	80064f4 <_lseek_r>
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	4632      	mov	r2, r6
 8006428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800642c:	81a3      	strh	r3, [r4, #12]
 800642e:	4628      	mov	r0, r5
 8006430:	463b      	mov	r3, r7
 8006432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800643a:	f000 b817 	b.w	800646c <_write_r>

0800643e <__sseek>:
 800643e:	b510      	push	{r4, lr}
 8006440:	460c      	mov	r4, r1
 8006442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006446:	f000 f855 	bl	80064f4 <_lseek_r>
 800644a:	1c43      	adds	r3, r0, #1
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	bf15      	itete	ne
 8006450:	6560      	strne	r0, [r4, #84]	; 0x54
 8006452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800645a:	81a3      	strheq	r3, [r4, #12]
 800645c:	bf18      	it	ne
 800645e:	81a3      	strhne	r3, [r4, #12]
 8006460:	bd10      	pop	{r4, pc}

08006462 <__sclose>:
 8006462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006466:	f000 b813 	b.w	8006490 <_close_r>
	...

0800646c <_write_r>:
 800646c:	b538      	push	{r3, r4, r5, lr}
 800646e:	4604      	mov	r4, r0
 8006470:	4608      	mov	r0, r1
 8006472:	4611      	mov	r1, r2
 8006474:	2200      	movs	r2, #0
 8006476:	4d05      	ldr	r5, [pc, #20]	; (800648c <_write_r+0x20>)
 8006478:	602a      	str	r2, [r5, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	f7fa fe6f 	bl	800115e <_write>
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	d102      	bne.n	800648a <_write_r+0x1e>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	b103      	cbz	r3, 800648a <_write_r+0x1e>
 8006488:	6023      	str	r3, [r4, #0]
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	20000700 	.word	0x20000700

08006490 <_close_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	2300      	movs	r3, #0
 8006494:	4d05      	ldr	r5, [pc, #20]	; (80064ac <_close_r+0x1c>)
 8006496:	4604      	mov	r4, r0
 8006498:	4608      	mov	r0, r1
 800649a:	602b      	str	r3, [r5, #0]
 800649c:	f000 f868 	bl	8006570 <_close>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_close_r+0x1a>
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_close_r+0x1a>
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	20000700 	.word	0x20000700

080064b0 <_fstat_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	2300      	movs	r3, #0
 80064b4:	4d06      	ldr	r5, [pc, #24]	; (80064d0 <_fstat_r+0x20>)
 80064b6:	4604      	mov	r4, r0
 80064b8:	4608      	mov	r0, r1
 80064ba:	4611      	mov	r1, r2
 80064bc:	602b      	str	r3, [r5, #0]
 80064be:	f000 f85f 	bl	8006580 <_fstat>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	d102      	bne.n	80064cc <_fstat_r+0x1c>
 80064c6:	682b      	ldr	r3, [r5, #0]
 80064c8:	b103      	cbz	r3, 80064cc <_fstat_r+0x1c>
 80064ca:	6023      	str	r3, [r4, #0]
 80064cc:	bd38      	pop	{r3, r4, r5, pc}
 80064ce:	bf00      	nop
 80064d0:	20000700 	.word	0x20000700

080064d4 <_isatty_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	2300      	movs	r3, #0
 80064d8:	4d05      	ldr	r5, [pc, #20]	; (80064f0 <_isatty_r+0x1c>)
 80064da:	4604      	mov	r4, r0
 80064dc:	4608      	mov	r0, r1
 80064de:	602b      	str	r3, [r5, #0]
 80064e0:	f000 f856 	bl	8006590 <_isatty>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d102      	bne.n	80064ee <_isatty_r+0x1a>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	b103      	cbz	r3, 80064ee <_isatty_r+0x1a>
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	20000700 	.word	0x20000700

080064f4 <_lseek_r>:
 80064f4:	b538      	push	{r3, r4, r5, lr}
 80064f6:	4604      	mov	r4, r0
 80064f8:	4608      	mov	r0, r1
 80064fa:	4611      	mov	r1, r2
 80064fc:	2200      	movs	r2, #0
 80064fe:	4d05      	ldr	r5, [pc, #20]	; (8006514 <_lseek_r+0x20>)
 8006500:	602a      	str	r2, [r5, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	f000 f84c 	bl	80065a0 <_lseek>
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	d102      	bne.n	8006512 <_lseek_r+0x1e>
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	b103      	cbz	r3, 8006512 <_lseek_r+0x1e>
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	20000700 	.word	0x20000700

08006518 <memchr>:
 8006518:	4603      	mov	r3, r0
 800651a:	b510      	push	{r4, lr}
 800651c:	b2c9      	uxtb	r1, r1
 800651e:	4402      	add	r2, r0
 8006520:	4293      	cmp	r3, r2
 8006522:	4618      	mov	r0, r3
 8006524:	d101      	bne.n	800652a <memchr+0x12>
 8006526:	2000      	movs	r0, #0
 8006528:	e003      	b.n	8006532 <memchr+0x1a>
 800652a:	7804      	ldrb	r4, [r0, #0]
 800652c:	3301      	adds	r3, #1
 800652e:	428c      	cmp	r4, r1
 8006530:	d1f6      	bne.n	8006520 <memchr+0x8>
 8006532:	bd10      	pop	{r4, pc}

08006534 <__malloc_lock>:
 8006534:	4801      	ldr	r0, [pc, #4]	; (800653c <__malloc_lock+0x8>)
 8006536:	f7ff bb13 	b.w	8005b60 <__retarget_lock_acquire_recursive>
 800653a:	bf00      	nop
 800653c:	200006f4 	.word	0x200006f4

08006540 <__malloc_unlock>:
 8006540:	4801      	ldr	r0, [pc, #4]	; (8006548 <__malloc_unlock+0x8>)
 8006542:	f7ff bb0e 	b.w	8005b62 <__retarget_lock_release_recursive>
 8006546:	bf00      	nop
 8006548:	200006f4 	.word	0x200006f4

0800654c <_read_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4604      	mov	r4, r0
 8006550:	4608      	mov	r0, r1
 8006552:	4611      	mov	r1, r2
 8006554:	2200      	movs	r2, #0
 8006556:	4d05      	ldr	r5, [pc, #20]	; (800656c <_read_r+0x20>)
 8006558:	602a      	str	r2, [r5, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	f7fa fde2 	bl	8001124 <_read>
 8006560:	1c43      	adds	r3, r0, #1
 8006562:	d102      	bne.n	800656a <_read_r+0x1e>
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	b103      	cbz	r3, 800656a <_read_r+0x1e>
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	bd38      	pop	{r3, r4, r5, pc}
 800656c:	20000700 	.word	0x20000700

08006570 <_close>:
 8006570:	2258      	movs	r2, #88	; 0x58
 8006572:	4b02      	ldr	r3, [pc, #8]	; (800657c <_close+0xc>)
 8006574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	4770      	bx	lr
 800657c:	20000700 	.word	0x20000700

08006580 <_fstat>:
 8006580:	2258      	movs	r2, #88	; 0x58
 8006582:	4b02      	ldr	r3, [pc, #8]	; (800658c <_fstat+0xc>)
 8006584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	4770      	bx	lr
 800658c:	20000700 	.word	0x20000700

08006590 <_isatty>:
 8006590:	2258      	movs	r2, #88	; 0x58
 8006592:	4b02      	ldr	r3, [pc, #8]	; (800659c <_isatty+0xc>)
 8006594:	2000      	movs	r0, #0
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20000700 	.word	0x20000700

080065a0 <_lseek>:
 80065a0:	2258      	movs	r2, #88	; 0x58
 80065a2:	4b02      	ldr	r3, [pc, #8]	; (80065ac <_lseek+0xc>)
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	4770      	bx	lr
 80065ac:	20000700 	.word	0x20000700

080065b0 <_init>:
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b2:	bf00      	nop
 80065b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b6:	bc08      	pop	{r3}
 80065b8:	469e      	mov	lr, r3
 80065ba:	4770      	bx	lr

080065bc <_fini>:
 80065bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065be:	bf00      	nop
 80065c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c2:	bc08      	pop	{r3}
 80065c4:	469e      	mov	lr, r3
 80065c6:	4770      	bx	lr
